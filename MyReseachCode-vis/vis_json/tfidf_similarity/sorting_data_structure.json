{
    "concept_relationship": {
        "links": [
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 0,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 0,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 0,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 0,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 14
            },
            {
                "prerequisite": 0.93993037393838,
                "similarity": 0.7041241452319316,
                "source": 0,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.38363062095621214,
                "source": 0,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 0,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 0,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 0,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.38363062095621214,
                "source": 0,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 1,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 1,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 1,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 1,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 1,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.5111164839335468,
                "source": 1,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 14
            },
            {
                "prerequisite": 1.854785208308169,
                "similarity": 0.6666666666666667,
                "source": 1,
                "target": 15
            },
            {
                "prerequisite": 2.3745314247234903,
                "similarity": 0.8333333333333335,
                "source": 16,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.3591089451179962,
                "source": 1,
                "target": 20
            },
            {
                "prerequisite": 1.6679325111745167,
                "similarity": 0.7357022603955159,
                "source": 21,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 1,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 1,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 1,
                "target": 27
            },
            {
                "prerequisite": 1.6370051585543417,
                "similarity": 0.7182178902359924,
                "source": 28,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 2,
                "target": 2
            },
            {
                "prerequisite": 0.8409401004452914,
                "similarity": 0.8535533905932737,
                "source": 3,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 2,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 2,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 2,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 17
            },
            {
                "prerequisite": 0.9183957424122966,
                "similarity": 0.6035533905932737,
                "source": 18,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.2886751345948129,
                "source": 2,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 28
            },
            {
                "prerequisite": 1.7761949803237358,
                "similarity": 0.75,
                "source": 2,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.8535533905932737,
                "source": 3,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 3,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 3,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 3,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 3,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 3,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 10
            },
            {
                "prerequisite": 1.622667531536881,
                "similarity": 0.6035533905932737,
                "source": 3,
                "target": 11
            },
            {
                "prerequisite": 1.699334123621779,
                "similarity": 0.6035533905932737,
                "source": 3,
                "target": 12
            },
            {
                "prerequisite": 1.983387962733292,
                "similarity": 0.6035533905932737,
                "source": 3,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 3,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 17
            },
            {
                "prerequisite": 1.0177129530247044,
                "similarity": 0.75,
                "source": 3,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 3,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 3,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 3,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 3,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 4,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 4,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 4,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 4,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 4,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.10660035817780521,
                "source": 4,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 4,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.26726124191242434,
                "source": 4,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 4,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.13363062095621217,
                "source": 4,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 5,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 5,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 5,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 5,
                "target": 6
            },
            {
                "prerequisite": 3.2660515914938273,
                "similarity": 0.6020620726159658,
                "source": 7,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 5,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.10660035817780521,
                "source": 5,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 16
            },
            {
                "prerequisite": 3.3246753246753245,
                "similarity": 0.6035533905932737,
                "source": 5,
                "target": 17
            },
            {
                "prerequisite": 0.31336612412534626,
                "similarity": 0.7499999999999999,
                "source": 18,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 25
            },
            {
                "prerequisite": 4.0452906127682535,
                "similarity": 0.6035533905932737,
                "source": 5,
                "target": 26
            },
            {
                "prerequisite": 0.940478281926562,
                "similarity": 0.658248290463863,
                "source": 27,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 28
            },
            {
                "prerequisite": 2.6140148989120697,
                "similarity": 0.6035533905932737,
                "source": 5,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 6,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 6,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 6,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 6,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 6,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 6,
                "target": 6
            },
            {
                "prerequisite": 1.5949209804195204,
                "similarity": 0.6250000000000001,
                "source": 6,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.2165063509461097,
                "source": 6,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.25000000000000006,
                "source": 6,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.34815531191139565,
                "source": 6,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 6,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 6,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 6,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.5773268353539887,
                "source": 6,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.5446278254943948,
                "source": 6,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 6,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 6,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 6,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 6,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 6,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.5773268353539887,
                "source": 6,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 6,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 7,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 7,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 7,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 7,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 7,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.6020620726159658,
                "source": 7,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.6250000000000001,
                "source": 7,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 7,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 7,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 7,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.5981553119113956,
                "source": 7,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 7,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 7,
                "target": 14
            },
            {
                "prerequisite": 3.4334734799399365,
                "similarity": 0.75,
                "source": 7,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.5833333333333334,
                "source": 7,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 7,
                "target": 18
            },
            {
                "prerequisite": 2.061556537609629,
                "similarity": 0.6020620726159658,
                "source": 7,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.5227723627949905,
                "source": 7,
                "target": 20
            },
            {
                "prerequisite": 3.3287236330539476,
                "similarity": 0.6035533905932738,
                "source": 7,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 7,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 7,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 7,
                "target": 24
            },
            {
                "prerequisite": 3.905752842521041,
                "similarity": 0.75,
                "source": 7,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 7,
                "target": 27
            },
            {
                "prerequisite": 1.701992205657605,
                "similarity": 0.8818813079129867,
                "source": 7,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 7,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 8,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 8,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 8,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.2165063509461097,
                "source": 8,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 8,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 8,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 8,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.4007556722888818,
                "source": 8,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 8,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 8,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 8,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 8,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.3444911182523068,
                "source": 8,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 8,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.3444911182523068,
                "source": 8,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 8,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 9,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 9,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25000000000000006,
                "source": 9,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 9,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 9,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 9,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.2611164839335468,
                "source": 9,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.5833333333333335,
                "source": 9,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 18
            },
            {
                "prerequisite": 4.095174882035811,
                "similarity": 0.658248290463863,
                "source": 9,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.1091089451179962,
                "source": 9,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.2357022603955159,
                "source": 9,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.2182178902359924,
                "source": 9,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.5111164839335468,
                "source": 10,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.10660035817780521,
                "source": 10,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.10660035817780521,
                "source": 10,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.34815531191139565,
                "source": 10,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.5981553119113956,
                "source": 10,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.4007556722888818,
                "source": 10,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.2611164839335468,
                "source": 10,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 10,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.3370388279778489,
                "source": 10,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.5111164839335468,
                "source": 10,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.4007556722888818,
                "source": 10,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.3566003581778052,
                "source": 10,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.46320071635561044,
                "source": 10,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.2849014411490949,
                "source": 10,
                "target": 20
            },
            {
                "prerequisite": 2.852238802348902,
                "similarity": 0.6192744729379983,
                "source": 10,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.21320071635561041,
                "source": 10,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.17407765595569785,
                "source": 10,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.4007556722888818,
                "source": 10,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.17407765595569785,
                "source": 10,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.5918817293789138,
                "source": 10,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 11,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 11,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 11,
                "target": 12
            },
            {
                "prerequisite": 1.020342626722792,
                "similarity": 0.75,
                "source": 11,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 11,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 11,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 11,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 12,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 12,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 12,
                "target": 12
            },
            {
                "prerequisite": 0.7019874272645911,
                "similarity": 0.75,
                "source": 12,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 12,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 12,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 12,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 12,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 13,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 13,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 13,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 13,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 13,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 13,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 13,
                "target": 13
            },
            {
                "prerequisite": 0.6635102683231411,
                "similarity": 0.75,
                "source": 14,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 13,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 21
            },
            {
                "prerequisite": 1.489138761586307,
                "similarity": 0.6035533905932737,
                "source": 22,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 13,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 13,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 13,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 14,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 14,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 14,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 14,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 14,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 14,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 14,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.7041241452319316,
                "source": 15,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.6666666666666667,
                "source": 15,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 15,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 15,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.3370388279778489,
                "source": 15,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 15,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 15,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 15,
                "target": 19
            },
            {
                "prerequisite": 1.7166000974958344,
                "similarity": 0.6091089451179962,
                "source": 20,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.36785113019775795,
                "source": 15,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 15,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.5833333333333335,
                "source": 15,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 15,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.2182178902359924,
                "source": 15,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.8333333333333335,
                "source": 16,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 16,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.5833333333333334,
                "source": 16,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 16,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.5833333333333335,
                "source": 16,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.5111164839335468,
                "source": 16,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 16,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 16,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 18
            },
            {
                "prerequisite": 0.9433044322716313,
                "similarity": 0.7041241452319316,
                "source": 16,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.1091089451179962,
                "source": 16,
                "target": 20
            },
            {
                "prerequisite": 0.2070139746206921,
                "similarity": 0.617851130197758,
                "source": 21,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 27
            },
            {
                "prerequisite": 0.3275274985978764,
                "similarity": 0.6091089451179962,
                "source": 28,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 17,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.4007556722888818,
                "source": 17,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 17,
                "target": 17
            },
            {
                "prerequisite": 3.3246753246753245,
                "similarity": 0.6035533905932737,
                "source": 18,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 25
            },
            {
                "prerequisite": 1.0,
                "similarity": 0.75,
                "source": 26,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 17,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 18,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 18,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.7499999999999999,
                "source": 18,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 18,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 18,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 18,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.3566003581778052,
                "source": 18,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 18,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 18,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 18,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 18,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 25
            },
            {
                "prerequisite": 3.5541986550869322,
                "similarity": 0.6035533905932737,
                "source": 18,
                "target": 26
            },
            {
                "prerequisite": 0.872157222565165,
                "similarity": 0.658248290463863,
                "source": 27,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 28
            },
            {
                "prerequisite": 2.3098083311424698,
                "similarity": 0.6035533905932737,
                "source": 18,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 19,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 19,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.6020620726159658,
                "source": 19,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 19,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.658248290463863,
                "source": 19,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.46320071635561044,
                "source": 19,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 19,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.7041241452319316,
                "source": 19,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 19,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.13363062095621217,
                "source": 19,
                "target": 20
            },
            {
                "prerequisite": 0.8965023957228027,
                "similarity": 0.6443375672974064,
                "source": 19,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.38363062095621214,
                "source": 19,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.38363062095621214,
                "source": 20,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.3591089451179962,
                "source": 20,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.26726124191242434,
                "source": 20,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5773268353539887,
                "source": 20,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.5227723627949905,
                "source": 20,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.3444911182523068,
                "source": 20,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.1091089451179962,
                "source": 20,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.2849014411490949,
                "source": 20,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.6091089451179962,
                "source": 20,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.1091089451179962,
                "source": 20,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.13363062095621217,
                "source": 20,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999998,
                "source": 20,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.48145502494313785,
                "source": 20,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.13363062095621217,
                "source": 20,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.46821789023599236,
                "source": 20,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.21428571428571425,
                "source": 20,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.7357022603955159,
                "source": 21,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 21,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5446278254943948,
                "source": 21,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932738,
                "source": 21,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.2357022603955159,
                "source": 21,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.6192744729379983,
                "source": 21,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.36785113019775795,
                "source": 21,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.617851130197758,
                "source": 21,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.6443375672974064,
                "source": 21,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.48145502494313785,
                "source": 21,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 21,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 21,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.2357022603955159,
                "source": 21,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.11785113019775795,
                "source": 21,
                "target": 27
            },
            {
                "prerequisite": 0.7220008096077335,
                "similarity": 0.8086066999241839,
                "source": 28,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 22,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 22,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 22,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 22,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 22,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 22,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 22,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 22,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 22,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.4999999999999999,
                "source": 22,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 23,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 23,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 23,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.10206207261596575,
                "source": 23,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 23,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 23,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 23,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 23,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 23,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.4999999999999999,
                "source": 23,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 23,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 24,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 24,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 24,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.21320071635561041,
                "source": 24,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 24,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.13363062095621217,
                "source": 24,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 24,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 24,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 24,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 24,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.26726124191242434,
                "source": 24,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 25,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 25,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 25,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 25,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.17407765595569785,
                "source": 25,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.5833333333333335,
                "source": 25,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.46821789023599236,
                "source": 25,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.2357022603955159,
                "source": 25,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 25,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 25,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 25,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.2182178902359924,
                "source": 25,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 26,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.4007556722888818,
                "source": 26,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 26,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 26,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 26,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 26,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 26,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 27,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.2886751345948129,
                "source": 27,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 27,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.658248290463863,
                "source": 27,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 27,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 27,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 27,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.17407765595569785,
                "source": 27,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.1666666666666667,
                "source": 27,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 27,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.658248290463863,
                "source": 27,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.11785113019775795,
                "source": 27,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 27,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.41666666666666674,
                "source": 27,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 27,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 27,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.1091089451179962,
                "source": 27,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 27,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.38363062095621214,
                "source": 28,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.7182178902359924,
                "source": 28,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.13363062095621217,
                "source": 28,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5773268353539887,
                "source": 28,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.8818813079129867,
                "source": 28,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.3444911182523068,
                "source": 28,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.2182178902359924,
                "source": 28,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.5918817293789138,
                "source": 28,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.2182178902359924,
                "source": 28,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.6091089451179962,
                "source": 28,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.38363062095621214,
                "source": 28,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.21428571428571425,
                "source": 28,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.8086066999241839,
                "source": 28,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.26726124191242434,
                "source": 28,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.2182178902359924,
                "source": 28,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.1091089451179962,
                "source": 28,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999998,
                "source": 28,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 29,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 29,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 29,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 29,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 29,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 29,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 29,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 29,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 29,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 29,
                "target": 29
            }
        ],
        "nodes": [
            {
                "count": 0.8229885057471265,
                "group": 1,
                "index": 0,
                "name": "quicksort",
                "videos_id": [
                    "7h1s2SojIRw",
                    "Ymh_AurrMbA"
                ]
            },
            {
                "count": 0.7300946141403486,
                "group": 1,
                "index": 1,
                "name": "insertion sort",
                "videos_id": [
                    "TzeBrDU-JaY",
                    "JQK4Rj4LE7E",
                    "i-SKeOcBwko"
                ]
            },
            {
                "count": 0.645091726517192,
                "group": 1,
                "index": 2,
                "name": "node",
                "videos_id": [
                    "oOnVN3mvkIk"
                ]
            },
            {
                "count": 0.5443965517241379,
                "group": 1,
                "index": 3,
                "name": "leaf",
                "videos_id": [
                    "oOnVN3mvkIk",
                    "bICWqGEe9Bs"
                ]
            },
            {
                "count": 0.5408509454949945,
                "group": 1,
                "index": 4,
                "name": "location",
                "videos_id": [
                    "Q-uDaTdpasE",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.4585832083958021,
                "group": 1,
                "index": 5,
                "name": "heap",
                "videos_id": [
                    "2DmK_H7IdTo",
                    "oOnVN3mvkIk"
                ]
            },
            {
                "count": 0.44989485431645915,
                "group": 1,
                "index": 6,
                "name": "list",
                "videos_id": [
                    "7h1s2SojIRw",
                    "TzeBrDU-JaY",
                    "oOnVN3mvkIk",
                    "q9DH0J4jU9E",
                    "JQK4Rj4LE7E",
                    "Ymh_AurrMbA",
                    "p2lN3HnekB0",
                    "i-SKeOcBwko",
                    "Q-uDaTdpasE",
                    "8Ug-a3IhUaE",
                    "Jdtq5uKz-w4",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.4319309067680619,
                "group": 1,
                "index": 7,
                "name": "algorithm",
                "videos_id": [
                    "PBSpokSipWw",
                    "7h1s2SojIRw",
                    "TzeBrDU-JaY",
                    "oOnVN3mvkIk",
                    "cDxnDtorsc4",
                    "Ymh_AurrMbA",
                    "p2lN3HnekB0",
                    "i-SKeOcBwko",
                    "8Ug-a3IhUaE",
                    "-7pzsM6gxgY",
                    "Jdtq5uKz-w4",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.4287486294584291,
                "group": 1,
                "index": 8,
                "name": "element",
                "videos_id": [
                    "PBSpokSipWw",
                    "oOnVN3mvkIk",
                    "q9DH0J4jU9E",
                    "Q-uDaTdpasE"
                ]
            },
            {
                "count": 0.4100014422323036,
                "group": 1,
                "index": 9,
                "name": "subset",
                "videos_id": [
                    "q9DH0J4jU9E",
                    "i-SKeOcBwko",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.3982200394142811,
                "group": 1,
                "index": 10,
                "name": "array",
                "videos_id": [
                    "PBSpokSipWw",
                    "2DmK_H7IdTo",
                    "TzeBrDU-JaY",
                    "q9DH0J4jU9E",
                    "JQK4Rj4LE7E",
                    "p2lN3HnekB0",
                    "i-SKeOcBwko",
                    "8Ug-a3IhUaE",
                    "-7pzsM6gxgY",
                    "Jdtq5uKz-w4",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.34912255405337195,
                "group": 1,
                "index": 11,
                "name": "range",
                "videos_id": [
                    "bICWqGEe9Bs"
                ]
            },
            {
                "count": 0.34912255405337195,
                "group": 1,
                "index": 12,
                "name": "work",
                "videos_id": [
                    "bICWqGEe9Bs"
                ]
            },
            {
                "count": 0.34912255405337195,
                "group": 1,
                "index": 13,
                "name": "water",
                "videos_id": [
                    "bICWqGEe9Bs"
                ]
            },
            {
                "count": 0.34912255405337195,
                "group": 1,
                "index": 14,
                "name": "depth",
                "videos_id": [
                    "bICWqGEe9Bs"
                ]
            },
            {
                "count": 0.3160834838611606,
                "group": 1,
                "index": 15,
                "name": "merge sort",
                "videos_id": [
                    "TzeBrDU-JaY",
                    "cDxnDtorsc4",
                    "Ymh_AurrMbA"
                ]
            },
            {
                "count": 0.309909670036556,
                "group": 1,
                "index": 16,
                "name": "sorted list",
                "videos_id": [
                    "q9DH0J4jU9E",
                    "JQK4Rj4LE7E",
                    "i-SKeOcBwko"
                ]
            },
            {
                "count": 0.30833245579853436,
                "group": 1,
                "index": 17,
                "name": "max-heap",
                "videos_id": [
                    "2DmK_H7IdTo"
                ]
            },
            {
                "count": 0.3057221389305348,
                "group": 1,
                "index": 18,
                "name": "tree",
                "videos_id": [
                    "2DmK_H7IdTo",
                    "oOnVN3mvkIk"
                ]
            },
            {
                "count": 0.3050574712643678,
                "group": 1,
                "index": 19,
                "name": "unsorted list",
                "videos_id": [
                    "q9DH0J4jU9E",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.29864864509679945,
                "group": 1,
                "index": 20,
                "name": "iteration",
                "videos_id": [
                    "JQK4Rj4LE7E",
                    "Ymh_AurrMbA",
                    "p2lN3HnekB0",
                    "Q-uDaTdpasE",
                    "8Ug-a3IhUaE",
                    "-7pzsM6gxgY",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.28617934824326874,
                "group": 1,
                "index": 21,
                "name": "selection sort",
                "videos_id": [
                    "TzeBrDU-JaY",
                    "p2lN3HnekB0",
                    "i-SKeOcBwko",
                    "-7pzsM6gxgY",
                    "Jdtq5uKz-w4",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.2710488505747126,
                "group": 1,
                "index": 22,
                "name": "degree",
                "videos_id": [
                    "7h1s2SojIRw",
                    "bICWqGEe9Bs"
                ]
            },
            {
                "count": 0.2710488505747126,
                "group": 1,
                "index": 23,
                "name": "tour",
                "videos_id": [
                    "7h1s2SojIRw",
                    "bICWqGEe9Bs"
                ]
            },
            {
                "count": 0.26865203761755485,
                "group": 1,
                "index": 24,
                "name": "control",
                "videos_id": [
                    "TzeBrDU-JaY",
                    "8Ug-a3IhUaE"
                ]
            },
            {
                "count": 0.26567418485308014,
                "group": 1,
                "index": 25,
                "name": "recursion",
                "videos_id": [
                    "TzeBrDU-JaY",
                    "Ymh_AurrMbA",
                    "-7pzsM6gxgY"
                ]
            },
            {
                "count": 0.24666596463882745,
                "group": 1,
                "index": 26,
                "name": "max heap",
                "videos_id": [
                    "2DmK_H7IdTo"
                ]
            },
            {
                "count": 0.22778811749999933,
                "group": 1,
                "index": 27,
                "name": "parent",
                "videos_id": [
                    "2DmK_H7IdTo",
                    "TzeBrDU-JaY",
                    "oOnVN3mvkIk"
                ]
            },
            {
                "count": 0.22076418887184143,
                "group": 1,
                "index": 28,
                "name": "bubble sort",
                "videos_id": [
                    "PBSpokSipWw",
                    "TzeBrDU-JaY",
                    "Ymh_AurrMbA",
                    "i-SKeOcBwko",
                    "8Ug-a3IhUaE",
                    "Jdtq5uKz-w4",
                    "c5h8EnKIdXk"
                ]
            },
            {
                "count": 0.2150305755057307,
                "group": 1,
                "index": 29,
                "name": "heap property",
                "videos_id": [
                    "oOnVN3mvkIk"
                ]
            }
        ]
    },
    "search_info": {
        "NumOfVideos": 21,
        "key": "sorting_data_structure_50",
        "similarity_threshold": 0.6,
        "time_delta": 7.016666666666667,
        "voclist_SelectMethod": 2
    },
    "videos_info": {
        "-7pzsM6gxgY": {
            "caption_exist": "T",
            "channel_id": "UCTG-wda3NqCBdRF8n2I-Ohg",
            "channel_title": "WebTunings",
            "concepts": [
                [
                    "array",
                    6
                ],
                [
                    "algorithm",
                    3
                ],
                [
                    "recursion",
                    2
                ],
                [
                    "iteration",
                    1
                ],
                [
                    "selection sort",
                    1
                ],
                [
                    "worst case",
                    1
                ]
            ],
            "description": "Code: https://github.com/webtunings/python/blob/master/sorting/quick_sort.py\n\nCode explained in this video:\n https://www.youtube.com/watch?v=90kbMbQWopw\n\nFacebook page: \nhttps://www.facebook.com/pages/WebTunings/339234242822202\n\nGoogle+\nplus.google.com/+webtunings\n\nTwitter:\nhttps://twitter.com/webtunings\n\nCode snippets: \nhttps://github.com/webtunings",
            "dislikeCount": "235",
            "duration": "PT5M40S",
            "likeCount": "1497",
            "published_time": "2015-05-05T15:13:37.000Z",
            "tags": [
                "Algorithm (Literature Subject)",
                "Quicksort (Ranked Item)",
                "quick sort",
                "sorting",
                "Data Structure (Literature Subject)",
                "searching",
                "Divide And Conquer Algorithms"
            ],
            "thumbnail": "https://i.ytimg.com/vi/-7pzsM6gxgY/hqdefault.jpg",
            "title": "QuickSort Algorithm - Divide and Conquer",
            "transcript": " So far, we have looked into Bubble sort, Insertion sort, Selection sort and shell sort Ok. And in this video we are going to look into quick sort, quick sort and this is based on divide and conquer strategy where we divide the problem into sub problems and finally solve the problem using recursion Ok. And the time complexity of this sorting algorithm is big Oh of n log n Ok, In average case. In worst case it can go up to big oh of n square but you can optimize this sorting algorithm by some mechanism that I will describe in future videos. The other unique feature of this sorting algorithm is this is inplace, you don't need to use any other array for solving the problem like in merge sort, you need to use separate array Ok. So, lets see one example, small example. We will take 8 elements Ok. You need to select one pivot element such that all the smaller elements than pivot are on the left side and all the larger elements are on the right side Ok. So, we are choosing this as a pivot the last element as the pivot. And we need to arrange this array such that all the smaller numbers are on the left right side Ok.So, you can rearrange this array into different combinatons for example, you can rearrange it like 4, 1, 2, this is 7, 9, 16, 11 and 8. All the smaller elements are on this side, larger elements are on this side and we will divide this into subproblems and finally recursively solve this or sort this array OK. So lets look into the partitioning logic or rearrangement of this array such that all the smaller elements are on the left right side Ok. So, we will start with one index. This is the index and one current and if this current element is smaller than 7, you need to swap this element with the index Ok. Current is 11. This is not smaller. Current is now 16, this is again larger. Now current is 2, this is smallet so you need to swap with the element at the index position and you need to increment the index Ok. Let's swap. So, we will swap and increment index OK. So, now this will become 2. 16,11,8,1,9,4 and 7.So, now this is the index and we have already completed up to this portion. Current is 8. This is larger Ok. Move to this place, current is 1. This is smaller,so let's swap these 2 elements and increment the index OK. So, this will become 2,1,11,8,16,9,4 and 7 OK. and you can see that all the smaller elements are going to left side and now this is the index that is you can say the dividing position where you need to put this pivot at the end of this iteration OK.So, up to this part is completed, current is 9. This is larger. Current is 4. So you need to swap these 2 elements OK. 2,1,4,8,16,9, this is 11 and this is 7. You need to increment the index. Up to this position, we are done and once you come to this place, you need to just 7 and 8. So, finally this one is 2,1,4,7,16,9,11 and 8 OK and you can see these all elements are smaller. These all elements are larger. This one is pivot OK. Now, we have to divide this problem into again 2 subproblems. So, this is the portion of this you can say subarray we have pivot 4, pivot 8 Ok. Again lets solve or rearrange such that all the smaller elements are on the left and all the larger are on the right side OK. So, you can see, this is already on the correct position. So, if you apply the same algorithm, you will have 2,1 and this was the pivot 4 obviously. 4,7 and this one is now pivot. Rearrage, so this will become 1,2,4,7 and now we are now left with just one element. So, we need to terminate this recursion OK. And again same here, pivot is 8 OK. So, if you rearrange, this will become. This was index. This is larger. This is larger. This is larger. So, finally you need to swap these 2 elements. 8,9,11,16 OK. So, now we have this subproblem 9,11 and 16. This is the pivot OK and after rearrangement this will become 9,11, this is pivot ok 16. Now 11 is pivot, you need to rearrage. So this will become 1,2,4,7,8,9,11 and 16. So this is now sorted. So, this is all about quick sort and we will look into implementation of this quick sort into different playlist Ok. see in the next video. Bye!!!!!!!!!!",
            "videoid": "-7pzsM6gxgY",
            "viewCount": "280697"
        },
        "2DmK_H7IdTo": {
            "caption_exist": "T",
            "channel_id": "UCzDJwLWoYCUQowF_nG3m5OQ",
            "channel_title": "Michael Sambol",
            "concepts": [
                [
                    "array",
                    9
                ],
                [
                    "heap",
                    9
                ],
                [
                    "tree",
                    6
                ],
                [
                    "max-heap",
                    5
                ],
                [
                    "max heap",
                    4
                ],
                [
                    "heapsort",
                    4
                ],
                [
                    "heapify",
                    3
                ],
                [
                    "functions",
                    2
                ],
                [
                    "pattern",
                    1
                ],
                [
                    "parent",
                    1
                ],
                [
                    "mean",
                    1
                ],
                [
                    "binary tree",
                    1
                ]
            ],
            "description": "Step by step instructions showing how to run heap sort.\n\nSource: http://ind.ntou.edu.tw/~litsnow/al98/pdf/Algorithm-Ch6-Heapsort.pdf\n\nLinkedIn: https://www.linkedin.com/in/michael-sambol-076471ba",
            "dislikeCount": "63",
            "duration": "PT4M13S",
            "likeCount": "837",
            "published_time": "2016-08-02T15:54:45.000Z",
            "tags": [
                "heap sort",
                "heapsort",
                "heap sorting",
                "heap data structure",
                "heapsorting"
            ],
            "thumbnail": "https://i.ytimg.com/vi/2DmK_H7IdTo/hqdefault.jpg",
            "title": "Heap sort in 4 minutes",
            "transcript": "  today we're going to learn heapsort let's start with some terminology a heap is simply an ordered binary tree a max-heap has a restriction that the value of the parent nodes are greater than the value of the child nodes here's an example of a max-heap we'll make use of a few functions when running heapsort first we have build max heap this creates a max heap from an unsorted array will also use heapify this is similar to build max heap except faster because we assume part of the array is already sorted you'll see what I mean one note for this video I'm less concerned with you knowing how these methods work but rather that they exist and when to use them once you understand the basics of heap sort you'll understand these functions from their pseudocode let's get started we are the following array that were tasked to sort in the nutshell will continuously create max heaps to find the largest item will then remove that item from the heap and into a sorted partition will begin by representing our array as a tree to see how we did that simply look at the array from left to right and the tree from top to bottom now that we have a tree let's create our first heap we assume this is an unsorted array so we call build max heap now that we have our max-heap we know the largest item 9 we swap 9 with the item at the end of the array 1 finally we remove nine from the tree and consider it sorted looks good so far except we're back to having a tree and not a heap this time we call heapify since only the item one is out of place one floats down to the bottom and the largest number heads to the top we're back to having a max-heap let's swap the largest number 8 with the item at the end of the unsorted part of the array 2 we remove 8 and consider it again we need our heat back so let's I think you see the pattern I'll let you watch the rest of the video without voice over we're all done our array is fully sorted here's the pseudocode for heapsort the time complexity of heapsort is Big O of n log n build max-heap takes o of n time heapify runs in O of log n time but we end up calling it n minus 1 times thank you for watching if you enjoy the video please like it and subscribe",
            "videoid": "2DmK_H7IdTo",
            "viewCount": "73541"
        },
        "3grg9u-LtcM": {
            "caption_exist": "T",
            "channel_id": "UC4EX8zLiBUalk704IX_zu1Q",
            "channel_title": "Easy Engineering Classes",
            "concepts": [],
            "description": "Complete Lecture on Bubble Sort Algorithm for students of IP University Delhi and Other Universities, Engineering, MCA, BCA, B.Sc, M.Sc Colleges.\n\nLearn BFS with example..",
            "dislikeCount": "79",
            "duration": "PT7M29S",
            "likeCount": "984",
            "published_time": "2016-06-20T14:20:42.000Z",
            "tags": [
                "Bubble Sort",
                "Data Structure",
                "IP University Syllabus"
            ],
            "thumbnail": "https://i.ytimg.com/vi/3grg9u-LtcM/hqdefault.jpg",
            "title": "Bubble Sort Algorithm(BFS) in (Hindi, English) with Example",
            "transcript": " creams will field class only just  has a vigor we do not know but only have  You only have time to measure the  article is just this again  food only has the idea of crime  old dollars  the state of the bay the sun and the ses  technique and this is trash is the tri sex  neither and if you eat well live  This is police food.  now of pico and bruno costa rica has  date not even those who take as  participant that arrives from the aunt of the girl  involve 40 female fat rate  even complex b under itself I think  This one's like this cute thing and it's lonely.  stay in the van of the field flower that goes  import for tri thy little person  rithieli mother stands, forget it  that the B complex that dark year  do not win will win a new band only  can this be then east 20 EMTU only  not only by violence at that time under  laws have no access or drugs  You should not fiddle with all this, but go out.  everything is just going to think about saving the ball  A lot of people will come out of these new ones.  players in this sex does not even get out  the school held in place said  newspaper gives the liter bin naif sex  ae  the srtt  if you dont even say rabbit  in the amendment let's say which he requested  to father's ibama  sexy and neither  in the stage of the stage he comes someone  everything campaign did not have to choose  finally the team will stay on the team and neither  no time  now the order is not to say just by the  smaller  the delegate by 2002 and only band  always fed the campaign has time in  which will use  the first stone of the work from scratch  your time inside the neighborhood church  jockey  who is outside looks there but in English  At the forum  that left him raul still the high bill  clinton ",
            "videoid": "3grg9u-LtcM",
            "viewCount": "131064"
        },
        "658aoUY4TW0": {
            "caption_exist": "T",
            "channel_id": "UC4EX8zLiBUalk704IX_zu1Q",
            "channel_title": "Easy Engineering Classes",
            "concepts": [],
            "description": "Merge Sort Explanation with Working Example in Hindi and English\n\nFor Students of B.Tech, B.E, MCA, BCA, B.Sc., M.Sc., Courses - As Per IP University Syllabus and Other Engineering Courses",
            "dislikeCount": "34",
            "duration": "PT4M58S",
            "likeCount": "413",
            "published_time": "2016-10-15T15:05:27.000Z",
            "tags": [
                "Merge Sort",
                "Sorting",
                "Data Structures",
                "ip university syllabus"
            ],
            "thumbnail": "https://i.ytimg.com/vi/658aoUY4TW0/hqdefault.jpg",
            "title": "Merge Sort Explanation with Working Example in Hindi and English",
            "transcript": " loeb will decide the reader to see if the  only that the sea rises and that only the  The internet will not even give the technician  load tam yet I see that this team  like black piano with bad luck love and  Treasury can escape from the mandelli  old scale of cameron  Who explains who I live in only one  nation is software on pc  I just want to be a musician. September 2007  just do not take that label of the sea  ten per vehicle, we just want it  that the base of the team before the morning sun  was intense for that is the edu was  no one will be worth it and expand  Between is cheap and will make money  but of Eden for the sake of the woman is  I get up, I'll give it up and nobody will be surprised.  the plate is so galley she says she reads  so he keeps 9 who champion in  keep this fame only to have  until I can champion you nobody  chancellor also wins pandora alone  tesco fernanda that goes to vila curau\u00e7\u00e1  and positioning and wants to leave the  tennis live taking what they could not  asking to deny affirms king of the village  and from the old and the old sema all process is  cool still carries a flower by law smoke  but the sun is not  only one is that it was great to see the  police officer reports from junqueira  that reducing tsu is the  champions of 2005 ",
            "videoid": "658aoUY4TW0",
            "viewCount": "60957"
        },
        "7h1s2SojIRw": {
            "caption_exist": "T",
            "channel_id": "UCZCFT11CWBi3MHNlGf019nw",
            "channel_title": "Abdul Bari",
            "concepts": [
                [
                    "quicksort",
                    16
                ],
                [
                    "list",
                    13
                ],
                [
                    "algorithm",
                    5
                ],
                [
                    "height",
                    2
                ],
                [
                    "queue",
                    1
                ],
                [
                    "mode",
                    1
                ],
                [
                    "divide and conquer algorithm",
                    1
                ],
                [
                    "string",
                    1
                ],
                [
                    "solid",
                    1
                ],
                [
                    "tour",
                    1
                ],
                [
                    "degree",
                    1
                ]
            ],
            "description": "Quick Sort Algorithm Explained",
            "dislikeCount": "11",
            "duration": "PT13M43S",
            "likeCount": "366",
            "published_time": "2018-02-02T06:02:46.000Z",
            "tags": [
                "algorithms",
                "algorithm",
                "Quicksort",
                "qucik sort",
                "quicksort algorithm",
                "abdul bari",
                "bari",
                "gate"
            ],
            "thumbnail": "https://i.ytimg.com/vi/7h1s2SojIRw/hqdefault.jpg",
            "title": "2.8.1  QuickSort Algorithm",
            "transcript": "  hi the topic is quicksort first of all let us understand what is the idea behind quicksort on what basis it works what is the base idea about it so let us take an example so the idea is if suppose there are group of students in a class and a teacher asks them to arrange themself in the increasing order of their height there are two options a teacher can show their places like you go there and stand at the back you come here and stand in the middle or front whatever it is so the teacher can show places to the students this is one option second option is teacher can ask the student to arrange themselves so every student will find his place in the sorted order so the faster method or quick method will be the one if the students are finding their place so yes this is the idea of quicksort so let us see I have taken some icons here some picture here to show you now if I ask the students to arrange themselves in the increasing order of height the shortest person in the class he knows what is his place he will quietly come and stand in the beginning of a list nobody has to help him he can check himself for URL or I am there in the class who is shortest in the class then I can know that my places in the beginning I can simply go and stand in the beginning now if you are the tallest person in the class where a student is tall as he knows that I am the tallest of all he will simply go and stand in the back nobody has to help him and nobody has to show his place then the rest they will arrange themselves how they will arrange themselves like let us take this guy what he will do he will ask these guys that you are taller than me you better go at the back and he will ask that person that you are shorter than me you come in front so others will find their places by arranging each other like suppose I have to stand in the line I have to stand in the queue so then I will see that where I should come I will see that the person who is taller he should be at the back of me so let him go at the back and tour shorter person should come in front and they will find me place that is the idea of quicksort now I'll write few numbers 10 80 90 60 30 20 which element is obviously sorted in the list this one six three five four two eight nine one nine which are immense seems to be sorted in one glance if you see this element is sorted how we can say that that is largest and it's at the back rest of the numbers don't know whether they are sorted or not but that is sorted sure in the same way if I have the numbers 4 6 7 10 16 12 m 33 sorted and it's a sorted position this element is in sorted position because all the elements before that element are smaller than this one and all the elements after that element are greater than that element so that is it's sorted position so quicksort works on the idea that an element is in the sorted position if all the elements on the left hand side should be smaller than that element all the elements after that element that is on the right hand side should be greater than that element then that element is in solid position rest of the elements may or may not be sorted so this is the idea of quicksort quicksort works on this one and that's how the name comes quick so like the students can quickly arrange themselves so that's all this is the quick method for sorting but this is not the fastest method of sorting the name is quit now let us look at the procedure of quicksort quicksort is a divide and conquer algorithm it follows divide and conquer strategy so it means it will split the problem into subproblems and solve those subproblems so let us see how it works so I will make initial setup first of all then I will show you the working so the initial setup is this is el lo that is the beginning of a list and this is high that is end of a list I have total nine elements this place is empty I have taken it now I will add here infinity that is maximum number infinity is not defined in computer so we take some maximum integer that will act as end of the list like in strengths we have slash 0 null character the string terminator here we have taken infinity to show the end of a list otherwise we should know that there are 9 elements or 10 elements or 20 elements we should work order according to length instead of that we prefer taking end of list marker then first element I will select a spy would so PI mu destined by what is 10 so it means I want to find the sorted position of the certain where this 10 should come 10 should come at a place such that all the elements smaller than 10 should be on left side and all greater should be on the right-hand side for that I should check if any greater number this side I will send it on that side if any smaller on that side I will bring it at this side so for doing so I will take I starting from 5 volt and J starting from infinity I will search for the elements which are greater than 10 that's 5 odd and J will search for the element which are smaller than private so that they can exchange the numbers all right so I at most it will stop at infinity J it will at most stop back by volt maximum if it is not getting anything it will Utley it at most it will stop at by vote now let us see the the procedure what we will do now is called as partitioning procedure first I will perform the procedure diamond line then I will write on the algorithm for partitioning let us start C increment I until you find an element greater than 10 so the next element is greater than 10 only decrement J until you find the elements smaller than or equal to pi volt that step is a smaller exchange them 5 comes here 16 goes there one swap continue increment I until you find a pivotal element greater than pootle element 8 is it greater than pi no 12 is it greater than 5 o TS now decrement J until you get an element smaller than pi vote this is smaller interchange them 9 comes here - it goes there continue I this is greater stop decrement J this is smaller stop three this side 15 that side continue is that greater than 10 is it greater than 10 yes I comes here degree Mint J is it smaller than 10 is this is smaller than 10 stop here that's don't interchange I and J element because I became greater than J I has crossed J it means we found the position of Pi board what is the position J wherever J is pointing that is the position of Pi board so send that element here and take 10 as this position now this is sorted this list is not yet sorted and this list is not yet sorted you can see that all the elements on this side are smaller than 10 and all the elements on that side greater than 10 and these are not sorted these are not sorted and even those are not sorted merely have to sort them then who is sorted 10 is sorted by what is sorted this is the partitioning position this is the partitioning position this is how partitioning position works I have shown you the partitioning procedure which has worked on one list and found out the position of a pirate element now break this perform quicksort recursively perform quicksort recursively on either side so that's it this is the partitioning method this is followed by quicksort let me write on the piece of code on this one partition it takes low and high as parameter then what it does select first element as pi would so P would is a of low then I was studying from here J was starting from here so I will be at low and J will be at high then what we did with I I was incrementing until it finds an element greater than pi mode so it was incrementing if the element is smaller than or equal to the pi what do I plus plus y a of I is less than or equal to PI boat and similarly decrement J until you get an element smaller than or equal to PI would while a of J is greater than PI would so I will stop if it is getting any greater element and J will stop if it is getting any smaller element so I have written the termination condition then what to do if I is on this side and J is on that side only then interchange the elements if I is less than J swap a of I with a of J this is just one comparison then again continue I increment I and continue decrementing J and compare them and swap so this process has to be repeated so I will write on this whole thing in a loop how long I should do this while I is less than J this I should continue as long as I is less than J if I became greater than J it will stop and here it should interchange swap a of low with a of J so swapping of Pi what elements should be done with a chain and a return j that is partitioning position that's all this is a partitioning algorithm ah quicksort works so this is just partitioning let us see how big sort works quicksort it will take low and high if low is less than high means at least there are two elements if so then it will call partition algorithm by passing lower and high and that questioning algorithm will return J the position where the partitioning is done then it will perform quicksort on left-hand side that is low to J and it will perform quicksort on right hand side from J plus 1 to hi that's it so it will perform this part perform from low to J and this perform from J +1 from here to this one perform quicksort on 2 now one thing I can show you here this is already sorted why do you include J see right hand side list is having infinity then where is the infinity for left hand side list so this sorted element will help as an infinity act as an infinity first first list so this is a small piece of recursive quicksort which is using this partitioning partitioning was finding the position of Pi word by taking I and J that's all watch next video for an analysis of",
            "videoid": "7h1s2SojIRw",
            "viewCount": "28351"
        },
        "87ZOHb9NuWM": {
            "caption_exist": "T",
            "channel_id": "UCBqhJVfeXpfjXmouExfdzpQ",
            "channel_title": "Sure GATE Success",
            "concepts": [],
            "description": "This video contains Detailed explanation of Radix Sort with the help of example. Not so important for GATE CSE but it would be helpful for other engineering exams.",
            "dislikeCount": "17",
            "duration": "PT7M3S",
            "likeCount": "155",
            "published_time": "2017-03-26T15:19:45.000Z",
            "tags": [],
            "thumbnail": "https://i.ytimg.com/vi/87ZOHb9NuWM/hqdefault.jpg",
            "title": "18 - Radix Sort | Sorting | Algorithm | Gate CS",
            "transcript": "  hello guys welcome to show great success this video is on Radek short so firstly we have to learn it is also one of the sorting technique but the concept we use here will be here the number will be sorted according to the digits that means we have to start from we have to start from the least significant digit and we have to move from the more significant digit firstly let's understand what is these significant degrees and what is most significant digit so from the right hand side the first digit will be the least significant digit and the right and the left most digit will be the most significant digit so let understand there it with an example in this example firstly we have to check that what is the value of the element which is having the largest number of digits so you can see here there is two digit in the fifteen there is one digit there is one digit so arranged 15 there is two digit there also 2 xored here there are three digit so may all of the values in three number that is 0 1 0 0 1 5 0 0 1 0 6 0 0 0 5 1 double zero 0 to 5 and 0 5 0 so we have made them in 3 numbers that is 3 digit now what we have to do is we have digit of the all number and we have to sort them accordingly so firstly let's start with you we know that the digit will varies from 0 to 9 there is nothing no other case apart from that so let's start with the first pass in the first pass what we have to do is we have to consider only the once plays off every digit so in terms of one place of averages let's start with the zero who goes on to 1 2 3 up to the 9 firstly we have to place the value which is having the worst disease as 0 at the first place flow 0 1 0 0 at the first place place it as it is is there any other value which is 0 yes this is also so place it also we have check Harry yeah there is also zero in the ones place so place this also and in this also so we have to paste them all so long we have to check for we have compared we have done with the zeroes and we have to cover the value of value at once is 1 so value at once is one is then disp and a no one else so just put them put it here is there a need to weigh at the ones place no is there any three at the ones no no fours and fives only so how many facts are there once two and three just put them 0 1 5 0 0 5 and 0 to 5 now in the past - in the past - what we have to do is we have to check for the tens digit we have done with the worst is it now we have to sort accordingly according to that tens digit what is the tens digit here 1s digit here is 6 0 5 0 1 0 &amp; 2 so what you have to do is we have to move with the ends digit so again start with the 0 place those value where we have 0 at the 10 space we have 0 at the tens place in hundred we have 0 0:01 we have zero at the tens place in 0:05 we have done with the zeros and we have to come on to the one we have one on the tens place in zero one zero place it we have one at the tens place in zero and five and in the wunens so now we have to check for two so here we have two in the tens place so put it here apart from this we don't have any tools we don't have any threes any force and we have five now so place five after there we have six at the tens place so place six so in the third pass what we have to do is in the third pass we have to do we have to meet with the hundreds digit we have done with the walls tens now we have two short according to the 100 digit so what is the hundredths busy tearing one we have to start with zero so there is a 0 in this so just put it down there is a zero in the 100 place so let it down also there is a zero at the hundred space but known also and there is a zero at the hundred place at it down there is a zero at the hundreds place write it down there is a 0 at the hundred spirits zero five zero and there is also a zero at the understand that is your zero we have done with these values after to zero what we have to check is we have to check for one so in this value we have one at the hundreds place so that too tall you can see this this is sorted so similarly firstly we have to check the number of digits and whatever the maximum number of digit in any value it will be the number of passes and after we have to move from the rightmost side from the LSB to the MSB and we have to check for 0 to 9 for the LSB that is for the ones in the second pass for tens in the third pass for hundreds and similarly up to whatever the number of digits we so thanks for watching please like comment subscribe and share have a great day",
            "videoid": "87ZOHb9NuWM",
            "viewCount": "20431"
        },
        "8Ug-a3IhUaE": {
            "caption_exist": "T",
            "channel_id": "UC4o8Fdpv3g_AjgShAeivqpA",
            "channel_title": "Naresh i Technologies",
            "concepts": [
                [
                    "algorithm",
                    8
                ],
                [
                    "list",
                    7
                ],
                [
                    "array",
                    6
                ],
                [
                    "control",
                    4
                ],
                [
                    "sort algorithm",
                    3
                ],
                [
                    "bubble sort",
                    3
                ],
                [
                    "iteration",
                    1
                ],
                [
                    "operations",
                    1
                ]
            ],
            "description": "",
            "dislikeCount": "9",
            "duration": "PT13M39S",
            "likeCount": "451",
            "published_time": "2016-10-08T04:09:56.000Z",
            "tags": [
                "Naresh IT",
                "Srinivas",
                "Balu C",
                "Data Structures",
                "Data Structures Overview",
                "Hands on Data Structures Training",
                "Online Data Structures Training",
                "Data Structures Demo",
                "Learn Data Structures"
            ],
            "thumbnail": "https://i.ytimg.com/vi/8Ug-a3IhUaE/hqdefault.jpg",
            "title": "Bubble Sort Algorithm | Data Structures | by Mr. Srinivas",
            "transcript": "  hi everyone welcome to nourish technologies this is cinemas in this session so we are going to discuss about a bubble sort algorithm so we know the importance of a sorting algorithms so right so this is one basic algorithm algorithm is a bubble sort bubble sort algorithm so what is the bubble sort algorithm means this is one of the oldest and very easiest sorting technique right to sort the elements sorting in the sense arranging all the elements right in an array or in the list in ascending order in ascending order how to arrange how to arrange means here it is we are implementing the algorithm of a bubble set so what is that algorithm so what is that algorithm means so first so we need to take all the elements a set of elements we are taking suppose here here the set of elements we are taking suppose five elements we are taking five elements consider n value is a five and value is a five so now I want to take some elements first I am taking all the elements in a descending order to understand the algorithm easily zero one two three four so five elements we are taking so n value nothing but size of the array is n that is a five so now total how many elements are there five elements are there but if you sort four elements fifth element automatically it will get its position so you have to sort only four elements so with the help of loops only with the help of iterators only right if we need to sort here it is suppose just consider I value equals to I value zero means you are sorting first element I value one means you are sorting second element I value two means you are sorting third element into I value three you're sorting fourth element enough because how many elements are there only five elements are there so that you have to sort only four elements then automatically fifth element so we'll move to appropriate position so according to this we have to repeat loop outer loop I value starts with a zero i value starts with a zero I is less than here it is starts with a zero 2 3 n value is a 5 so less than n means what for so less than n minus 1 n minus 1 so n value is a 5 5 minus 1 is a 4 less than 4 is nothing but a 3 is nothing but 3 so here it is we are repeating the loop from 0 1 2 3 4 times with the help of inner for loop only the control move inside nothing but I value 0 with I values 0 the control move inside so with the help of inner for loop now we have to sort that element first element you have to sort how many times we have to repeat same story J value starts with 0 J is less than n minus 1 J plus plus J plus plus so with the help of this inner loop we need to perform sort operation how to perform sort operation simple so in the first iteration the control move inside J value is a 0 nothing but here zeroth element we are comparing with the next element so comparison these two 50 and 40 50 and 40 and suppose if this element index element is greater than the next element next element then we have to swap nothing but so 40 will come to here and 50 move over there this is and remaining as usual 30 20 10 10 so next that means what if if array suppose ARR of J value is greater than ARR of J plus 1 J plus 1 means 1 the next element here it is J value girona 0 and 1 both will be compared if it is greater than we need to swap how to swap with the help of a temporary variable into the temp first we are storing a error of J M variable logic already we know swapping logic right into a RR of J we are storing a or R of a J plus 1 and into a or R of a J plus 1 we need to store the value temper this is the logic it will swap it will swap and next J value increases J value become 1 J value is 1 now observed so one is comparing with the two nothing but these two will compact 50 and 30 now J value 1 so here it is a 50 is greater than 30-years condition true because one is comparing with the 2 so these two will swap 30 and 50 so remaining elements same as usual so we are writing forty twenty ten forty twenty ten next I value become two again here it is a second position element is comparing with the third position element 50 and 20 yes 50 is greater than 20 again 20 50 remaining 40 30 10 40 30 10 and next one J value is a three next third position element is comparing with the fourth position again it will swap so 40 30 20 10 50 so here next whenever J value become 4 observed here 4 is less than 4 condition Falls that means inner for loop execution completed once that is nothing but 1 pass for each pass what is the highest element in the list will be bubbled to the last position that is what we call the bubbling concept bubbled so here what is the highest element in the list 50 so 50 will move to the last position highest element bubbled first element now remaining list is what this is the remaining list remaining list is 40 30 20 10 now observe here it is first element sorted successfully first element sorted next second element I value is a 1 that is nothing but once inner loop execution has been completed I value increases I value one control move inside J value starts with 0 but here in a previous case here it is a n value is a 5 now you can decrease that n value why because here it is only 4 elements are the 4 elements so it is better to decrease no need to sort 50 once again time based process so here here we need to decrease the value by 1 1 is not but I because I value one so gradually I value is increasing and here it is a the size of the array is decreasing so - I so now I value starts with a zero 5 - 1 4 4 - 1 3 less than 3 condition true now these two will compare 0 and 1 will compare yes 40 is greater than 30 so then what will happen so 30 will come to here and 40 will move over there and remaining as usual 2010 2010 and next J value increases inner loop increases sorry this is J value is 1 so 1 is less than 3 as condition true so these two will compare 40 and 20 yes swapping required 30 20 40 10 10 and next J value is 2 yes 2 is less than 3 still condition is a true so second position element will compare with the third position swapping required 30 20 10 40 10 40 this is so now so what is the highest element in the list is bubbled so here it is J value increases value become 3 3 is less than 3 then it will fail I value increases 2 so 2 means what I value 2 here it is a second element sorted now third element sorting come inside now n value is a 5 5 minus 1 is a 4 4 minus 2 I value tuna 4 minus 2 is a 2 so J value starts with a 0 now this one only this much is there this much 0 1 2 30 2010 30 2010 now here it is a J value 0 now 0th position element is comparing with the first position 30 is greater than 20 years condition true 20 come to here 30 here and 10 and 10 next J value become 1s condition true because so one is a less than 2 so 1 is comparing with the 2 and here it is 10 and 30 will swap yes swapping over because whenever the value is a 2 2 is less than 2 condition failed ok and next one here here inner loop will be terminated outer loop increases I value 3 3 means third element already sorted now fourth element sorting last element sorting so I value is a 3 come inside J value again starts with a 0 and here so what is that array remaining array only 2 elements that is 20 and 10 here J value 0 n value 5 5 minus 1 4 4 minus 3 is a 1 right so 0 is less than 1 condition true so these 2 will check s swapping required 10 and 20 10 and 20 next J value is a 1 but 1 1 condition Falls now it will be terminated next I value become 4 4 is less than 4 outer loop also fail if outer loop fail that means the program execution completed and here look at this all the elements sorted 50 40 30 20 10 this is how the bubble shot executes and how bubbles are arranged all the elements and so very important thing a time complexity right right how to perform time complexity and what all the operations we need to do right to decrease the time time consuming means what while per while sorting all the element and all these things we'll see in a coming session okay for more videos please subscribe to nourish a tea channel thank you",
            "videoid": "8Ug-a3IhUaE",
            "viewCount": "43269"
        },
        "JPwo-RoXiBQ": {
            "caption_exist": "T",
            "channel_id": "UCKWJpUxTFoyYzHStsldDRiQ",
            "channel_title": "CHULO",
            "concepts": [],
            "description": "How to solve Quick Sort Algorithm  in Data Structures Divide & Conquer | Sorting | Algorithm.Data Structures and Algorithms Quick Sort.Quicksort (sometimes called partition-exchange sort) is an efficient sorting algorithm, serving as a systematic method for placing the elements of an array in order.\nquick sort\nmeaning of quick sorting\nwhat is quick sort in DSA\nQuick Sort tutorial\nSearch Result:\nIs quick sort in place?\nHow does the quick sort algorithm work?\nWhat is meant by quick sort?\nquick sort example\nquick sort java\nquick sort c++\nquick sort pseudocode\nquick sort in c\nquicksort vs merge sort\nquicksort algorithm in data structure\nquicksort algorithm in c\nAbout US: Chulo is tech channel,it lets you know about technology update tutorials on web designing,application development and game development.\nEntrepreneurship,startup and family bussiness and giving you answers of building successful.\n\nHow to Protect Facebook ::::: https://www.youtube.com/watch?v=EI4qh...\nGet our App from this link :https://drive.google.com/open?id=0B6U...\n\nRoadMap For Front End,Back End and DevOps 2017 - New Framework and tools ======================================================https://www.youtube.com/watch?v=-cZiM...\n\nHow To Get 10K Views Within 3 Day l How To Get More Views On Youtube Videos l 100% Working\ud83d\ude0e\ud83d\ude0e \ud83d\ude0e \n\nhttps://www.youtube.com/watch?v=IZTLQ...\n\nHow To Make My Phone Number a Private Number || Easy and 100% working \nhttps://www.youtube.com/watch?v=ScL5J...\n\nHow to Make Mozilla Brower 500 times Faster than Google Chrome 2017 \nhttps://www.youtube.com/watch?v=A1ZpU...\n\nShare, Support, Subscribe!!!\n\n\n====================================================\n\nDo you want to miss the video and not be updated on what's going on technology,then don't subscribe otherwise if you are better person than subscribe ^__^\nYoutube: https://www.youtube.com/channel/UCKWJ...\nTwitter: http://www.twitter.com/@CHULO369",
            "dislikeCount": "12",
            "duration": "PT4M33S",
            "likeCount": "47",
            "published_time": "2017-09-05T13:52:17.000Z",
            "tags": [
                "quick sort",
                "quick sorting",
                "advantage of quick sorting",
                "quick sorting example",
                "chulo",
                "data structure quick sort",
                "dsa quick sort",
                "Data Structures and Algorithms Quick Sort",
                "what is quick sort",
                "meaning of quick sort",
                "sort",
                "sorting in dsa",
                "how does quick sort algorithm work",
                "partition exchange sort",
                "algorithm of quick sort",
                "quick sort video",
                "quick sort+youtube",
                "quicksort quora",
                "quick+sort",
                "pseudocode quick sort",
                "quick sort tutorial",
                "quick sort lectures",
                "sorting lecutures",
                "quicksort"
            ],
            "thumbnail": "https://i.ytimg.com/vi/JPwo-RoXiBQ/hqdefault.jpg",
            "title": "How to solve Quick Sort Algorithm  in Data Structures Divide & Conquer | Sorting | Algorithm",
            "transcript": "  [Music] hey what's up guys in this video we will learn about quick said before moving into the topic I would like to tell you that we make videos on technology reviews and tips and tricks related to digital world and subject on computer size so if you have interest on this topic please subscribe we have tons of videos for you so let's move on to today's topic that is the quick search quick start is a partition X insert where we define what private element in such a way that it lies at the middle of the list ok it is good to choose the pivert element which lies at the middle ok so now the list is divided into two partition all values less than fighbird are placed on the left side of the pie bird and all greater values are placed on right side of the pie bird the left hand right partition are sorted recursively using the same method so now let's move on to the example after looking at the example we will be clear about quick search here we have an example where for six two five three nine are the elements arranged like this okay we have the elements four two six five three and nine and we choose the five is our pie bird element okay now what we need to do is we need to define the pointer that is the left pointer and the right pointer okay so since 4 is less than 5 we safely a left pointer as we already know that the left-hand side of the pie but element should be less than the pivert element and the right-hand side of the fire element must be greater than the pivert element so now we save the left pointer and since 2 is less than 5 - the element is listing the pirate element we sit the left pointer that is we move into this sixth one okay the six element so since six is greater than five we stop since six is not less than five so here we will stop okay now we will move towards the a right-hand side of the fiber element that is we move towards the right pointer now since 9 is greater than 5 it's okay so we sift the right pointer okay so is we already know that the right hand side of the pirate elements should have the value greater than the pirate element okay now we have a 3 which is less than 5 okay so we need to stop at this place okay because we we already know that the must be greater than the pipat element which is not true in this case that is 3 is not greater than the 5 now what we need to do is we need to swap those values so here we have 3 at this at this place and 6 at this place ok now we move pointer one more step that is the left pointer will move towards in towards the right and the right pointer wood will move towards the left now we have 5 equals to equals to 5 now we move pointers one more step and in this way we do the quick starting so if you loved this video please hit like and subscribe and if you think that this video will help your friend to understand this topic please share this video with your friend and if you have some kind of a problem regarding this topic please comment down in the comment section we will help you so thanks for watching have a great time bye bye",
            "videoid": "JPwo-RoXiBQ",
            "viewCount": "6731"
        },
        "JQK4Rj4LE7E": {
            "caption_exist": "T",
            "channel_id": "UCHbw7FKCFSfVI7uRp9vDj-A",
            "channel_title": "Programming9",
            "concepts": [
                [
                    "insertion sort",
                    4
                ],
                [
                    "iteration",
                    2
                ],
                [
                    "list",
                    2
                ],
                [
                    "array",
                    1
                ],
                [
                    "sorted list",
                    1
                ]
            ],
            "description": "This video explains basic procedure for Insertion Sort. We have taken 8 elements, and explained in clear step by step.\n\nSubscribe to my YOU TUBE Channel for more videos.\n\nwww,programming9.com\n\nwww.facebook.com/programming9",
            "dislikeCount": "9",
            "duration": "PT5M39S",
            "likeCount": "142",
            "published_time": "2014-06-12T09:15:08.000Z",
            "tags": [
                "Insertion Sort",
                "Sorting Algorithm",
                "programming9",
                "c programming",
                "data structures",
                "sorting and searching"
            ],
            "thumbnail": "https://i.ytimg.com/vi/JQK4Rj4LE7E/hqdefault.jpg",
            "title": "Insertion Sort Procedure",
            "transcript": "  hello friends welcome to programming 9.4 meter tutorials in this video we are going to discuss about the insertion sort of insertion sort is also another simple starting method just like the bubbles are ending selections arter right let us see what the insertion sort is initially we have taken eight values eight array of values so from that I indicated each and element with a particular subscript or index value that is called from zero to seven so we can find totally eight elements now let us see how it is in before going to do that let us start with it some passes are called the iterations each iteration considered as one load so in the first pass our first iteration I am considering this as P equals to 1 what we have to do here initially a of 0 is itself trivially sorted them next in the past to let us take let us compare 77 and 33 whether you need to check 33 is less than 77 or not if 33 is less than 77 we need to insert this 33 in before the a of 0 index position keep it remember we are just going to insert this we are not swapping the values that is the only difference if you compare it with the other sorting techniques so immediately 33 would be moved to the a of 0 index position and 77 will come to the a of one position remaining values are as usual so in the past to only 33 77 next let's get start with the past 3 in the past 3 next identify the next index position that is calling 44 identify where we need to insert this party for first compare whether 44 is less than 77 or not that is we need to compare this 44 with a 77 value 44 is definitely less than 77 the condition is true here so immediately the far takfir will move to one position that is in the place of 77 we'll get the 44 so 77 will be moved and positioned to the right next again compare 33 with the 44 here the condition failed because 33 is purely less than the 44 so we need to insert 44 in the place of 77 so party for the 77 would move one position to the right next in the past four we just have to move to the third index position that is called the 11 identifying the condition is 11 less than 77 yes true move is 11 less than 44 yes move is 11 less than 33 yes so we need to insert this 11 just before the 33 so we get 11 here all the values would move one position to the right cycle what's the next value knob 11 is over next move to the Aviator where is the proper position of 88 88 is no 88 is greater than 77 so there is no need to check with the party for 33 and 11 because all this list is already sorted and then move to the 22 that is in first five 11 33 44 77 88 and 22 where is the proper position of this 22 compare 22 with 88 20 days less than 88 20 days less than 77 22 is less than 44 22 is less than 33 22 is greater than 11 so we need to insert this 22 in between this 11 and 33 so 11 22 33 44 77 88 and then 66 and 55 these are the values now again compare 66 compare 66 with 88 less than 66 is less than 77 66 is greater than particle so we need to insert this 66 in between the 44 in 77 this is called past 6 and this is called past 7 11 22 33 44 we will get 66 here in it last will get 55 now in the past eight find the last element that is 555 whether to check the condition with a 55 is less than 88 yes 55 is less than 77 through 55 is less than 66 true 55 is less than 44 failed so we need to insert this 55 in between this 44 and 66 so 11 22 33 44 55 just move all the remaining values to one position right so now finally we got all the sorted list of elements using the insertion sort thank you",
            "videoid": "JQK4Rj4LE7E",
            "viewCount": "22996"
        },
        "Jdtq5uKz-w4": {
            "caption_exist": "T",
            "channel_id": "UClEEsT7DkdVO_fkrBw0OTrA",
            "channel_title": "mycodeschool",
            "concepts": [
                [
                    "array",
                    33
                ],
                [
                    "algorithm",
                    15
                ],
                [
                    "bubble sort",
                    5
                ],
                [
                    "worst case",
                    4
                ],
                [
                    "list",
                    3
                ],
                [
                    "selection sort",
                    3
                ],
                [
                    "polynomial",
                    3
                ],
                [
                    "state",
                    3
                ],
                [
                    "scan",
                    3
                ],
                [
                    "sort algorithm",
                    2
                ],
                [
                    "best case",
                    2
                ],
                [
                    "average case",
                    2
                ],
                [
                    "sorted array",
                    2
                ],
                [
                    "link",
                    1
                ],
                [
                    "stable",
                    1
                ]
            ],
            "description": "See complete series on sorting algorithms here:\nhttp://www.youtube.com/playlist?list=PL2_aWCzGMAwKedT2KfDMB9YA5DgASZb3U \nThis series is in progress, we will be adding lessons into this series every week. \nIn this lesson, we have described Bubble sort algorithm and analyzed its time complexity. \nSeries on Time Complexity:\nhttp://www.youtube.com/playlist?list=PL2_aWCzGMAwI9HK8YPVBjElbLbI3ufctn \n\nSubscribe to our channel to get updates on new lessons.\n\nYou may also like us on Facebook:\nhttp://www.facebook.com/MyCodeSchool",
            "dislikeCount": "139",
            "duration": "PT10M24S",
            "likeCount": "2786",
            "published_time": "2013-06-07T14:32:45.000Z",
            "tags": [
                "C++",
                "java",
                "algorithms",
                "algorithm",
                "interview",
                "coding",
                "programming",
                "pseudo code",
                "Bubble Sort",
                "yt:cc=on",
                "jobs",
                "software",
                "Computer Programming (Professional Field)",
                "questions",
                "solutions",
                "course",
                "school",
                "microsoft",
                "facebook",
                "amazon",
                "google",
                "C (Programming Language)",
                "skills"
            ],
            "thumbnail": "https://i.ytimg.com/vi/Jdtq5uKz-w4/hqdefault.jpg",
            "title": "Bubble sort algorithm",
            "transcript": "  in our previous lesson in this series on sorting algorithms we had discussed selection sort algorithm now in this lesson we are going to discuss another sorting algorithm named bubble sort so once again let's say we have a list of integers given to us in the form of an array something like this let's name this array a we have six elements in the array so we have indices from 0 to 5 now we want to sort this array so we want to rearrange the elements in the array in increasing order what we are going to do in this algorithm is we are going to scan the array from left to right multiple times we will call each scan one pass on the array it's like we will first look at the zeroth element and then look at the one element and then the element at index two and so on of course we will not scan the array for no reason what we will do is when we are scanning the array and when we are at a particular position we will compare the element at that particular position with the adjacent element at the next position so if we are at 0th position we will compare the element at 0th position with the element at one x position and if the element at the current position is greater than the element at the next position we will swap the two elements in this case two is not greater than seven so we will not swap the two elements we will just move on to the next position which will be position one once again we will compare the element at this position with its next element and if it is greater we will swap the two elements in this case seven is greater than four so we will swap the position of these two elements so seven will move to index two and four will move to index one and now we will move to index two the number at index two at this stage will be seven once again we will look at the next element it's one seven is again greater than one so we will swap and now we will move to index three once again at this stage the number at index 3 is 7 we will compare it with five and we need to swap again so seven will go to index four and five will move to index three and now we will go to index four as you can see this whole process is pushing number seven which is the largest in the array towards higher indices at each step when we are at position four once again seven is greater than three so we will swap there is no next element for index five and at this stage we are done with one pass on the array and what has happened after this one pass is that seven which is the largest in the array is at its appropriate position it deserves to be at position at index five in the sorted array and that's where it is so seven has kind of bubbled up to the rightmost position in the array with this whole logic of swapping the adjacent elements this was our initial array and after first pass we have gone to a state like this if I quickly have to write pseudocode for a pass it will be running a loop something like this we will run a loop from 0 to n minus 1 let's say n is the number of elements in an array and if e a\u00ed the element at position i is greater than element at position i plus 1 we will swap the two elements there is one minor bug here if I is equal to n minus 1 it will be the last index so there will be no element after that so we will not be able to access a I plus 1 so we will run this loop only till n minus 2 we don't want to access an index that will be out of the bound of the array out of the range of the array for I equal n minus 1 e I plus 1 would have been out of range ok so this is the state of the array after one pass what if we perform another pass and once again keep comparing the adjacent elements and performing swaps if we will do so now the second largest element in this example we'll end up at index for the second largest in the array is number 5 so after second pass our array will be in a state like this with every pass on the array the array will be divided into two parts one part will be the sorted part and another part will be unsorted part after two passes the part of the array from index four till five is sorted and the part of the array from index zero till three is with each pass the largest element in the unsorted half will bubble up to the highest index in the unsorted half so in third pass number four should bubble up to position three index three and while scanning once we reach to the part where we are already sorted there will be no swapping we can actually avoid going to the sorted part it will only improve our algorithm to pass three our array will be looking like this in fact we are already sorted in general if we will conduct n minus 1 such passes for an array of size n we can say something like for K 1 to n minus 1 or we could say for K 0 to n minus 2 after n minus 1 passes we are guaranteed to be sorted so this is our pseudocode for bubble sort algorithm given an array and the number of elements in the array this function bubble sought will sort the elements in the array in increasing order let's now try to analyze the time complexity of this algorithm the running time of this algorithm will be the running time of these statements inside the nested loop let us assume that these statements will take constant time C in the worst case these statements will execute in constant time now the first loop will run exactly n minus 1 times and the second loop will also run exactly n minus 1 times so the total time taken as a function of n will be n minus 1 into n minus 1 into C which will evaluate to CN square minus 2 C n plus 1 whenever we have a polynomial expression for time then we say that the time complexity is Big O of the highest order term in the polynomial the highest order term here is n square we just remove the constants and we say that this is this running time will fall into the class Big O of yes Tata Tom in this case it will be n square if you do not know about Big O notation or how to calculate running time of algorithms we have a whole series on time complexity analysis you can find the link to it in the description of this video Big O of n square is not the best running time for a sorting algorithm in fact this running time is bad bubble sort is a slow sorting algorithm it's as good as selection sort but both bubble sort and selection sort are slow sorting algorithms we can do couple of things in this algorithm to improve the time complexity at least for some scenarios the first thing that we can do is we need not run this second loop all the way till n minus 2 all the time as we had discussed earlier at any stage during the sorting the array will have some part as sorted and some part as unsorted there is no point passing through the sorted part because there will be no swapping in that part for first pass we can run this inner loop till n minus 2 for the second pass we can run this inner loop on little n minus 3 and we will be good for the third pass we can only run till n minus 4 and so on so in general we can run this loop till n minus K minus 1 so when K is 1 we will run until n minus 2 when K is 2 we will run till n minus 3 and so on this is some improvement but in this case also if you would calculate the time expression it will be some polynomial of the form n square plus BN plus C so complexity will still be Big O of n square we can do something else to improve this algorithm further if you remember the example that we had picked up it was sorted after 3 passes only and 4th and 5th pass was only redundant if the list is already sorted there would be no swaps so if we go through a pass without swapping anything then definitely at that stage the list is already sorted so I'll do something like this in this algorithm I'll take a variable and name it flag and set it to 0 before making a pass and once this condition a I greater than AI plus 1 is true for any AI then we will have to trap and we will set this flag as one and now when we will come out of this loop after a pass if flag is zero then there has been not even one swap so we do not need to conduct any more passes so we can break out of this loop the outer loop and this way we will avoid making redundant passes once the array is sorted now with this modification if we input and already sorted array to the function bubblesort then this particular loop will execute only once to figure out that it's already sorted so the time taken if we were considering this as taking some constant time see in the worst case the time taken will be C into n minus 1 only so this will be the best case for our algorithm our algorithm will be big-oh of n in the best case in the average case somewhere Midway after making let's say n by 2 passes we will exit the inner loop if we will reduce the time complexity expression it will still come like come something like a n square plus BN plus C kind of expression so in average case also this will be big-oh of n square and in worst case the inner loop will also run n minus 1 times and we will be big-oh of n square bubble sort is in place and stable sorting algorithm and we just reduced its time complexity which is Big O of n square in the worst case this is it for this thanks for watching",
            "videoid": "Jdtq5uKz-w4",
            "viewCount": "691510"
        },
        "PBSpokSipWw": {
            "caption_exist": "T",
            "channel_id": "UCx-kFfzekMbhODaBss-ZnsA",
            "channel_title": "Vivekanand Khyade - Algorithm Every Day",
            "concepts": [
                [
                    "array",
                    10
                ],
                [
                    "algorithm",
                    6
                ],
                [
                    "bubble sort",
                    5
                ],
                [
                    "element",
                    2
                ],
                [
                    "sort algorithm",
                    1
                ],
                [
                    "pattern",
                    1
                ],
                [
                    "link",
                    1
                ]
            ],
            "description": "Given an array , sort the array using Bubble sort.",
            "dislikeCount": "9",
            "duration": "PT8M54S",
            "likeCount": "164",
            "published_time": "2017-01-16T04:54:55.000Z",
            "tags": [
                "bubble sort",
                "array",
                "pass",
                "number of passes",
                "time complexity",
                "o(n2)",
                "space complexity",
                "data structures",
                "algorithm",
                "code",
                "program",
                "programming",
                "explaination",
                "computer science",
                "interview",
                "question"
            ],
            "thumbnail": "https://i.ytimg.com/vi/PBSpokSipWw/hqdefault.jpg",
            "title": "Bubble Sort (Algorithm /Code/Program)",
            "transcript": "  hello friends today we are going to learn the algorithm for bubble sort so let's see an example so this is the array and these are the indices of the array there are eight elements in this array and we will apply bubble sort algorithm on this array to sort this array in an increasing order so before starting for the algorithm just create the note here every position I will be compared with a position I plus 1 so this means in every part of the algorithm every position will be compared with its next position so let's see how to do this here this is the position I and the position I plus 1 so now if the element at position I is greater than element at position I plus 1 then we have to swap that is what you can find out here here we have written if a of I is greater than a of I plus 1 then we have to swap so let's go ahead so here yes 60 is greater than 5 so we have to slug so I will snap 5 and here it will come 6 now I will be incremented at first I was here now I will increment and go at position 1 so if I is 1 then I plus 1 will be 2 so I plus 1 is this position so now let us compare 6 with 3 yet 6 is greater than 3 so we have to so we will slap come six let's increment I so I was one so now I will go to second position you can see in this code here I is being incremented every time for every PI so now I is two so I plus 1 is 3 6 is greater than 1 yes so we will swap one is here 6 is here now let's increment I so 6 is greater than it no so we don't slack and we directly increment I 8 is greater than 7 yes so we have to snap increment I it is greater than two yes greater than 4 yes so we have to swap and we don't increment i from here because if i concert seventh position then there is no I plus 1 I plus 1 is not presented as the arranged so we increment I only up to n minus 1 that is 6 here n is 8 so if we go up to 7 that means I will be I will go up to 6 so let's go to the next pass pass to so in this pass with I will tell you the shortcut so you just have to go on comparing every position with every next position so let's compare 5 with 3 yes 5 is greater than 3 let's swap compare five with one remember I am comparing the positions here so five with one yes five is greater than 1 so 1 will come here and 5 will go here now compare this position with this position that is 5 with 6 so no there is no need of swapping because 5 is not greater than 6 to compare 6 with 7 yeah no there is no need of surfing compare 7 with two yes there is need of nothing to 7 compare 7 and 4 so yes there is need of swapping compare 7 with it no need of cutting so let us go to the next pass compare 3 with 1 yes there is need of swapping so one good 3 compare three with five no need of scrapping 5 is 6 no need of swapping 6 feet - yes there is need of nothing and 6 so compare 6 with four yes there is need of swapping compare 67 no DS need of swapping comparable with it no need of stuffing so here I have to tell you why this algorithm is called bubble sort because of the pattern of comparison look so is looking like a bubble so it is called as bubble sort so now let's go to the Past for compare one with three noid of snaps crease five no need of snaps five is - yes there is a need of snapping five is four yes five is six no need of swapping six with seven no need of snapping seven with it no need of snapping so come to the pacifist one is compared with three no need of snapping please compared with two yes there is a need of swapping please compared with four no need of swapping four is compared with five no need five is six no need of swapping 6 with 7 and 7 with 8 so no need of swapping is there so come to the past 6 compare the positions one with - no need to be three no need 3 with 4 4 with 5 5 is 6 6 to 7 7 with it no need of slapping this means the array is sorted now in increasing order past 7 and pass it will also be executed but there will be no rearrangement in the array because the array is already sorted so now I will tell you what to do if you want to sort the array in decreasing order so there is only one change for swapping you have to slap if a of AI is less than your high plus 1 then the array will be sorted in decreasing order so this is for bubble sort and you can get the full code on my github link github.com slash Vivekanand 44 hey friends please subscribe to my channel as I post algorithm videos every day and if you want a video on any particular topic then please mention in the comment below thank you",
            "videoid": "PBSpokSipWw",
            "viewCount": "16089"
        },
        "Q-uDaTdpasE": {
            "caption_exist": "T",
            "channel_id": "UCBzuzzTGYip5ec9ewMDjebQ",
            "channel_title": "Ruchika vijay karma",
            "concepts": [
                [
                    "iteration",
                    17
                ],
                [
                    "element",
                    16
                ],
                [
                    "list",
                    13
                ],
                [
                    "location",
                    3
                ],
                [
                    "key",
                    3
                ],
                [
                    "best case",
                    3
                ],
                [
                    "worst case",
                    2
                ],
                [
                    "target",
                    1
                ],
                [
                    "base",
                    1
                ],
                [
                    "root",
                    1
                ],
                [
                    "name",
                    1
                ],
                [
                    "tournament",
                    1
                ],
                [
                    "bag",
                    1
                ]
            ],
            "description": "The method of insertion sort with example in Hindi",
            "dislikeCount": "14",
            "duration": "PT11M27S",
            "likeCount": "45",
            "published_time": "2015-06-29T15:09:46.000Z",
            "tags": [
                "insertion sort",
                "sorting",
                "DBMS"
            ],
            "thumbnail": "https://i.ytimg.com/vi/Q-uDaTdpasE/hqdefault.jpg",
            "title": "Insertion sort in data structure in Hindi",
            "transcript": "  insertion shot in the insertion short shorting is a complete by talking in element one at a time from the unsorted position and inserting into the correct position in the sorted portion for example my past list him five three seven two nine it isn't fire element is shorting my tournament and element we shot in KD + -1 passkey attempt escape first pass me first pass me a first basketball would list Capelli element was shorted element managed at ahead sure did TK or che sub element go unsorted elements managed Etha unshot is capela pass my unsorted part a PLA element o shorted bag make proper position / insert key Agatha his second pass me a sip Ricard second element go shorter list may proper position / insert Kia data etc one process puri complete culture so they can first pass me was passed yeah my shorted list or a unshod thumb is element co shorted may shorter list may insert career okay so hyung s co s me ye element is safe trota mclubbe agar up and ESCO a of one school a of a of three you for a of five minutes don't um they can get a of one greater than a of two then then yoga interchange the position of element so hum interchange card in the element key position Gautama Pascal is target three five seven two yoga my short it would you be on your okay second pass me a is element go shorted let me insert Collini OC be proper location pet insertion operator and they can get a of a of two up a of to am the a of one a of 2 F 3 4 in fact a of to less than half yeah 3 K then then quite change Neoga interchange a yoga or yay a Smith proper is the wrestle mess list maybe yoga shorted will be unsorted then third person it is element code and it's my proper location pin circling it from the king geeky a of a ba of one a of to a of three or four and a or five the a of for Joey you know for less than a of three also a of - you know one then it is a proper location pit and insert carrying a in - yay jaha - sub say first volley position pick a of one say interchange yoga then three five seven yeah muddy sure shorted while he unsorted take a fourth pass me here a of one a of 2 F 3 a 4 5 - a of five - greater than her a of force a also your fives three say a of to say B or a of one city - humph quite changemaker indeed a my pacifist I get two three five seven nine okay yah holy moly shorted list take it up a boom hum they can give complexity ticket up am taking me give you one two three four four passes over it is happy element taking here complexity complexity me the base case or for in insertion short across when the list is already sorted from this only one in in in iteration agar hamari list already shot hoagie to Oscar Vasquez managed Agra or is kazna only one iteration hunger chicken Elementary was ordered my hunger in input cage Yeti sub-element reverse order may input cage at a yes the team may iteration clearly an in insertion short kill year Vasquez Fatiha it's a city map La Paz may only one iteration only one iteration cage at their second pass make two iteration kids are they and last pass male and minus one iteration cage at them asleep cool iteration key Sankhya total number of number of iteration tension yes one plus two plus of 2 n minus 1 over N n plus 1 by 2 minus L equal to 1 by 2 and square minus u big yeah and the worst case occurs when the list to be shorted in the reverse order in English in this case in the first passed 1 iteration n in second pass to iteration and in last pass and minus 1 equation top take place so total number of iteration 1 plus 2 plus up to n minus 1 equals 2 N and n plus 1 minus n by 2 equals to 1 1 by 2 and square minus and easily in insertion short curve worst case analysis Co of n square K root may the size at ahead average case-mate and iteration kazanka GAD karna HJ Kjetil cadre booth ahead or SI p OU and square Kurumi vyakthi Agata that he lists me list me sub he input element shorted order me hungry list me Sabri elements joy was short trade order my own name Tobiah in insertion short Kelly a bestest best case Jota Yuki skit but take pass me AG iteration Kia Jetta it's the cool iteration kazanka best case may Aoki best kiss me total number of total number of iteration County and -1 Atta is a off and kill maiden ODI Japan it English media on again the best the case for shin short hookers when the list all ready sharp it one this only one iteration so total number of it raishin in best case equals to n minus one it is then turn my off and taken of a magnetic unit fit short",
            "videoid": "Q-uDaTdpasE",
            "viewCount": "10589"
        },
        "TzeBrDU-JaY": {
            "caption_exist": "T",
            "channel_id": "UClEEsT7DkdVO_fkrBw0OTrA",
            "channel_title": "mycodeschool",
            "concepts": [
                [
                    "array",
                    33
                ],
                [
                    "list",
                    24
                ],
                [
                    "algorithm",
                    10
                ],
                [
                    "merge sort",
                    8
                ],
                [
                    "recursion",
                    5
                ],
                [
                    "sort algorithm",
                    3
                ],
                [
                    "state",
                    3
                ],
                [
                    "control",
                    3
                ],
                [
                    "worst case",
                    2
                ],
                [
                    "average case",
                    2
                ],
                [
                    "selection sort",
                    1
                ],
                [
                    "functions",
                    1
                ],
                [
                    "key",
                    1
                ],
                [
                    "parent",
                    1
                ],
                [
                    "insertion sort",
                    1
                ],
                [
                    "bubble sort",
                    1
                ],
                [
                    "deterministic",
                    1
                ]
            ],
            "description": "See complete series on sorting algorithms here:\nhttp://www.youtube.com/playlist?feature=edit_ok&list=PL2_aWCzGMAwKedT2KfDMB9YA5DgASZb3U\n\nIn this lesson, we have explained merge sort algorithm. Merge sort is a divide and conquer algorithm that has worst case time complexity of O(nlogn). \n\nSee source code of real implementation here -\nhttps://gist.github.com/mycodeschool/9678029 \n\nFor more such videos and updates, subscribe to our channel. \nYou may also like us on facebook: \nhttp://www.facebook.com/MyCodeSchool",
            "dislikeCount": "286",
            "duration": "PT18M20S",
            "likeCount": "6279",
            "published_time": "2013-07-02T18:00:10.000Z",
            "tags": [
                "Merge Sort",
                "Algorithm (Mathematical Concept)",
                "C++",
                "java",
                "sorting algorithm",
                "\\my code school\\",
                "interview",
                "microsoft",
                "amazon",
                "facebook",
                "google",
                "technology",
                "software skills",
                "programming",
                "job",
                "solution",
                "enterprise",
                "software",
                "college",
                "school",
                "degree",
                "computer science",
                "classes",
                "yt:cc=on"
            ],
            "thumbnail": "https://i.ytimg.com/vi/TzeBrDU-JaY/hqdefault.jpg",
            "title": "Merge sort algorithm",
            "transcript": "  so far in this series on sorting algorithms we have talked about three of the sorting algorithms selection sort bubble sort and insertion sort and we have seen that these algorithms are not so fast they are all Big O of n Squire in in average case now in this lesson we are going to talk about one algorithm which is Big O of n log n in worst case and this algorithm is mergesort Big O of n log n time complexity in worst case is definitely a lot better a lot faster than Big O of n square in average case so in this lesson we will study discuss and analyze merge sort algorithm there is one prerequisite for this lesson you should have at least heard about recursion as a programming concept okay so let's get started once again I will pick up a very simple sorting scenario given a list of integers in the form of an array something like this let's name this array e we have eight elements in the array so we have indices from 0 to 7 we want to sort this list in increasing order of the value of integers so the list should be rearranged like this our approach in merge sort algorithm will be entirely different from what we had done in previous sorting algorithms where we were rearranging the elements or changing their positions only by swapping or shifting what we are going to do here is we are going to break this problem into subproblems we will divide this array into two equal halves or rather two possibly equal halves so we will find some middle position and we can say that all the elements before this position belong to the first half and all the elements after on or after this position belong to the second half if an array would have odd number of elements one of the halves will have one more element than the other half we have eight elements in the original array here so we have two equal halves now think about this what if we are somehow able to sort these two half and let's say these two halves are entirely different arrays they are created separately in memory by copying values from the original array if we are somehow able to sort these two arrays then we can merge these two lists together into the original list in sorted order of course there has to be some algorithm to merge two sorted arrays into a third array in sorted order the algorithm will be pretty straightforward let's say this particular sub array is named L and this particular sub array is named R L for left and R for right because all the elements in a are present either in L or R we can start overwriting a from left to right we can start with 0 8th position in a at any point the smallest element will be either the smallest unpicked in L or the smallest unpicked in R and let's say we color code the in L and R by this yellow color what we can do is we can pick the smaller of the two smallest unpicked s' in L and R we have two candidates here 1 &amp; 3 1 is smaller so we can write 1 here at 0 at index and now we can look for the number to fill at 1 at index in a let's say the cells of the picked elements will be color-coded in green if I have to write pseudocode to merge the elements of two sorted arrays into a third array let's say we want to write a function named merge that will take three arrays as argument left right and the array in which it should be merging the two sorted arrays left and right and then I'll do something like this I'll first take a variable that will store the number of elements in L and another variable that would store the number of elements in R in a real program we can also pass these two values to the function now I'll take three variables I J and K and initialize them all to 0 now let's say I will mark the index of the smallest unpicked in L R will matter J will mark the index of the smallest unpicked in R and K will mark the index of the position that needs to be filled in a for our example here at this stage we have I equal 1 J equals 0 and k equal 1 because we have already filled one element at index 0 in a but when we will start we will start with all three I J and K as 0 and now my code will go like while I is less than n L if n L is the number of elements in L then for I to be a valid index it should be less than n L and similarly for J to be valid it should be less than n R so while both these two indices are valid both these indices I and J are valid we can say something like if L I is less than or equal to RJ so we are comparing the smallest in or rather the smallest unpicked in L with the smallest unpicked in R in this case at K 8th position in a and we will write L I remember we are over writing a and that's not a problem and now I need to increment K and need to go to the next position and I also need to increment I to go to the next unpicked in L and if this condition is not true if RJ is less than L I then a K will be RJ and once again we need to increment key and we need to increment J to go to the next unfit in our this k equal k plus 1 is in both the conditions if as well as else so I have moved it out coming back to our example here I and J are both valid indices now we'll compare if Li is less than or equal to RJ well yes Li is less than RJ so we need to pick two for one at index and we need to increment both I as well as K and for the next position it's between four and three three will go and we will G&amp;K this time next it's between four and five next it's between five and six next it's between seven and six and after six has gone we are done with all the elements in L I is equal to four now which is not a valid index so in the while loop this condition while I less than number of elements in L will be false and this is definitely one probability one of the arrays L or R will exhaust first in that case we need to pick all the elements from the other array and fill rest of the positions in a after we come out of this while loop we can write statements like while I is less than the number of elements in L so we can check whether there are left overs in L we can do the same thing we can say a K is Li and then we can increment I as well as K I'm short of space here so I'm writing multiple statements in the same line and similarly we will write a while loop like while J is less than number of elements in R we can fill in a K with RJ and this time J and K will be incremented once we are out of this first while loop only one of these two while loops will execute because only one of the sub lists or sub arrays will have leftovers for this particular example this third while loop will execute because the right sub array has leftovers so we will fill up all the remaining positions and finally we will have a sorted arrangement in a this is our mods logic and there are a couple of ways in which we can clean up this code further but for now let's just understand the logic and now coming back to where we had started in the beginning we had imagined that if somehow these two sub arrays or sub lists I am redrawing the unsorted original array and unsorted sub lists so we had said that if we are somehow able to sort and then we can merge them back into the original list but of course we need to have a deterministic logic to sort these two sub lists or sub arrays also and the logic is we can break these sub lists even further so this sub list comprising of 4 elements 2 4 1 &amp; 6 can be further divided into these two halves and this list comprising of 8 5 3 7 can be divided into these two sub lists 8 5 &amp; 3 the solution for 2 for 1 6 this particular sub list can be constructed after we sort these two sub lists 2 4 and 1/6 and merge them back and similarly we can sort these two lists sub lists and merge them back to sort this 8 5 3 7 sub list once again we have these four sub lists of two elements each and they can also be divided what we are basically doing here is that we are reducing a problem into subproblems in a recursive or self similar manner and at any step once we get solution for the subproblems we can construct the solution for the actual problem if we have two sorted sub lists we can sort the parent list also we can go on reducing a sub list only till we have more than one element in the sub list once we reach a stage where we have only one element in a sub list then we cannot reduce that sub list any further so once we reach a state where our sub list has only one element our recursion will end and a list with only one element is always sorted we do not need to do anything to sort it now at this stage we can start combining back or merging the sub lists so these two sub lists can be merged let's say we will depict the cells in sorted sub lists in green we have already discussed the merge logic this sub list to four will still be the same after merge also sub lists 1 &amp; 6 these two sub lists with only 1 element each will also merge and now we can march to 4 and 1/6 coming to this side all these sub lists with just one element are already sorted so we will start merging back finally these two sorted sub lists 1 2 4 6 &amp; 3 5 7 8 can be merged back into the original list a and now let's write pseudocode for this algorithm I will write a function named mod sort that will take an array a as argument in the function first I'll take elements in a and now we can partition a into two halves we need to partition a only if n is greater than 1 if n is less than 2 then we have only one element in the array so the array is already sorted we can simply return else what we can do is we can first find out a middle position and then we can create two arrays one of size equal to MIT and another of size n minus mid so first array will have all the elements starting index 0 till and mid minus 1 we can just fill the elements we can run a loop from 0 to mid minus 1 so there will be mid elements in all and we can say left I is AI and then we can run another loop from index mid till n minus 1 so there will be n minus mid elements in all and we need to fill in right I - mid as AI now that we have created left and right sub lists we can first make a recursive call to sort the left sub list and once we are done sorting the left sub list we can make a recursive call to sort the right sub list and once both left and right sub lists are sorted we can make a call to the merge function that we had written before to merge left and right sub lists into a it's really important to visualize how this recursion will actually execute once again I'll start over with an unsorted array and let's say this array is passed to the merge sort function now let's run through this code and see what's happening I'll start with the first line we calculate n the number of elements in the array the number of elements in this array is 8 it's not less than 2 this condition is not true so we will not return and exit from this function we will move forward we will calculate the mid index now n is 8 so mid will be 4 and now we will create two arrays left and right one of size mid and another of size n minus mid and we will fill up these arrays the first four elements will go to left and next four will go to right and now we are making a recursive call when a function calls itself then such a call is called recursive call a function calling itself is not much different from a function a calling another function B at this stage to execution of this particular function call with this array with eight elements as argument is paused and the Machine says that hey let me go and finish this particular function call and then I'll come back to you the machine goes on to execute merge sort on this particular array with four elements two four one and six now once again we start at the first line in a new call to merge sort for this new array n is not less than two so we will not return and exit this particular condition is the base condition or the exit condition from the recursion if this was not there we would have gone endlessly in recursion we needed to stop somewhere once again we will create left's and rights and once again there will be a recursive call passing this array to four as so once again the state of execution of and this second mergesort will also be all of these are paused the state of execution of these functions the function calls with these arrays as arguments are passed this one is executing now once again here also we will have a recursive call now for this particular array with just one element this base condition will be true so this call will simply exit and now for this guy this array with two elements two and for this second recursive call will be made with just this element for which once again is the base condition and now once both the mergesort both the recursive calls for this particular sub list with two elements return back merge function will be and then this guy will finish and then will the control will return back for execution of this particular sub list two four one six and this guy will make the second merge sort call this guy will first make a call for this sub list with just one element and once this is done it will make another recursive call now we will have a merge for this guy one six and then control will return back here to this array two four one six and merge will be called for this guy and now once this guy one two four six will finish the control will return back to the function call corresponding to the original array and this guy will make another recursive call the second merge sort call in actual implementation we must make sure that all these extra spaces and extra sub lists that we are creating should be deleted from the memory once we are done using them like at this stage we do not need all these arrays with one and two elements in the memory now for this guy eight five three seven we will have a recursive call passing eight five that will again make a recursive call with just one element eight and then we will also have a call to five that will simply return once 5:8 returns we will have called four three seven three and seven will simply merge and now five eight and three seven will merge and finally when execution four three five seven eight will finish we will have a call to merge for the original array or the initial array so this is merge sort algorithm for you at the start of the lesson we had said that this is Big O of n log n in terms of time complexity in our next lesson we will implement this algorithm we will run some real code and we will also analyze the time and space complexity of this algorithm this is it thanks for watching",
            "videoid": "TzeBrDU-JaY",
            "viewCount": "1068582"
        },
        "Ymh_AurrMbA": {
            "caption_exist": "T",
            "channel_id": "UC3VydBGBl132baPCLeDspMQ",
            "channel_title": "Packt Video",
            "concepts": [
                [
                    "list",
                    42
                ],
                [
                    "algorithm",
                    14
                ],
                [
                    "merge sort",
                    8
                ],
                [
                    "bubble sort",
                    6
                ],
                [
                    "quicksort",
                    4
                ],
                [
                    "operations",
                    3
                ],
                [
                    "recursion",
                    3
                ],
                [
                    "prior",
                    1
                ],
                [
                    "functions",
                    1
                ],
                [
                    "binary search",
                    1
                ],
                [
                    "sort algorithm",
                    1
                ],
                [
                    "linear",
                    1
                ],
                [
                    "iteration",
                    1
                ]
            ],
            "description": "This playlist/video has been uploaded for Marketing purposes and contains only introductory videos.\n\nFor the entire video course and code, visit [http://bit.ly/1LLFafi].\n\nThis class of algorithms will describe three of the most popular sorting algorithms, namely, bubble sort, merge sort, and quicksort.\n\u2022 Why you should not use Bubble sort\n\u2022 Understanding the pros of Merge Sort\n\u2022 Why Quicksort is the fastest and the best\n\n\n\nFor the latest web development video tutorials, please visit\nhttp://bit.ly/1KYwKQ5\n\n\nFind us on Facebook -- http://www.facebook.com/Packtvideo\nFollow us on Twitter - http://www.twitter.com/packtvideo",
            "dislikeCount": "9",
            "duration": "PT9M24S",
            "likeCount": "65",
            "published_time": "2015-11-02T12:08:46.000Z",
            "tags": [
                "EcmaScript 6",
                "Harmony",
                "JavaScript",
                "abtract data types",
                "algorithm design",
                "data strucutres in javascript",
                "big o value",
                "breadth first depth first search",
                "graph traversal techniques"
            ],
            "thumbnail": "https://i.ytimg.com/vi/Ymh_AurrMbA/hqdefault.jpg",
            "title": "Learning JavaScript Data Structures and Algorithms: Sorting | packtpub.com",
            "transcript": "  this is the last section of the course and this section will cover arguably the most commonly used jogger rhythms to solve sorting and searching problems first we'll go over sorting by looking at different sorting algorithms from one of the slowest algorithms there is for sorting - the fastest ever discovered by mankind next we'll go over searching algorithms by looking at two different ways to find an element within a list of elements in this video we'll begin by describing what is arguably the worst possible sorting algorithm there is the bubble sort the reason we would even mention this algorithm is purely for academic purposes as one would never actually have a reason to implement such an ineffective agha rhythm but at least mention in this algorithm is probably a must for any course that talks about sorting we will then talk about the two fastest algorithms we know of merge sort and quicksort as mentioned earlier bubble sort is probably the worst sorting algorithm there is the reason it's such a poor choice for a sorting algorithm is that an average sorting operation with this algorithm has a big old value of N squared in other words if we need to sort of list with 1,000 elements the most expensive operation in this algorithm is repeated 1 million times the reason for this is that n passes through the lists are required for a list of size and the algorithm is as follows we start at the beginning of the list we compare the first two elements if the element to the left is greater than the one on the right we swap the values we then take the next element and compared with the last element from the previous pair and we repeat at the end of each iteration and the highest value will have been moved all the way to the right of the list been sorted eventually after any durations every item will be in the right position and the saurian is done the only reason a bubble sort is so popular among other sorting algorithms is because of how simple it is conceptually as a results implementing it is trivial the first step is to determine the length of the list being sorted this way we know how many passes we'll need through the list until it's sorted next we iterate from the first element to the second to last check in the current element and the one next to it if we ever find an element whose next neighbour is higher we swap them unlike bubble sorts whose big ol value is in square March Stewart has a Big O of n log n in other words while bubble sort takes about a million operations to sort 1,000 items mergesort could stored that same 100 item list in about 3000 operations that is 1,000 times of log of 1,000 which equals 3,000 if the size of the list is now 1 million items bubble sort would take 1 trillion operations whereas merge sort would only take about 6 million the idea of merge sort is very clever if you have a list of a single item then that list is already sorted if you then have a list of 2 items then sorting this list in the worst possible case what only requires swapping the items and the list would then be sorted thus the merge sort algorithm works in two steps so that this principle can be applied the first step is to break the list in half so that we have two lists we then take each list and repeat the process until both lists have become a list of a single elements once we have an already sorted lists of one element each we just need to merge all of them together in the right order this is easy to do because as we merge more and more elements we know that they are already sorted so finding where the incoming elements go is very fast implementing merge sort is typically done using recursion and the divide and conquer approach what we'll do here is to find two functions one that recursively breaks down the list in half then we'll define a function the merges both lists into one the first function will check if the incoming list has a length of 1 and if so we don't we've reached the end of the breaking down part of the algorithm so we return the list if they two or more elements in the ink on your list will find the midpoint of the list and call ourselves twice first with the first half of the list and second with the second half the merge function is a bit more complicated which start out by creating an empty list that will hold the resulting list we then loop through both lists be merged and push the smallest item of the two inputs into the output list once the list is empty once one of the lists is empty we'll simply add the remaining items into the quicksort is also an n log n algorithm just like merge sort it's also typically implemented using recursion although the idea behind it is fairly different from merge sort the first step in quicksort is to choose an element in the list to be the pivot the pivot is supposed to be picked at random but normally the algorithm is implemented such that the pivot is always the middle of the list or the first element in the list the idea is that after the pivot is selected we iterate over the list from left to right keeping track of a marker on both sides of the list should the current item ever be greater than the pivot we checked that item against the right marker element if the right item is greater than or equal to the pivot we leave it where it is and move on to the right marker we continue to move the right marker until we find a value smaller than the pivot now we swap the elements of both markers and move the left marker to the right by one place we repeat the steps until the markers have crossed at which point we start the pivot where it should be the result from this will be two partially sorted lists where the list to the left of the pivot has only values smaller than its own value and the list to the right of the pivot has values greater next we recursively sort each sub list using the same steps to keep things a bit simpler and this implementation we will always choose the pivot to be the first item on the original list as well as all sub lists since this is a recursive function we need to check for a terminating condition which in this case will check if we're trying to sort an empty list next we create two empty lists that we'll use to populate values that are lesser and greater than the pivot we then traverse the list adding values lesser than the pivot to the list on the left and greater or equal values to the right list when we're done we're concatenating this with the pivot in between the two the algorithm is repeated on each subsequent sub list until the resulting sub list is empty at which point we start popping up the recursion stack this video covered three of the most commonly used sorting algorithms although bubble sort is only used in academia merge sort and quicksort are the sorting algorithms of choice in most other software engineering use cases in the next video we will look at linear and binary search as we'll see shortly search should become significantly faster when the search space is sorted prior to searching in which case we can choose the fastest searching algorithm known to man binary search",
            "videoid": "Ymh_AurrMbA",
            "viewCount": "7812"
        },
        "bICWqGEe9Bs": {
            "caption_exist": "T",
            "channel_id": "UCFWCFYvqnAMT-jcCqTp_SlA",
            "channel_title": "University Academy- Formerly-IP University CSE/IT",
            "concepts": [
                [
                    "leaf",
                    2
                ],
                [
                    "range",
                    1
                ],
                [
                    "depth",
                    1
                ],
                [
                    "work",
                    1
                ],
                [
                    "degree",
                    1
                ],
                [
                    "tour",
                    1
                ],
                [
                    "water",
                    1
                ]
            ],
            "description": "Please like ,subscribe and share",
            "dislikeCount": "38",
            "duration": "PT4M54S",
            "likeCount": "357",
            "published_time": "2016-09-27T16:46:42.000Z",
            "tags": [],
            "thumbnail": "https://i.ytimg.com/vi/bICWqGEe9Bs/hqdefault.jpg",
            "title": "Example: Heap Sort method",
            "transcript": " the controlling exor in disorder  mental becomes more to the north of san  nicol\u00f2 via those psychic click click  abstraction anxiety from out to mac sport  of turi giaccherini rocco di senigallia  awasthi and of the client maxi being i  gormiti had those monthly mini stage  full range g taken the sleep new rock lee  guthrie school b listening today the small  and his as well the first cliff and headquarters bus  place kaden floris that pecchi p click  the dresses centofontane niola if them  cante replace the ring tungle cli chi  yesterday for mac cycling of the purpose ip pro  polimi can work 9 tournaments civet woods of  goethe the left and day that to the mini fetus  goodwill be dell upper holds up  I write to you that you have sadness or puc  of new prof ong neither from who is that file  instead to games and liscate foods rem  jusqu'\u00e0 and my studies for woodwinds  out of sampei and street licheri and now I go out  a few for pound net a few clicks  tribal ethnics and maxim estense zurco of  zabul club of ligue loghi or the ass  the action game episodes signed water and  you succeed in damn two up acli kia come  33 of tri  forty five seventeen days of quarrels  athletics club and the main store of the en  discussed gp fighter on their sites  the more you make the ing all kinds right  of maxi more refugees role nigeria tu  who makes the dog mera pour tout campese  new force has the purpose of wagner  tradecom present of bus with 73 of  cheering fahim trachea for fab  four four of facebook syrian fair play  between patricia way fortify here 13  seventeen that defect mountaineers and more  crudup that to the haptic hiss judgments  prizes leaders of tufa of manufacturability  ring you offer the asl the hard guys and  it rises to pious forces woods again to make them  fox pillars that echo the defect and  both fishing pisco parks and oracle  of ferries free seventeen or infusions  ago and then to study mother for the engineer  the able catellani and tuscon exere misto  organs aba come on beefy cute  he had the pif at caleni acts that he will dance  traditio team that ferries the finger  behind degree in then league accounts fiedler  whose hoskins we are in titles of fi  included in calle ghetto of desease  maxim a finish seventeen last leaf  excluded him quotable cute disco jana  triple expires in 3D until the clashes of  today for those who want seventeen quantify  exclusive fi car in ghetto for five  trim traveled evenly 26 you reset  defy seventeen csp or write of esme  last leaf to the arabiya pillars fesr and se  it is quit quantify of littering sad  replace the ring but left investigating  20  do not disturb and is the ninth thing that more  it makes low aquatic credit and 23 vehicles  for the cooler lips big thing to a  paisley a seventeen jays plasmas tour  to what other technocratic themes  todisco st know mixed perlini you will  find this is designed in order of this  elements or exams vorm the money into  depth that couples them 39 miniclip  no ",
            "videoid": "bICWqGEe9Bs",
            "viewCount": "66956"
        },
        "c5h8EnKIdXk": {
            "caption_exist": "T",
            "channel_id": "UC4EX8zLiBUalk704IX_zu1Q",
            "channel_title": "Easy Engineering Classes",
            "concepts": [
                [
                    "list",
                    16
                ],
                [
                    "location",
                    15
                ],
                [
                    "selection sort",
                    10
                ],
                [
                    "array",
                    4
                ],
                [
                    "key",
                    4
                ],
                [
                    "algorithm",
                    3
                ],
                [
                    "omega",
                    2
                ],
                [
                    "unsorted list",
                    2
                ],
                [
                    "subset",
                    2
                ],
                [
                    "sort algorithm",
                    1
                ],
                [
                    "iteration",
                    1
                ],
                [
                    "bubble sort",
                    1
                ],
                [
                    "sorted array",
                    1
                ]
            ],
            "description": "Selection Sort Algorithm in (Hindi, English) with Example for students of IP University Delhi and Other Universities, Engineering, MCA, BCA, B.Sc, M.Sc Colleges.",
            "dislikeCount": "61",
            "duration": "PT9M53S",
            "likeCount": "853",
            "published_time": "2016-06-20T15:39:29.000Z",
            "tags": [
                "Selection Sort",
                "Sorting Algorithm",
                "Data Structure",
                "Ip University Syllabus"
            ],
            "thumbnail": "https://i.ytimg.com/vi/c5h8EnKIdXk/hqdefault.jpg",
            "title": "Selection Sort Algorithm in (Hindi, English) with Example",
            "transcript": "  hello students welcome to the class of selection sort algorithm in the previous lecture we have seen how bubble sort works now proceeding further its classmen the heat selection sort Jessica Martha the selection sort says in this sorting technique the list is divided into two parts sorted part and unsorted part selection certain gather their apni list Co though different parts when dividing of lesson one is sorted job palace' sort a was come generally coverage they left and pay or unsorted particle right and fair in a set of n elements find out the location of the minimum element and to place it with the location of first element this is suppose if this is my list and these are some elements of the first element of open-cell avala omega carnations of sapele in sorry elements missing minimum element do name suppose our minimum element is position pair then whose minimum element key position of first element key position co so after nine that means minimum element of my appetizer or job first location with a vogue you have rajaiah clear now you have to repeat the above step for n minus 1 elements of the bharatas principle use carrying it to up if there is a lake a hospital on n minus 1 it's considered nigga rain gear busca bars also chilling in yaja silicon after capital an adjusted up Kulish short midget so this is the basic concept of along they take it selection sort go from cases carrying a fake example case may this is and unsorted list unsorted list a big selection sort we get there find out the minimum from the list and to place that minimum with the first location of your list abyss list him this is my locations now this is the first time I am running the program of subset Bellamy location cons here first location element came a refers to and which is the minimum element from zero to occasion to ninth location minimum element is one so what I have to do now I have to swear the locations of these two elements so after the Maya list when a Kaimuki Omega 1 5 6 7 8 12 34 22 67 this is the list after swapping of elements now again these are the in the next iteration I have to compare or I have to find minimum element from this to this this is from location 1 to 9 became the minimal element Vancouver in Korea I come to borrow to recover curling astonishes 1 minimum ayah so I have to find now from here to here and replace the value of minimum with bail value of each element first element drops new list which is 5 so his missus of such utter element concern me refers to so what I have to do is I have to interchange the position of these two elements so maybe the name is 20 kilo chose a gap one - we'll come here - six seven eight twelve thirty four twenty five and sixty seven again we will do what one three nine now I will compare from where to where from location two to nine which is the minimum element five so interchange the position of this end this so the new array will be like or the final sorted array will be like so after sought after interchange in the position of five and six my array will be 1 2 5 6 7 and so on a box will take here the map scary karmayoga rhythm from location number 4 - 9 which is the minimum element 7 no interchange is required from 5 to 9 smallest element is 8 now interchange is required from 6 to 9 smallest is 12 now interchange but from 7 to 9 if I see the minimum element is 20 so I will elements Tamara Arab and a kabocha Banega elistvan eg 1 2 5 6 7 8 12 and the position is interchange so 20 34 and 67 now you can see the list is sorted so this is an example of selection sort how you can select the minimum element and swept its position from the first element of the unsorted list that site is called as selection sort we cap is minimum element kozlak array or skip petition Co first say interchange Kirwan this is the algorithm of selection sort so dynamic again a minimum co 0 2 locations is said kernel so set minimum to location 0 then search minimum element in the list subset chhota khujli mental go find out karma then sweat the value of the minimum element at location min a boost value go join a minimum element K value find here o say location say locations of 0 there o safe interchange kernel increment min to point to the next repeat internal list is sorted I hope this algorithm is pretty much clear with the example that we have seen earlier this if we see each and every point currently the minimum is location 0 then search minimum element dissemination f1 minimum element confined together so have the value at location min in donaga usefulness where k the one or two key values co increment min to point next element now we have what we have done is we have incremented to the value and now the minimum value we are targeting is this position of its key value cognitive the vara interchange here dr. interchange ki ma dr. my de Fora the list of sort no value now the complexity of selection sort in all the cases is o n square complete analysis of selection sort and how to find the complexity will be covered in the coming lectures thank you for watching the video please subscribe to the YouTube channel for more tutorials on data structure",
            "videoid": "c5h8EnKIdXk",
            "viewCount": "136329"
        },
        "cDxnDtorsc4": {
            "caption_exist": "T",
            "channel_id": "UCVLbzhxVTiTLiVKeGV7WEBg",
            "channel_title": "Tutorials Point (India) Pvt. Ltd.",
            "concepts": [
                [
                    "algorithm",
                    4
                ],
                [
                    "sort algorithm",
                    1
                ],
                [
                    "merge sort",
                    1
                ]
            ],
            "description": "External Sorting - Introduction \nWatch More Videos at: \nhttps://www.tutorialspoint.com/videotutorials/index.htm\nLecture By: Mr. Arnab Chakraborty, Tutorials Point India Private Limited.",
            "dislikeCount": "5",
            "duration": "PT4M47S",
            "likeCount": "12",
            "published_time": "2018-01-25T10:16:26.000Z",
            "tags": [
                "External Sorting - Introduction",
                "Data Structure",
                "Stack",
                "Linked List",
                "Queue",
                "Queue Operations",
                "Binary Tree",
                "GATE Exam",
                "Software Engineering",
                "Tree",
                "B-Tree",
                "Heap Tree",
                "Bubble Sort",
                "External Sorting"
            ],
            "thumbnail": "https://i.ytimg.com/vi/cDxnDtorsc4/hqdefault.jpg",
            "title": "External Sorting - Introduction",
            "transcript": "  in this session we are going to discuss a topic very important interesting topic known as external shorting commonly the shorting algorithms whatever we use are known as the internal shorting internal shorting means the data items whatever you are going to short that available at the same time as a whole without any fragmentation in the computing device or in the memory of the computer so that means in case of internal shorting the data item whatever is going to be shorted all those data item will be available will be made available inside the computer's memory memory means here the RAM but in case of external shorting what happens the data item the volume of the data is too big too enormous cannot be kept in the computer's primary memory or RAM at the same time so that's why we shall keep some part of the data on to the secondary storage the slow-running secondary storage and some part of the data will be put into the computer's primary memory which is fasted in operation and there the shutting will be done and then in this way we shall fetch part by part on to the primary memory and go on shorting and then merging them so that ultimately we will be getting the full shorted data for the against the enormous data so that is the main theme behind this external shorting so here is the text external shorting handles a massive amount of data this data may be too big to fit in RAM or the memory of the computing device for shorting so that's why the memory is not capable to keep all that huge amount of data at the same time so data decide on the slower external memory usually tape or say hard drive nowadays it is hard drive obviously so that's why the data will reside on the slower external memory external shorting typically uses a hybrid short strategy so this is the use these the use of this external shorty in shorting fails chunk of data small enough to fit in memory and read and stored and written out on to the temporary file so for the external shorting here you are having mainly two phases the phase number one is the shorting phase and phase number two we shall be coming as the Marg phase in case of shorting fields chunks chunks of small data enough to fit in the memory and rate stored and written on the temporary file so while shorting this small amount of memory we shall be using internal shorting in the March fails the shorted sub files are combined into the single large file and will be kept in the external storage external shorting is external marge schott algorithm so it is also you can also call it as a external marge short algorithm at first we divide the file into runs such that the size of iran is small enough to fit into the main memory so this run is a technical term so file will be divided into run so that a run site will be selected in such a way that it can be fit onto the computers primary memory the short then short each run in the main memory using much shorter algorithm so there will be having the merge sort algorithm because we are having one run shorted with the data one run with the shorted data now assure to merge them to make a bigger run where the data will get shorted so shorted data shorted data will be marched in a bigger run size where where we are having this particular shorted data for those data deciding on on those students so here we'll be using the March short finally merge the resulting runs together into a successively bigger runs until the whole file is getting shorted so this is our external shorting so in the next video we shall be showing you how this runs are getting shorted internally how the runs are getting merged to get the bigger run and what is the respective complexities so we'll be doing the detail calculation on that please watch our next video where we'll be going for its implementation through one sample example thanks for watching this video",
            "videoid": "cDxnDtorsc4",
            "viewCount": "1288"
        },
        "i-SKeOcBwko": {
            "caption_exist": "T",
            "channel_id": "UClEEsT7DkdVO_fkrBw0OTrA",
            "channel_title": "mycodeschool",
            "concepts": [
                [
                    "subset",
                    18
                ],
                [
                    "array",
                    12
                ],
                [
                    "insertion sort",
                    11
                ],
                [
                    "algorithm",
                    8
                ],
                [
                    "polynomial",
                    5
                ],
                [
                    "list",
                    4
                ],
                [
                    "mean",
                    3
                ],
                [
                    "average case",
                    3
                ],
                [
                    "bubble sort",
                    3
                ],
                [
                    "sorted array",
                    3
                ],
                [
                    "operations",
                    2
                ],
                [
                    "sort algorithm",
                    2
                ],
                [
                    "best case",
                    2
                ],
                [
                    "arithmetic",
                    2
                ],
                [
                    "selection sort",
                    1
                ],
                [
                    "sorted list",
                    1
                ],
                [
                    "walk",
                    1
                ],
                [
                    "link",
                    1
                ],
                [
                    "worst case",
                    1
                ]
            ],
            "description": "See complete series on sorting algorithms here:\nhttp://www.youtube.com/playlist?feature=edit_ok&list=PL2_aWCzGMAwKedT2KfDMB9YA5DgASZb3U\n\nIn this lesson, we have described insertion sort algorithm and analyzed its time complexity. \nSeries on Time Complexity analysis:\nhttp://www.youtube.com/playlist?list=PL2_aWCzGMAwI9HK8YPVBjElbLbI3ufctn \n\nFor more such videos and updates, subscribe to our channel. \nYou may also like us on facebook: \nhttp://www.facebook.com/MyCodeSchool",
            "dislikeCount": "154",
            "duration": "PT14M15S",
            "likeCount": "3060",
            "published_time": "2013-06-12T10:19:17.000Z",
            "tags": [
                "Algorithm (Mathematical Concept)",
                "skills",
                "Software",
                "Insertion Sort",
                "c++",
                "facebook",
                "C (Programming Language)",
                "jobs",
                "google",
                "programming",
                "course",
                "technology",
                "Career",
                "interview",
                "java",
                "amazon",
                "coding",
                "microsoft",
                "school",
                "yt:cc=on",
                "sorting"
            ],
            "thumbnail": "https://i.ytimg.com/vi/i-SKeOcBwko/hqdefault.jpg",
            "title": "Insertion sort algorithm",
            "transcript": "  in our lessons on sorting algorithms so far we have talked about two of the sorting algorithms selection sort and bubble sort now in this lesson we are going to talk about another sorting algorithm named insertion sort insertion sort is not the best sorting algorithm in terms of performance but it's a little more efficient than selection in practical scenarios insertion sort is also pretty intuitive sorting technique so let's see what it is to explain the logic of insertion sort and once again use the example of cards so let's say we have a set of cards in our hand and we want to arrange these cards in increasing order of rank there are a couple of intuitive ways to sort a set of cards in our hand one of the things that we can do is initially we can keep all the cards in our left hand and we can start taking cards one by one from the left hand and we can start building a sorted arrangement in the right hand our first card is nine and there is no other card in right hand so nine will simply go into the right hand now we will take the next card in our left hand which is three in this case now when we will take three to the right hand we will insert it before nine to make sure that the cards are sorted at any stage during this whole process the left hand will be unsorted and the right hand will be sorted now the next card that we will pick is six now when we will take six to the right hand it will have to be inserted between three and nine and now the last card that we will pick will be four and four will have to be inserted between three and six in the right hand and finally we will have a sorted arrangement in the right hand I have used two hands here but if you see this can be done in one hand also the idea is pretty simple what we are basically doing is we are dividing the set of cards into two subsets a sorted subset or a sorted part and an unsorted subset or unsorted part initially all the cards are in unsorted subset and the sorted part is empty and we are picking up one card from the unsorted part at a time and inserting it into the sorted part let's say we have something like this we have a boundary here and let's say cards to the left of this line this vertical line are sorted and cards to the right of this vertical line are unsorted so initially all the cards are in unsorted part now we will pick up one card at a time and insert it into the sorted part if there is just one card we simply move it now we pick up the next card from the unsorted part it's three it will be inserted before nine in the sorted part now we will pick six and six must be inserted between three and nine and finally we will take four and four must go between three and six it should be inserted between three and six and we are done once our unsorted subset is empty now when we want to write a program to sort a list we can do something similar to what we did for the cards so let's say if we want to sort a list of integers given to us in the form of an array let's name this array a we have six elements in the array so we have indices from 0 to 5 what we can do is we can start by saying that we will divide the array into two subsets initially elements till index 0 will be part of the sorted subset or sorted half because if you have one element in a set the set is always sorted and all other elements are part of unsorted subset and now we will go on picking elements from the unsorted subset and we will keep on inserting them into the sorted subset so we will kind of keep expanding the sorted subset till unsorted subset becomes empty at any stage let's say the cells in blue are part of the sorted subset now at this stage I will pick up 2 which is the first element in the unsorted subset programmatically this will mean storing the value in some variable now let's say the name of the variable is value so all we have done is we have said something like value is equal to a1 but for the sake of understanding let's assume that we have taken out 2 from that position and we have created a hole there at that particular position now what we will do is to in cert two into the sorted part into the sorted subset we will shift all numbers greater than two in the sorted part by one position to the right we have only one element at this stage in the sorted subset 7 which is greater than 2 so 7 will be shifted one position towards right and the hole will go to position 0 and now we will fill up two at position 0 we will fill up 2 in the hole and now we are sorted till index 1 now once again we will pick up the first element from the unsorted part so we will create a hole like this remember there is no actual taking out of 4 from this position we are just filling up four in another variable and assuming that there is a hole at that particular position now once again we will shift all the numbers greater than four by one position to the right we will do so one by one we will start at position 1 and see if the number is greater than 4 7 is greater than 4 so 7 will be shifted to index 2 and the hole will now move to index 1 now we will look at 2 2 is not greater than 4 so no more shifting is needed we will simply put 4 at index 1 and now we are sorted till index 2 and now we will pick one from the unsorted part and once again we will start shifting all the elements greater than 1 in the sorted subset now 1 position towards right 7 is greater than 1 so we will shift it and we will the hole will now move to index 2 number 4 is also greater than 1 so it will also shift number 2 is also greater than 1 so hole will shift to 0 and we do not have any more numbers greater than 1 to be shifted so we will move one to this hole and now we are sorted till index 3 and we will repeat the same insertion logic for 5 &amp; 3 as well for 5 we will have to shift only 7 and for 3 we will have to shift 7 5 &amp; 4 so finally 3 will go at index 2 so finally we have a sorted list this particular in-place logic of shifting and certain elements to sort a list is insertion sort algorithm and now let's quickly write pseudocode for this algorithm I'll write a function named insertion sort that will take two arguments and array and the number of elements in the array let's say the name of the array is a and the number of elements in the array is n now initially we are saying that we are sorted till index 0 so we will pick up elements from 1 till n minus 1 and at each step we will insert the element at its appropriate position in the sorted subset so in our code we will run a loop starting index 1 till n minus 1 and first we will create a hole by by taking out the value to insert in another variable so temporarily and we will keep a eye in this particular variable and then I'll take another variable to mark the position of the hole at this stage hole is at index I and now we need to shift all the elements greater than the value to be inserted one position to the right while hole is greater than 0 and and the element at index hole minus 1 is greater than value we will shift the element at index hole minus 1 to the hole so now our new hole will be index hole minus 1 when we will find a smaller element than value in the sorted subset so this particular condition will be false we will exert the while loop or we will exit the while loop when hole will be equal to 0 so there will be no more elements to shift and finally when we will come out of the while loop we will put the value into the hole and this is our pseudocode for insertion sort I'll quickly walk you through this particular code and show a simulation with this particular example so we are running this code with this particular array we will start with I equal 1 so value will be 2 and hole will be index 1 and now we come to the while loop hole is not 0 so we can be sure that there is an element before it and can access the element at index hole - one hole minus one is zero and the element there is seven which is greater than the value - I'll mark the hole with this color orange and now we come here we'll say a hole and the element at index of holes should be element at index hole minus one so seven will now be written at index one and our imaginary hole will shift to index zero and now in the while loop this condition will be false hole is equal to zero so we will come here we will fill up two at this particular position at index zero and now I will be incremented so value will be four and hole will be index - seven is greater than four so we will shift it and the imaginary hole will go to position one and now a hole minus 1 which is 2 is not greater than value so we will come out of the while loop and we will write for at this particular position and we will go on like this for 1 we will shift all the numbers in the sorted subset so finally we will have a sorted array sometimes the hole may not shift even by one position we will not even go inside this while loop in that case it will mean just taking out the value and inserting it again into the hole it will happen when the number to be inserted will already be at its appropriate position so this is pseudocode for insertion sort algorithm for you let's now try to analyze the time complexity of this algorithm we can try calculating the running time expression for this algorithm simple statements in a program executes in constant time by simple statements we mean statements having simple operations like assignment arithmetic or logical operations like these are simple statements let's say these statements will take some constant times c1 they'll together take some constant times even these two simple statements well together take some constant times c2 and this particular statement will take some constant time c3 now for our algorithm these two lines always execute n minus one times and how many times will these two lines execute inside the second loop well it depends it depends upon the input when we will have a sorted array then we will not go inside this while loop even once because this particular condition will never hold true and this particular statement with cost C 3 will also execute n minus 1 times so overall time taken in the best case will be equal to C 1 plus C 3 into n minus 1 there will be some additional cost to increment counters and all or to do these comparisons inside this condition for loops let's assume that they're accounted for in C 1 and C 2 respectively oh this one should be n minus 1 in bracket so we have a polynomial like a n plus B where a and B are some constant in terms of C 1 and C 3 and whenever we have a polynomial like this for the running time it belongs to the set Big O of the highest order term in the polynomial so this will be Big O of n so insertion sort is Big O of n in best case we will have a worst case when we'll have a reverse sorted array something like 5 4 3 2 1 in that case for I equal 1 the statements inside the while loop will be executed once we will have one shift for I equal 2 we will have 2 shifts and we will go on like this for I equal 3 we will have 3 shifts and for I equal n minus 1 we will have n minus 1 shifts so overall overall cost will be something like C 1 plus C 3 into n minus 1 and 1 plus 2 Plus 3 plus all the way till n minus 1 times C 2 and if we will evaluate this arithmetic progression we will get n into n minus 1 by 2 and then we will reduce this whole expression further we will get a polynomial something like a n square plus BN plus C where a B and C will be some constant some constants in terms of c1 c2 and c3 and this will belong to the set Big O of n square which is another way of saying that for very high values of n the rate of growth will be pretty similar to the growth of n square these lower order terms will not matter if you are not aware about time complexity analysis and Big O notation we have a complete series on time complexity analysis you can find a link to it in the description of this video in average case for IH position we will make I by two shifts and if we will try to calculate the time expression it will again be some polynomial of the form n square plus BN plus C so for average case also we will be big-oh of n square even though insertion sort is also Big O of n square for worst and average case the number of comparisons and shifts in insertion sort in all practical scenarios is a lot less than selection and bubble sort so it's considered to be better than selection and bubble sort so this was insertion sort and its time complexity analysis thanks for watching",
            "videoid": "i-SKeOcBwko",
            "viewCount": "656707"
        },
        "oOnVN3mvkIk": {
            "caption_exist": "T",
            "channel_id": "UC6Ex6L26SdZmNk1phtQu5Kw",
            "channel_title": "Arpan Pathak",
            "concepts": [
                [
                    "node",
                    36
                ],
                [
                    "heap",
                    24
                ],
                [
                    "parent",
                    19
                ],
                [
                    "tree",
                    16
                ],
                [
                    "binary tree",
                    13
                ],
                [
                    "heap property",
                    12
                ],
                [
                    "root",
                    8
                ],
                [
                    "data structure",
                    6
                ],
                [
                    "heapify",
                    4
                ],
                [
                    "worst case",
                    4
                ],
                [
                    "element",
                    4
                ],
                [
                    "leaf",
                    4
                ],
                [
                    "heat",
                    3
                ],
                [
                    "level",
                    2
                ],
                [
                    "height",
                    2
                ],
                [
                    "form",
                    1
                ],
                [
                    "lake",
                    1
                ],
                [
                    "subtree",
                    1
                ],
                [
                    "linked list",
                    1
                ],
                [
                    "list",
                    1
                ],
                [
                    "algorithm",
                    1
                ],
                [
                    "heapsort",
                    1
                ],
                [
                    "recursive data structure",
                    1
                ],
                [
                    "name",
                    1
                ]
            ],
            "description": "",
            "dislikeCount": "35",
            "duration": "PT13M49S",
            "likeCount": "152",
            "published_time": "2016-09-25T06:57:04.000Z",
            "tags": [],
            "thumbnail": "https://i.ytimg.com/vi/oOnVN3mvkIk/hqdefault.jpg",
            "title": "heapsort(Heap Data Structure ) Part 1",
            "transcript": "  hello everyone in this series of videos I'm going to be talking about heapsort algorithm so now first let's try to see what is heap data structure because without doing the heap data structure we will not understand what is heaps on well are heap is a complete binary tree data structure in which value of the parent node is either greater or lesser than the value of its children so what is the meaning of complete binary tree so here is the definition of complete binary tree a complete binary tree is a binary tree in which all the levels are filled or completed except the last one and all the nodes must have to be as left as possible so here we can see that I levels here in this binary tree there are 3 levels so you can see that all the levels are filled so this is a complete binary tree now again here in this bar this is also of the complete binary tree because all the levels are filled except the last one and if we add a node right here this will not be a complete binary tree because there is a space in the left as I have told you that all the values must have to be all the levels must have to be filled and the values must have to be a slept as possible so this is not a complete binary if we insert this right here this will be still a binary a complete binary tree now what about if this node is not here instead this is here this will not be complete well binary tree because this level is not filled so all the levels must have to be filled except the last one now let's try to see what the heck hip is so basically there are two types of thing one is the max if another one is the main name so in max if the value of the parent node is always greater than value of it's trillion you can see here that a 5 is greater than the value of its children so this is also true for all because three is a recursive data structure now here this is also a maxim because the value of the parent is greater than value of its children now this is not a hick at all why because you can see that this 15 so okay so this in this node the value of that parent is not greater than all of its children so this is not here now let's try to talk about how we can represent heap in computer's memory because our main purpose is to implement heap sort so we must have to find some way to represent heap data structure in computer's memory there are two options for implementing heap data structure one is linked lists another is a I'm not going to discuss about the linked list implementation because we will be trying to sort the arrays so I will be showing you the implementation now here's the way how we can represent the heap in terms of added so we will be taking an added whose size is equal to the number of nodes of this heap and then we'll we will start filling so we will be adding all the values of the same level from left to right so first I have added one then a to 3 then 4 5 5 6 and so on so here comes the question how we can find out the parent of some node if you know the index of some node all we want to find out the all the children's of that node how we can do that well we can do that using using some simple mathematical formula let's say that we want to find out the index of the parent of the node which is at index C so how we can do that we can use this formula the index of the parent of C will be simply C minus 1 divided by 2 and we will be taking the integer part because index is an integer so let us try to take an example let's say that we want to find out the parent of this node which is at index 5 what could be the well the parent will be simply 5 minus 1 by 2 which is - so you can see that the - is the value at 2 is the parent of this node that is 3 again what would happen if we have the index of the parent we want to find out all its gender then we can use this simple formula one of the children will be this one another children will be this one let's say that I want to find out all the children sub 3 so the first children will the first child of the ops 3 will be this one that is a fifth index and another one will be at sixth index five and six you can see here okay now insert some values in heap let's I take this as maxi so I want to insert some values in in form of Maksim what I can do here first I can add the value in the root node okay so from there we will be adding all the values as leaf node but after adding the value the heap property may be changed so we need to do something to restore the property of thing and that thing will be known as a heapify so after each insertion we will be checking whether heap property is violated or not if the heap property is not satisfied then we will be raising the value to its proper position - to restore the heap property let's try to see this example so first I have added 8 as I have told you that we will be adding all the values in terms of leaf node so then next we cannot add this value 8 right here because all the values should be at as left as possible so I'm going to add 8 right here and then I'm going to check whether this is violating the property of the value of the parent is not greater than the value so this is violating the property of Max if so what I'm going to do here I'm gonna swap the value of with its parent so this will come here and this will come here okay now this is not violating the property of people so we have restored successfully now where I can add this to I can add this to right here and then I will check its value will its parent you can see that the value of its parent is greater so heap property is not violated so we will we won't have to do anything now let's move on to this nine where I can add this time I cannot add this night right here I can add this line right here so I can add this Bank right here and after adding I'm going to be checking the value of this with experiment you can see that here in this subtree the heap property is violated so what I'm going to do here I'm going to interchange the value with its parent so 9 will be right here and 5 will be right here again I will be checking the value with its parent again the heap property is violated so we will keep raising the value at proper position till the heap property is satisfied completely okay now heap property is satisfied again I'm going to add this value 11 so where I can add this I can insert this as a leaf node right here and then I will be checking with a value with the value of parent so you can see that the value of parent is not greater than its children its child so I'm going to interchange the value what was the value okay the value was I think 8 now again I will be checking again the property is not satisfied so we will keep up HEPA fine so now it's perfect so all the elements are placed properly so 11 9 ok now this is our heap Maxim let's try to see how we can delete some elements from the heat let's try to say that I want to delete this element too well we cannot simply delete this element because if we delete this element then this tree will be disconnected so what we can do first of all whichever node we are going to delete we will be interchanging the value of that node with the root node so keep that thing in mind all the items will be deleted from the root node so then next what we can do here we can exchange the value of this root node with the last added Lake nor purchase this one right here so we can swap the value of this with this and what we can do here now we can simply detach this node because if we simply delete this node the heap will not become disconnected so that's why we were doing all of these previous steps to make sure that for deleting any node that heat will not become disconnected so we can simply delete this node now what we can do here after deletion the heap property is made it can be changed so what we can do here we will be trying to restore the property of heat and this will be known as down heapify so we will be starting from the root node and we will be checking whether the value of root node is greater than value of all its children so here in this case it it's not so what we are going to do here we are going to take the value of the children which has the maximum value so here in this case the maximum value has in these children which is the right children so we will be swapping these two values so one will be right here and one will be right here now the pointer will be at this position then we can see that there are no nodes property is restored all right now let's try to see another example let's say that I want to delete this this node with a value of five so what I can do here as we know all the nodes must have to be deleted from the root node so first of all I'm gonna interchange the value of this node with the root node okay now again what I have to do I have to interchange the value of this node with with the last added linking so all right now I can detach this node because if I attach this node from the tree the tree will not become disconnected now from here I have to start doing down ap5 so first time I will be checking the value of this node with its children so you can see that heap property is not satisfied right here so what I can do here I can select the children which has a maximum value so in this case I will select 11 so I will be swapping these two values and on the pointer will be right here again I will be checking this you can see that also the heap property is violated so we need to do further down heapify so what I can do here I can select the children which has maximum value so that is four in this case so then I can scrap the value for an one and the pointer will be right here which if a children is selected the pointer will be right there and again now the pointer is here and there is no children so we can stop right here all right now let's try to talk about the time complexity of each operation because these will be very much useful to analyze the time complexity of heaps all so time complexity for inserting an element in worst case will take Big O of log n amount of time why this is taking logging amount of time because in insertion procedure we always insert a node as a leaf node and then we try to raise the value and for worst case we need to hurt interchange the value till the height of the binary tree so at AA if there there is n number of nodes then the height of the binary tree will be log in also the deletion will take a Big O of log n amount of time because for worst case for worst case the down heapify will take at most R login amount of steps to restore the property of people all right so in my next video I will be talking about the actual heap",
            "videoid": "oOnVN3mvkIk",
            "viewCount": "38898"
        },
        "p2lN3HnekB0": {
            "caption_exist": "T",
            "channel_id": "UCx-kFfzekMbhODaBss-ZnsA",
            "channel_title": "Vivekanand Khyade - Algorithm Every Day",
            "concepts": [
                [
                    "array",
                    4
                ],
                [
                    "list",
                    3
                ],
                [
                    "selection sort",
                    3
                ],
                [
                    "algorithm",
                    2
                ],
                [
                    "iteration",
                    1
                ]
            ],
            "description": "Given an array. Sort the array using Selection Sort.",
            "dislikeCount": "4",
            "duration": "PT7M17S",
            "likeCount": "128",
            "published_time": "2017-01-14T18:18:20.000Z",
            "tags": [
                "selection sort",
                "sorting",
                "increasing",
                "order",
                "decreasing order",
                "fixed pointer",
                "variable pointer",
                "number of passes",
                "pass",
                "equal to number of elements",
                "time complexity",
                "space complexity",
                "o(n2)"
            ],
            "thumbnail": "https://i.ytimg.com/vi/p2lN3HnekB0/hqdefault.jpg",
            "title": "selection sort",
            "transcript": "  hello friends today we are going to see the algorithm for selection sort so let's take an example so this is an array and this array contains these six elements so in selection sort there is a fixed pointer and there is a variable pointer V which always points to the next position of this fixed pointer so if the posit the value at the position of fixed pointer is greater than the variable pointer value then we have to swap the positions this is in case of sorting the list in increasing order so let us see how to do this so the here the value at fixed position is 8 and the value at variable pointer position is 5 so let us compare these values yes so 8 is greater than 5 this means we have to swap them so 5 will come here and eight will come now variable pointer will increase so now 5 will come be compared with 9 so 5 is less than 9 so there is no need of swapping now now again variable pointer will be incremented so 5 is less than 10 so no need of stressing variable pointer will be incremented 5 is greater than 2 so there should be swapping so 2 will come here and 5 will come here so now and variable pointer will be incremented so 2 is compared with 1 yes 2 is greater than 1 so they will be swapped one will come here and 2 will come here and thus the first iteration n so now after the first pass so the whenever the first in the least element in the array always comes at the top so one is the least element which comes at the top and these are the five elements which we have to solve now in the next part and the first position is sorted the fixed pointer points to the second position and the variable pointer points to the next position of fixed pointer so let's compare eight is compared with nine eight is less than nine so no swapping variable pointer is incremented it is compared with ten so no swapping because it satisfies the condition now it is greater than five so there should be swapping so five comes here and eight contain and variable pointer is increased five is compared with two yes here and 5 will come here so in the second pass we got the second list element so we will go to the next pass now this is the third pass I will write it here this is the third pass as you can see first two positions are sorted so our sixth pointer points to the third position and variable pointer points to the next position of the fixed pointer so 9 is compared with 10 no need of scrapping 9 is compared with it yes there is a need of scrapping because sixth position value is greater than variable position value 9 is greater than 8 so we swap it will come here and 9 will come and variable pointer will so now 8 is compared with 5 yes there is a neuro swapping so fine and 8 so we bought the 3rd elder third list element here so as the 3 positions are in the fourth pass the fixed-point appoints to ten so now our variable the fixed pointer so 10 is compared with 9 yes there is a need of swapping 9 and then the variable pointer is incremented 9 is compared with 8 yes there is a need of swapping so here it will come 8 &amp; 9 and as we have got the first four positions sorted the fixed pointer will now point to the next position so now the variable pointer will point to the compare 10 with 9 yes 10 is greater than 9 so we have to swap so 9 will come here and 10 will come so busy pressure this pass is here in the next pass we have 5 positions sorted now the fixed point will point to the last element but as this is the last element there is no need of comparison so straight away we have got all the elements sorted in the last pass so if you want to sort the array in decreasing order if you want to sort it in decreasing order then just one change will make it you have to swap the element when the fixed position value is less than the variable position value and in this way you will get the added sorted in decreasing order the time complexity of the codes will be O of n square as we need two loops for the fixed pointer one loop and the for the variable pointer the inner loop for the the time complexity of the code is equal to o of n square because we need two loops here the first loop for the fixed pointer and the inner loop for the variable pointer so this is for selection sort and the full code you will get at github.com slash we recommend 44 hey friends please subscribe to my channel as I post algorithm videos every day and if you want a video on any particular topic then please mention in the comment below thank you",
            "videoid": "p2lN3HnekB0",
            "viewCount": "12128"
        },
        "q9DH0J4jU9E": {
            "caption_exist": "T",
            "channel_id": "UCdZGY1c-xumojcKhLZRCORQ",
            "channel_title": "Sudha Dharwal",
            "concepts": [
                [
                    "list",
                    46
                ],
                [
                    "sorted list",
                    17
                ],
                [
                    "element",
                    16
                ],
                [
                    "unsorted list",
                    14
                ],
                [
                    "array",
                    8
                ],
                [
                    "light",
                    2
                ],
                [
                    "array index",
                    1
                ],
                [
                    "subset",
                    1
                ]
            ],
            "description": "Insertion Sorting algorithm - example - an easy step by step insertion sort in Data Structure",
            "dislikeCount": "11",
            "duration": "PT12M51S",
            "likeCount": "130",
            "published_time": "2017-03-17T12:12:53.000Z",
            "tags": [
                "data structure",
                "insertion sort",
                "insertion sorting",
                "sorting"
            ],
            "thumbnail": "https://i.ytimg.com/vi/q9DH0J4jU9E/hqdefault.jpg",
            "title": "Insertion Sorting in Data Structure - Easy Way",
            "transcript": "  hello friends I am sooo does it all and after my videos on selection and bubble sorting today I came up with a concept of insertion surfing so let me first tell you that this sorting is also fair efficient for smallness and if you ask me why then I will tell you in the end of this video so in this particle sorting the list or you can say the array is divided into two sub lists sorted and unsorted here guys not one thing that the array or the list is not divided physically right but only logically we divide the list in two sub lists so now let us take an example suppose we have an array a and the elements are 7 8 3 1 &amp; 2 so we have five elements array index position 0 1 2 3 &amp; 4 the first element is taken in the sorted list this is the first subset and the remaining elements of the list a a 3 1 &amp; 2 they are considered to be in the unsorted list this is our sorted list 7 at index 0 and the remaining elements of the array from index 1 2 index 4 they are in the unsorted list so what happens here in each path one element from the unsorted list is inserted in the correct position of the sorted list that means one element means it then 1 &amp; 2 1 element is picked from this list unwatered list and it is inserted in the sorted list right hence as a result your unsorted list will shrink after every pass and at the end of the last pass all the elements will take their correct positions in the sorted list so what it means it means that your list will get sorted data and now come back in our example and let's try to sort the array through the insertion sorting so guys in parchment we have this is the unsorted list so one item means suppose 8 it is picked from the unsorted list right so our unsorted list would be 3 1 2 right 3 1 2 is a unsorted list now it is picked from this from this position the remaining will be 2 3 4 and now it is checked with the elements on the sorted list this is our unsorted list and here comes our sorted list so wise it it is checked with the sorted list like 8 is 8 is greater than 7 8 is greater than 7 yes it is so there is no shifting required in this case it will remain in its own index it will remain at index 1 however now index 1 is considered to be a part of the sorted list means 7 mil counts at the index position 0 &amp; 8 will come here so it will remain in its own index position 1 as it seven and so there is no shifting and seven will remain in its position and now one will be in the sorted list if the remaining unsorted list will be this one three one and two this is the remaining list at the end of path one we have one element is inserted in the in its tight position then pass to in pass to one element again it is set from here from the unsorted list so the unsorted list here is one two and in dispositions are three four so three is picked on here right and now three is compared with the elements of the sorted list starting from and of the list like this is the sub list it if three is greater than it no three is not greater than it so here shifting is required now it is shifted to one position right in the array this is a petition um of 1 sorry 0 1 &amp; 2 so 8 which is in position a 1 this is the index number so it is now shifted towards right so it will come at the position 8 right it will shifted here then again 3 is compared with 7 so is 3 no 3 is not greater than 7 min 7 has to shift right as that as a tide shifted to the towards the right side so 7 will shift here at the index position 1 and we have a space for I 3 for our element which we have read from the unsorted list so we will place here 3 at index position zero then you can see that three seven eight decides the sorted list and this is the unsorted list then and the end of the path - we have three elements in our sorted list again like pass one and pass - let's see pass three so one element again it is picked from this is our remaining list one is baked and it is compared with each element of the sorted it is one is greater than it no means now our sorted list will contain four elements zero one two this is three oh sorry it will contain three right so one is greater than eight no one is not greater than eight so it has to shift one position I have it will come as index position three right now one is checked with seven is one is greater than seven oh seven is shifted okay from position one it will come as index position to right you can see here then again one is compared with three is one is greater than 3 no it is not so 3 is again shifted to position one so we have zero position at index zero we have the space for our element 1 right 1 3 7 8 now let's a path for our 4 we have our remaining element which you have in the previous page that 2 is the only remaining element here so it is picked from here and it is compared with each and every let me let me hear sing 1 3 7 &amp; 8 this is a result of past rewrite so do is pick from here in password to a spectrum here and it is compared with all these elements so it is compared with H is 2 is greater than 8 so no so it will be moved to the last position here 0 1 2 3 are the elements in the sorted list then we have 4 elements 1 0 position 1 &amp; 2 &amp; 3 &amp; 4 so it is moved to index for now - is compared with 7 if 2 is greater than no 7 is moved to index 3 then 2 is again compare fit 3 is 2 is greater than no so 3 is moved or shifted you can say 2 index position second and then 1 is compared is 2 is greater than 1 yes 2 is greater than 1 so no shifting here now one is not shifted to this position as soon as we find a situation where the element is not greater than the element there then shifting is not required as in first case right so 1 is not shifted here it will remain in its position 0 and the element are element which we have picked it will be inserted in the index position 1 so guys you can see that at the end of the past 4 we have our sorted list 1 2 3 7 &amp; 8 so this sorting is efficient if you have partially sorted list because in that number of comparisons would be less light let's take let's take an example like to impasse one let's take a scenario light we have a list we have a list of an array and that would be in the reverse order so what we have to do in part one we have one comparison right in past two we have two comparisons in past three we have three comparisons right so what are the number of companions in this case number of comparisons number of comparisons would be one in path one then two in part two three four plus N and minus one right so as the number of passes increases the number of comparisons also increases so that Phi guys I told you in the starting of the video that this sorting is efficient for smallest only so guys this is an instance why it is efficient while it is more efficient than for small lists only and also insertion sorting provides better efficiency than bubble and selection sorting moves list if the list is you know partially sorted as you have number of comparison would be lesser in that case thank you friends for watching this video if you really liked it please press the like button and don't forget to subscribe my channel",
            "videoid": "q9DH0J4jU9E",
            "viewCount": "12789"
        }
    }
}