{
    "concept_relationship": {
        "links": [
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 0,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 0,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 0,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 0,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 0,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 0,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 1,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 1,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 1,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 1,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.12909944487358058,
                "source": 1,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 14
            },
            {
                "prerequisite": 0.7018049658045981,
                "similarity": 0.7357022603955159,
                "source": 15,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.3790994448735806,
                "source": 1,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 1,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 1,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 1,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 1,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.14433756729740646,
                "source": 2,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 2,
                "target": 2
            },
            {
                "prerequisite": 1.24014026976604,
                "similarity": 0.6767766952966369,
                "source": 2,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 2,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.125,
                "source": 2,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 2,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.36180339887498947,
                "source": 2,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 2,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.5151650429449552,
                "source": 2,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 2,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 2,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 2,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 2,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 2,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 3,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.6767766952966369,
                "source": 3,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 3,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 3,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.12499999999999997,
                "source": 3,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 3,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 3,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5151650429449552,
                "source": 3,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 3,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.23717082451262841,
                "source": 3,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 3,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 3,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 3,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 3,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 3,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 3,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 3,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 3,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.375,
                "source": 3,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.33838834764831843,
                "source": 3,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.12499999999999997,
                "source": 3,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 4,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 4,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 4,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 4,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 5,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 5,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 5,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 5,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 5,
                "target": 18
            },
            {
                "prerequisite": 0.9651366062021851,
                "similarity": 0.625,
                "source": 19,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 5,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 5,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 5,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 5,
                "target": 27
            },
            {
                "prerequisite": 2.10112134179474,
                "similarity": 0.8535533905932737,
                "source": 28,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 5,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 6,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 6,
                "target": 17
            },
            {
                "prerequisite": 0.7337158472962553,
                "similarity": 0.75,
                "source": 6,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 6,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 6,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 7,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 7,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 7,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 7,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 7,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 16
            },
            {
                "prerequisite": 0.9052217652174004,
                "similarity": 0.75,
                "source": 7,
                "target": 17
            },
            {
                "prerequisite": 1.1109924202376793,
                "similarity": 0.75,
                "source": 7,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 7,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 7,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 7,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.12499999999999997,
                "source": 8,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 8,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 8,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 8,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 8,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 8,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 8,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 8,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 8,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 8,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 8,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 8,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.12909944487358058,
                "source": 9,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 9,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 9,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 9,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 9,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 9,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 9,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 9,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 9,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 9,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 9,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.36514837167011077,
                "source": 9,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.19999999999999998,
                "source": 9,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 9,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.3162277660168379,
                "source": 9,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 9,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 9,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 9,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 9,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 9,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.36180339887498947,
                "source": 9,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 9,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 10,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 10,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.45412414523193156,
                "source": 10,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 10,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 10,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 10,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 10,
                "target": 28
            },
            {
                "prerequisite": 2.9510527977086745,
                "similarity": 0.6035533905932737,
                "source": 29,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 11,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 11,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 11,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 11,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 11,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 15
            },
            {
                "prerequisite": 0.8116861272125021,
                "similarity": 0.658113883008419,
                "source": 16,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 18
            },
            {
                "prerequisite": 2.107077540204091,
                "similarity": 0.625,
                "source": 19,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 21
            },
            {
                "prerequisite": 2.3023569499284853,
                "similarity": 0.6035533905932737,
                "source": 11,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 11,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 11,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 11,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 12,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 12,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 18
            },
            {
                "prerequisite": 3.9270984561367084,
                "similarity": 0.6767766952966369,
                "source": 19,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 12,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 12,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 12,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 13,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 13,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 13,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 13,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 13,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 13,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 13,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 13,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 13,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.125,
                "source": 14,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.5151650429449552,
                "source": 14,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 14,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 14,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 14,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 14,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 14,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 14,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.11180339887498948,
                "source": 14,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 14,
                "target": 19
            },
            {
                "prerequisite": 0.6823102176304969,
                "similarity": 0.6443375672974064,
                "source": 14,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 14,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 14,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 14,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 14,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 14,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.7357022603955159,
                "source": 15,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 15,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 15,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 15,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 15,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.36514837167011077,
                "source": 15,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.45412414523193156,
                "source": 15,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 15,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 15,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.5238612787525831,
                "source": 15,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 15,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 15,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.45412414523193156,
                "source": 15,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 15,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.20412414523193154,
                "source": 15,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 15,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 15,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.45412414523193156,
                "source": 15,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 15,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.3790994448735806,
                "source": 16,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.36180339887498947,
                "source": 16,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.23717082451262841,
                "source": 16,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 16,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.19999999999999998,
                "source": 16,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 16,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.658113883008419,
                "source": 16,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.11180339887498948,
                "source": 16,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.5238612787525831,
                "source": 16,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 16,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 16,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.23717082451262841,
                "source": 16,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.3790994448735806,
                "source": 16,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.47360679774997894,
                "source": 16,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 16,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.36180339887498947,
                "source": 16,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.3162277660168379,
                "source": 16,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 17,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 17,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 17,
                "target": 17
            },
            {
                "prerequisite": 0.7316139516735769,
                "similarity": 0.75,
                "source": 17,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 17,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 17,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 17,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 18,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 18,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 18,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 18,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.75,
                "source": 18,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 18,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 18,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 18,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 18,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 19,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.5151650429449552,
                "source": 19,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 19,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.625,
                "source": 19,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.3162277660168379,
                "source": 19,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 19,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.625,
                "source": 19,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.6767766952966369,
                "source": 19,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 19,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 19,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.23717082451262841,
                "source": 19,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 19,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 19,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 19,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 19,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 19,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 19,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 19,
                "target": 23
            },
            {
                "prerequisite": 3.121861476314323,
                "similarity": 0.6767766952966369,
                "source": 19,
                "target": 24
            },
            {
                "prerequisite": 4.465787955835485,
                "similarity": 0.6767766952966369,
                "source": 19,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 19,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 19,
                "target": 27
            },
            {
                "prerequisite": 0.8216957266792573,
                "similarity": 0.6767766952966369,
                "source": 19,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 19,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 20,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 20,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 20,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.6443375672974064,
                "source": 20,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.3790994448735806,
                "source": 20,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.3520620726159658,
                "source": 20,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 20,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 20,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 20,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.2886751345948129,
                "source": 20,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 20,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 20,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.2886751345948129,
                "source": 20,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 20,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 21,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 21,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 21,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 21,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.45412414523193156,
                "source": 21,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 21,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 21,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 21,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 21,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 22,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 22,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 22,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 22,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 22,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 22,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 22,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 23,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 23,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 23,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 23,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 23,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 23,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 23,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 23,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 23,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.4541241452319315,
                "source": 23,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 23,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 23,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 23,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 23,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 24,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 24,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.47360679774997894,
                "source": 24,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.6767766952966369,
                "source": 24,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.2886751345948129,
                "source": 24,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 24,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 24,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 24,
                "target": 28
            },
            {
                "prerequisite": 1.633857658686399,
                "similarity": 0.6035533905932737,
                "source": 29,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 25,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.22360679774997896,
                "source": 25,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.20412414523193154,
                "source": 25,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.6767766952966369,
                "source": 25,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 25,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 25,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 25,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 25,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 26,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 26,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.5386751345948129,
                "source": 26,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 26,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 26,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 26,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 27,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.375,
                "source": 27,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 27,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 27,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 27,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 27,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.49999999999999994,
                "source": 27,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 27,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 27,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 27,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 27,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 27,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 27,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 28,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.33838834764831843,
                "source": 28,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.8535533905932737,
                "source": 28,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 28,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.36180339887498947,
                "source": 28,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 28,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.45412414523193156,
                "source": 28,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.36180339887498947,
                "source": 28,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.6767766952966369,
                "source": 28,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.2886751345948129,
                "source": 28,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.35355339059327373,
                "source": 28,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 28,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 28,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.42677669529663687,
                "source": 28,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 1.0,
                "source": 28,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 28,
                "target": 29
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 0
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 1
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 2
            },
            {
                "prerequisite": null,
                "similarity": 0.12499999999999997,
                "source": 29,
                "target": 3
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 4
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 5
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 6
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 7
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 8
            },
            {
                "prerequisite": null,
                "similarity": 0.15811388300841894,
                "source": 29,
                "target": 9
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 29,
                "target": 10
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 11
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 12
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 13
            },
            {
                "prerequisite": null,
                "similarity": 0.5,
                "source": 29,
                "target": 14
            },
            {
                "prerequisite": null,
                "similarity": 0.39433756729740643,
                "source": 29,
                "target": 15
            },
            {
                "prerequisite": null,
                "similarity": 0.3162277660168379,
                "source": 29,
                "target": 16
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 17
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 18
            },
            {
                "prerequisite": null,
                "similarity": 0.24999999999999994,
                "source": 29,
                "target": 19
            },
            {
                "prerequisite": null,
                "similarity": 0.2041241452319315,
                "source": 29,
                "target": 20
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 21
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 22
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 23
            },
            {
                "prerequisite": null,
                "similarity": 0.6035533905932737,
                "source": 29,
                "target": 24
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 25
            },
            {
                "prerequisite": null,
                "similarity": 0.0,
                "source": 29,
                "target": 26
            },
            {
                "prerequisite": null,
                "similarity": 0.25,
                "source": 29,
                "target": 27
            },
            {
                "prerequisite": null,
                "similarity": 0.17677669529663687,
                "source": 29,
                "target": 28
            },
            {
                "prerequisite": null,
                "similarity": 0.9999999999999999,
                "source": 29,
                "target": 29
            }
        ],
        "nodes": [
            {
                "count": 0.80625,
                "group": 1,
                "index": 0,
                "name": "species",
                "videos_id": [
                    "qv6UVOQ0F44"
                ]
            },
            {
                "count": 0.5222443669263324,
                "group": 1,
                "index": 1,
                "name": "arm",
                "videos_id": [
                    "dcZvhP-IqY4",
                    "KytW151dpqU",
                    "WXHM_i-fgGo"
                ]
            },
            {
                "count": 0.4485448589443854,
                "group": 1,
                "index": 2,
                "name": "key",
                "videos_id": [
                    "HcqpanDadyQ",
                    "KytW151dpqU",
                    "R9OHn5ZF4Uo",
                    "cKxRvEZd3Mw"
                ]
            },
            {
                "count": 0.41750425637029154,
                "group": 1,
                "index": 3,
                "name": "algorithm",
                "videos_id": [
                    "y9U10qdDQqk",
                    "63NTeLmDANo",
                    "Cr6VqTRO1v0",
                    "R9OHn5ZF4Uo",
                    "WXHM_i-fgGo",
                    "z-EtmaFJieY",
                    "cKxRvEZd3Mw",
                    "481hvflVBaw"
                ]
            },
            {
                "count": 0.403125,
                "group": 1,
                "index": 4,
                "name": "edge",
                "videos_id": [
                    "481hvflVBaw"
                ]
            },
            {
                "count": 0.27819305919443227,
                "group": 1,
                "index": 5,
                "name": "flow",
                "videos_id": [
                    "P5wcE4IwKgQ",
                    "I74ymkoNTnw"
                ]
            },
            {
                "count": 0.27291666666666664,
                "group": 1,
                "index": 6,
                "name": "range",
                "videos_id": [
                    "aircAruvnKk"
                ]
            },
            {
                "count": 0.27291666666666664,
                "group": 1,
                "index": 7,
                "name": "form",
                "videos_id": [
                    "aircAruvnKk"
                ]
            },
            {
                "count": 0.2707369560066938,
                "group": 1,
                "index": 8,
                "name": "forest",
                "videos_id": [
                    "ZX2Hyu5WoFg",
                    "z-EtmaFJieY"
                ]
            },
            {
                "count": 0.22758974921183145,
                "group": 1,
                "index": 9,
                "name": "matrix",
                "videos_id": [
                    "DZ7xuZ1-uh8",
                    "WXHM_i-fgGo",
                    "I74ymkoNTnw",
                    "nKW8Ndu7Mjw",
                    "z-EtmaFJieY"
                ]
            },
            {
                "count": 0.22187500000000002,
                "group": 1,
                "index": 10,
                "name": "alcohol",
                "videos_id": [
                    "nKW8Ndu7Mjw"
                ]
            },
            {
                "count": 0.2112158098240642,
                "group": 1,
                "index": 11,
                "name": "tree",
                "videos_id": [
                    "y9U10qdDQqk",
                    "cKxRvEZd3Mw"
                ]
            },
            {
                "count": 0.20625000000000002,
                "group": 1,
                "index": 12,
                "name": "operations",
                "videos_id": [
                    "DZ7xuZ1-uh8"
                ]
            },
            {
                "count": 0.20073529411764707,
                "group": 1,
                "index": 13,
                "name": "bucket",
                "videos_id": [
                    "P5wcE4IwKgQ"
                ]
            },
            {
                "count": 0.18617307210414452,
                "group": 1,
                "index": 14,
                "name": "linear",
                "videos_id": [
                    "DZ7xuZ1-uh8",
                    "Cr6VqTRO1v0",
                    "R9OHn5ZF4Uo",
                    "z-EtmaFJieY"
                ]
            },
            {
                "count": 0.14467226546617498,
                "group": 1,
                "index": 15,
                "name": "mean",
                "videos_id": [
                    "ZX2Hyu5WoFg",
                    "KytW151dpqU",
                    "WXHM_i-fgGo",
                    "I74ymkoNTnw",
                    "nKW8Ndu7Mjw",
                    "z-EtmaFJieY"
                ]
            },
            {
                "count": 0.13902671368520486,
                "group": 1,
                "index": 16,
                "name": "walk",
                "videos_id": [
                    "y9U10qdDQqk",
                    "63NTeLmDANo",
                    "KytW151dpqU",
                    "nKW8Ndu7Mjw",
                    "z-EtmaFJieY"
                ]
            },
            {
                "count": 0.13645833333333332,
                "group": 1,
                "index": 17,
                "name": "variety",
                "videos_id": [
                    "aircAruvnKk"
                ]
            },
            {
                "count": 0.13645833333333332,
                "group": 1,
                "index": 18,
                "name": "nature",
                "videos_id": [
                    "aircAruvnKk"
                ]
            },
            {
                "count": 0.1142980721041445,
                "group": 1,
                "index": 19,
                "name": "language",
                "videos_id": [
                    "DZ7xuZ1-uh8",
                    "63NTeLmDANo",
                    "KytW151dpqU",
                    "R9OHn5ZF4Uo",
                    "WXHM_i-fgGo",
                    "I74ymkoNTnw",
                    "nKW8Ndu7Mjw",
                    "cKxRvEZd3Mw"
                ]
            },
            {
                "count": 0.11382387338526648,
                "group": 1,
                "index": 20,
                "name": "link",
                "videos_id": [
                    "63NTeLmDANo",
                    "Cr6VqTRO1v0",
                    "P5wcE4IwKgQ"
                ]
            },
            {
                "count": 0.10625000000000001,
                "group": 1,
                "index": 21,
                "name": "dictionary",
                "videos_id": [
                    "WXHM_i-fgGo"
                ]
            },
            {
                "count": 0.10312500000000001,
                "group": 1,
                "index": 22,
                "name": "tournament",
                "videos_id": [
                    "cKxRvEZd3Mw"
                ]
            },
            {
                "count": 0.10043843854788864,
                "group": 1,
                "index": 23,
                "name": "node",
                "videos_id": [
                    "ZX2Hyu5WoFg",
                    "P5wcE4IwKgQ"
                ]
            },
            {
                "count": 0.0921336206896552,
                "group": 1,
                "index": 24,
                "name": "level",
                "videos_id": [
                    "63NTeLmDANo"
                ]
            },
            {
                "count": 0.084375,
                "group": 1,
                "index": 25,
                "name": "functions",
                "videos_id": [
                    "I74ymkoNTnw"
                ]
            },
            {
                "count": 0.083125,
                "group": 1,
                "index": 26,
                "name": "subset",
                "videos_id": [
                    "Cr6VqTRO1v0"
                ]
            },
            {
                "count": 0.08311217868402408,
                "group": 1,
                "index": 27,
                "name": "string",
                "videos_id": [
                    "I74ymkoNTnw",
                    "cKxRvEZd3Mw"
                ]
            },
            {
                "count": 0.0811570495095704,
                "group": 1,
                "index": 28,
                "name": "control",
                "videos_id": [
                    "ZX2Hyu5WoFg",
                    "63NTeLmDANo",
                    "P5wcE4IwKgQ",
                    "I74ymkoNTnw"
                ]
            },
            {
                "count": 0.07611007891091648,
                "group": 1,
                "index": 29,
                "name": "scale",
                "videos_id": [
                    "63NTeLmDANo",
                    "nKW8Ndu7Mjw"
                ]
            }
        ]
    },
    "search_info": {
        "NumOfVideos": 20,
        "key": "machine_learning_50",
        "similarity_threshold": 0.6,
        "time_delta": 8.45,
        "voclist_SelectMethod": 2
    },
    "videos_info": {
        "481hvflVBaw": {
            "caption_exist": "T",
            "channel_id": "UCtDPmj72JBj-1UwiMBAfj7A",
            "channel_title": "Selim Chehimi",
            "concepts": [
                [
                    "edge",
                    1
                ],
                [
                    "algorithm",
                    1
                ]
            ],
            "description": "Artificial Intelligence is by far the most important Technology of our era. AI is about to transform society, and I think it\u2019s very important for people to understand the basics of it. In this video, I explain you the differences between Artificial Intelligence, Machine Learning and Deep Learning. \n\nThe Article related to this video: http://selimchehimi.com/what-are-the-differences-between-artificial-intelligence-machine-learning-and-deep-learning/\n\nMusic: Our Samplus - Spell on You\n\n--\nMy name is Selim Chehimi and I\u2019m an engineering student. I'm passionate about AI and I really want to be involved in this industry. I'm posting Articles about it on my blog selimchehimi.com. Thanks for watching, reading and subscribing!\n\nMy Blog: http://selimchehimi.com/\n\nFOLLOW MY INSTAGRAM- http://instagram.com/selimchehimi\n\nFACEBOOK- https://www.facebook.com/Selim-Chehimi-1681013242200195/\n\nFOLLOW MY TWITTER- https://twitter.com/SelimChehimi",
            "dislikeCount": "32",
            "duration": "PT3M47S",
            "likeCount": "336",
            "published_time": "2017-10-13T23:22:16.000Z",
            "tags": [
                "Machine Learning Deep Learning",
                "Deep Learning AI",
                "Difference AI Machine Learning",
                "Difference AI ML",
                "AI ML DL",
                "Machine Learning AI",
                "AI ML",
                "deep learning",
                "Deep Learning",
                "ai",
                "Machine learning",
                "machine learning",
                "Artificial Intelligence",
                "artificial intelligence",
                "Future Technology",
                "Best Technology",
                "Artificial Intelligence Tech",
                "Artificial Intelligence Future",
                "software",
                "programming",
                "coding",
                "neural network",
                "neural net",
                "data",
                "data analytics",
                "computer science",
                "AI Tech",
                "dl",
                "computer",
                "ml"
            ],
            "thumbnail": "https://i.ytimg.com/vi/481hvflVBaw/hqdefault.jpg",
            "title": "The Differences between Artificial Intelligence, Machine Learning and Deep Learning",
            "transcript": " What\u2019s up guys, my name is Selim Chehimi and in this video, I will explain to you the differences between Artificial Intelligence, Machine Learning and Deep Learning. I want to emphasize that these topics have been studied by experts for decade. The goal here is to give you an intuitive understanding of it. For a long time, we were trying to replicate our thoughts by giving a lot of rules to computers. We thought that, as a result, we would build an Artificial Intelligence. And it turned out to be a terrible way. Instead, researchers began to write algorithms that learned from themselves, and it was the beginning of machine learning. So to answer the question What is machine learning? I would say that machine learning is a subfield of artificial intelligence where machines can learn from data without explicitly programmed instructions, without rules. For instance let's suppose that we have to build an algorithm that can play tic-tac-toe. You have two cases: in the AI case you would have to take it by its hand and give it many logical rules to learn how to play. As a result, you cannot build a machine that is good at tic-tac-toe without being good at it yourself. In the Machine Learning case, you may not know how to play tic-tac-toe yourself, yet you can still come up with a great software. Unlike the AI approach, you give it many examples of previous games, and let it learn the rules by itself. Machine Learning is showing the most promise at providing tools that the industry and society can use. Deep Learning is a subfield of Machine Learning. You can consider it as the cutting edge of the cutting edge. Like in Machine Learning, the data is fed through neural networks (algorithms that take inspiration from the human brain). Those neural networks will extract a numerical value called output for every data So it can be images, it can be voices, it can be text. And then it will classify this data. For example it can tell you if a given image is a cat picture or not. Ok so now Let's take an example and let's suppose that we want to build an animal classifier that tells you if a given picture is a cat or a dog In the machine learning case, we would have to define features such as if the animal has ears and if yes, then if they are pointed. We would have to define all the facial features and let the system learn which features are the most important to classify a specific animal. But deep learning takes a step ahead and automatically finds out the features which are important for classification. We don't have to do anything. Now I want to explain to you why Deep Learning only take off recently and there are many reasons to that. First off, deep learning requires a large amount of data which have been possible due to the recent digitalization of our society (everybody is now using a smartphone that produce data). Secondly, Deep Learning requires a lot of computational power which has only been available recently. As you can imagine, requiring a large amount of data is a drawback, because it\u2019s hard to gather. Similarly, having substantial computational power is costly. And consequently, Deep Learning is expensive. Is Deep Learning the way to go? Of course nobody knows but Deep Learning pioneer Geoffrey Hinton says we need to start from the beginning. We need to start over. Thank you so much for watching guys I just want to add that I'm doing these videos because I believe that AI is about to transform society and I think it's very important for people to understand the basics of it My belief is that this channel will inspire students in the future and perhaps get them interested in this fascinating topic. So I hope it will help.",
            "videoid": "481hvflVBaw",
            "viewCount": "29945"
        },
        "63NTeLmDANo": {
            "caption_exist": "T",
            "channel_id": "UCXgGY0wkgOzynnHvSEVmE3A",
            "channel_title": "Hitesh Choudhary",
            "concepts": [
                [
                    "language",
                    5
                ],
                [
                    "level",
                    3
                ],
                [
                    "scale",
                    3
                ],
                [
                    "name",
                    2
                ],
                [
                    "base",
                    2
                ],
                [
                    "algorithm",
                    2
                ],
                [
                    "walk",
                    1
                ],
                [
                    "type",
                    1
                ],
                [
                    "control",
                    1
                ],
                [
                    "theory",
                    1
                ],
                [
                    "mole",
                    1
                ],
                [
                    "depth",
                    1
                ],
                [
                    "work",
                    1
                ],
                [
                    "mode",
                    1
                ],
                [
                    "tour",
                    1
                ],
                [
                    "array",
                    1
                ],
                [
                    "link",
                    1
                ],
                [
                    "light",
                    1
                ]
            ],
            "description": "http://www.LearnCodeOnline.in\nMachine learning is just to give trained data to a program and get better result for complex problems. It is very close to data mining. \nWhile many machine learning algorithms have been around for a long time, the ability to automatically apply complex mathematical calculations to big data \u2013 over and over, faster and faster \u2013 is a recent development. Here are a few widely publicized examples of machine learning applications you may be familiar with:\n\nThe heavily hyped, self-driving Google car? The essence of machine learning.\nOnline recommendation offers such as those from Amazon and Netflix? Machine learning applications for everyday life.\nKnowing what customers are saying about you on Twitter? Machine learning combined with linguistic rule creation.\nFraud detection? One of the more obvious, important uses in our world today.\n\n\nfb: https://www.facebook.com/HiteshChoudharyPage\nhomepage: http://www.hiteshChoudhary.com",
            "dislikeCount": "539",
            "duration": "PT12M9S",
            "likeCount": "7986",
            "published_time": "2017-07-30T05:15:00.000Z",
            "tags": [
                "Programming",
                "computers",
                "code",
                "hacking",
                "information",
                "Security",
                "iOS",
                "iPhone",
                "udemy",
                "online-courses",
                "coupons",
                "free-coupons",
                "udemy-coupons",
                "udemy-courses",
                "android",
                "iphone",
                "reactjs",
                "web-development",
                "machine learning",
                "machine",
                "tensorflow",
                "scikit",
                "data mining"
            ],
            "thumbnail": "https://i.ytimg.com/vi/63NTeLmDANo/hqdefault.jpg",
            "title": "What is machine learning and how to learn it ?",
            "transcript": "  yep I'm finally back [Music] hey there everyone today's year back again with another video I know you have been missing me a lot and I haven't made video in the last two weeks or so of these camera types of videos I have been consistent making a flexbox series but I was on a travel and I could only afford making a screencasting videos on that but regardless of that finally I'm back and today's topic is really interesting I'm going to talk about machine learning what is machine learning in layman's term and how you can get started in machine learning a lot more is about to come so let's get started now the terms machine learning and AI artificial intelligence is closely related and it's not wrong to say that the abstraction level of between these two words is fairly thin line and they can be interchangeably used but when I say machine learning or artificial intelligence II what most of the people saying is the same oh it's Terminator movie you think that there is going to be some TX 9000 machine that is going to come up from the future is going to destroy entire humanity you start panicking and you will you just think that there is not going to be any need of programmers in the future and a lot of theories like that hey hold down there this is not actually a fictional movie if this could have been true so we should stop testing about with a gamma-rays because it can generate a Hulk and we should stop looking into the space because we may find aliens and that may invade into the earth there might be a tour coming up to save all of you and there might be a Spider Man roaming around and who knows there might be a battement too so hold on your horses we need to talk a lot about machine learning and what actually it is so putting down your Terminator movie theory aside for a minute let's talk about machine learning and AI now machine learning and AI all these are branches of computer science with almost poor doing their masters and PhD might have studied in their curriculum as well they are closely related but according to me what my personal thought is machine learning is closely related to data mining rather than AI AI is completely a different thing but what you think of machine learning is closely related to data mining and you have been already using it quite a lot might be asking hey there we are already using machine learning now although you have just heard the term machine learning but you might already be aware of the term known as data mining now data mining has been there since the evolution of data and computers which have been into the world quite a lot and all the things that you see simple examples would be spam emails you see that some of your emails are in your inbox and some of them are into spam box what is that that is machine learning rather closely that is data mining there is a huge chunk of data and your program and algorithm is designed in such a manner so that it can predict that whether this email is spam or is it a good email that needs to be delivered in Inbox is it always perfect no not at all sometimes good email also land up in the spam and spam email ends up in the inbox so that is basically a good example of machine learning at a very small level but now things are changing that was version 1 of machine learning now what we are seeing in our day to day life is machine learning version 2 so how actually this is working all nowadays so if I talk about the machine learning at a very broad scale there are a couple of components that you need to be worried about first of all is a huge data set data set that can predict a lot of things for example if I just show you a chair you can say hey that's the chair but if I say that that's the wooden chair that's a glassed year and there are tons of gazillion bazillion type of chair you can see the difference between all these chairs and can still predict that that's the chair but if I just ask you to write a program for that that could have been nightmare for you for example if you're just writing a program that it should have a four legs and some wooden texture that would be a chair but what about when I say that hey it can be just a centralized table having a central base and a glob a sitting area that is also a chair but you cannot write a program for that and for such situation we require a huge number of data sets that's problem number one the second thing that data set is being pitched to something known as classifier which is again a big term big big term but rather I would say that is just an algorithm which can determine the output based on whatever the data is being fetched and as we all know the mode we are going to have the mole prediction capability is going to be there so now based on what kind of data you are supplying your classifier can classify the image or any other thing in this example we are just taking an image of chair so it can predict that image of chair with some certain amount of confidence that it can be chair it can never be 100% sure but it's always about the ratio of how much confidence that it's showing that AB is that 99% chair is that 80% chair and is it 70 percent sheer so this is all on a broad scale what the machine learning is what we are trying to teach with the machine and yes I know some of you are worried about hay in the future it's going to be the AI and the machine learning are going to learn to write the code so there will be no need of programmer hold down your horses who told you that first of all with the evolution things changes quite a lot I do agree but this is almost similar to the strike that I saw in my childhood when people were opposing the computers everybody in the government department private sector was saying that hey if computers will come up they will take our job did computers did that perhaps but did it open more number of job as compared to that the job that is taken for sure it has done the same thing is applied here is it going to take the job of programmers who knows but is it going to open up more more responsibilities and more scenarios of working jobs or sure it is going to be there so on a whole note there is no such thing to be worried about that machine learning the future is machine learning and AI and we don't need programmers and future in fact we do need more programmers in future so now that you understand that how machine learning work on a simple scenario a huge number of data set being given to classifier and based on that data set it just do some processing and tries to predict the results that's basically your machine learning being applied at a lot of places spamming is one of them recently if you saw the Google's new product you can just open up your camera app and can see the restaurants name and based on handwriting prediction image prediction and logo prediction it can query to the humongous amount of data set that is presented by Google and can find out the ratings of the residents the name of the restaurants and some reviews about the restaurant that's just one example of machine learning have you used some kind of app which predicts how you will look like in your 80s or your 90s how your face is going to get at some deformation your skin is going to get some kind of deformation this is all based on machine learning small level of examples but yes this is all based on machine learning so now that on a very big scale you understand what is machine learning how you can get started in machine learning now there are a couple of ways of getting started in machine learning and everybody has its own implementation of machine learning now let me walk you through how you can get started in learning machine learning of activating learning machine learning okay so how you can get started with machine learning machine learning is first of all dependent quite a lot in math but not all the time it's going to be like designing your neural networks or designing your patterns and all these things it's not all the time about that but based example or base core setup of machine learning is dependent on that as well but the first language that you should be looking up in order to get started with machine learning is Python Python R being the very first language for took advantage and brought up the libraries like PI kit and tensor flows obviously the language has it first and it is being heavily used in machine learning now before you get started and jump directly into the psyche it and tensorflow documentation and everything let me tell you that python needs to be there in your pocket nobody is going to teach you in a machine learning course that hey how to write a loop or how to loop through an array or how to define these set of lines into a function or create a new classes these are all basics that you should have already in Python just onto a side bar here you can see the link for amazing Python course at an affordable rate go ahead try that out all I'm saying slide bar over now let's come back here so python is the one way of getting started with machine learning and most people think that's the only way but that's not true most of the other languages are also coming up with the machine learning but again depends on how much data set you are having or how much data you can collect it's heavily dependent on that now other one language it's not called language it's the company which came up with the implementation of machine learning for public user is Apple so if you got an apple machine like MacBook or iMac or Mac Mini you can get started in iOS 11 where just like we used to have core data and avfoundation we now have a new kit ml kit which is machine learning all you have to do is patch it a data set and it can produce a result it always just show you there what kind of input it is expecting and what kind of output it will give to you very very easy to implement recently in the bootcamp just a few days ago we created an app which you can just take a photo of anything and it will predict what that object it it can be a light a camera remote control a hot dog a phaser we had a lot of fun playing along with that in fact we spent almost half a day in playing it on with that app so yes Apple is trying hard so that everybody get an access to machine learning and everybody is able to design such apps possibilities with such kind of ml kit are endless and I can see a huge future there as well now one of the other thing that has impressed me a little bit not much is through JavaScript so the libraries has came out in the node.js and basically in the cold JavaScript as well that are able to do machine learning are they good not at all are they going to be good in future for sure I have a huge I'm optimistic I always see the future in some place because version one is always bad version two is always amazing so what I think the JavaScript have some future in machine learning but there is no such rigid proof right now that it's going to perform really well so I would say yes it may come up in the future somehow or maybe some library does come out of the blue and we might get something amazing so right now Python and iOS 11 are the two good ways of this is the condition right now in end of July 2017 surely this is going to change up in near future so these were all the views about what basically the machine learning is and learning was this an entire comprehensive thorough discussion about what is machine learning classifiers and tensors and like it of course not this was just an overview so that I can answer some of your questions and you can get some answers about machine learning and getting started and that if there's a trouble no nothing is the taboo anybody can learn machine learning programming or anything like that even if you are bad at math with practice you can become good in depth so that's all I'm saying here so that's it for this video and I know you have missed me quite a lot I have missed you too guys as well but now the constant videos are going to come up because I'll be staying home for a few days more so that means a lot more videos and don't forget to join me on Sunday life at every Sunday we do Sunday live and you can get the information about it on my Facebook page the links are in the description as well as on the screen so that's it for this video and I'll surely catch you up in",
            "videoid": "63NTeLmDANo",
            "viewCount": "445871"
        },
        "7ClLKBUvmRk": {
            "caption_exist": "T",
            "channel_id": "UC55-mxUj5Nj3niXFReG44OQ",
            "channel_title": "Platzi",
            "concepts": [],
            "description": "Hayd\u00e9 Mart\u00ednez (@haydemtzl), la profesora del Curso de Introducci\u00f3n a Machine Learning de Platzi, nos cuenta en este video de PlatziConf Online c\u00f3mo ha sido su carrera en el mundo de Machine Learning e Inteligencia Artificial.\n\nUno de los objetivos de Hayd\u00e9 es lograr explicarle su trabajo a cualquier persona de la manera m\u00e1s sencilla posible. Ella est\u00e1 convencida de que todos, sin importar nuestro background, somos capaces dominar esta \u00e1rea, una de las m\u00e1s demandadas en el mundo actual. \n\nSi quieres comprender estos temas con mayor profundidad entra ya al Curso de Introducci\u00f3n a Machine Learning en http://www.platzi.com/ia\n\n----------------------------------------------------------------------\nTodo esto y m\u00e1s, en http://platzi.com\n\n\n\n\u00a1Suscr\u00edbete a nosotros!\nFacebook: http://bit.ly/platzifb\nAqu\u00ed, en YouTube: http://bit.ly/mejoryt",
            "dislikeCount": "151",
            "duration": "PT14M48S",
            "likeCount": "2617",
            "published_time": "2017-10-08T14:58:51.000Z",
            "tags": [
                "platzi",
                "Hayd\u00e9 Mart\u00ednez",
                "Machine Learning",
                "PlatziConf",
                "Conf",
                "Inteligencia Artificial",
                "Robot",
                "@haydemtzl",
                "carrera",
                "curso",
                "ia"
            ],
            "thumbnail": "https://i.ytimg.com/vi/7ClLKBUvmRk/hqdefault.jpg",
            "title": "Todos podemos aprender Machine learning",
            "transcript": " [Music]  As I was saying, I'm going to this  conversation is going to be a little about  how was my journey to learn  machine learning and the things that I have  realized on the road as well as  some advice for all people  who are interested and so on  well a little bit of my story I  I started working since I was 17 years old  help in my house and why work  it felt like an adult person a  of the companies in which I worked was  a wholesale security articles  as circuit cameras on the  television access barriers sensors  etcetera and in this company it  they investigated the pininos of  image recognition and detection  of patterns although I do not currently  I had an idea that this was  related to artificial intelligence  of the machinery I only saw the group  of engineers as very people  intelligent that were there and within  this team I met an engineer that  he was the one who carried all the technical part  of this business  and this engineer made me be  most intelligent human that there was  known in my whole life and I decided  study and generate systems  computational to do as he  I studied at night to be able to continue  I am working during the day and ran into  something that I worked very well that  was that most people who  they studied at night they were already there  just to get the diploma and in  actually had a lot of experience in the  outside world and even though I already  I worked because I did not work in daily  I did not work in engineering stuff  so then I had to double the  efforts to reach the level of  the people that were there I nor  I had never even done a hello  world and knew nothing of the language of  programming or anything then what  I did was that I know that thousands of books of  the library and spent hours reading  from computer architecture to  programming networks or etcetera this what  I comment because I would like you to know what  anyone , regardless of the  background can come to match and  learning or be an engineer and good  finally after much effort  I managed to reach the level of my classmates  and these efforts made that too  obtained very good grades this  helped me a lot to get a scholarship to  study my specialty there is a phrase  I like to say that people laughed  from me when they go study me I 'm from  study but when I went to japan  outside of my specialty and nobody  he laughed at me  I went to work at age 20 hp and  22 years old I went to work at intel  these experiences in real life me  they did learn much more than what  there could be in a classroom and  much faster in 2015 I had the  opportunity to be selected by the  government of japan to go study a  specialty and I was also selected  for the course that most called me the  attention that was machine learning and  honestly I was not familiar  with this concept so it was a curve  pretty big learning and I stumbled  that most books  they explained very abstract  until one day I came across a book  that he had examples very visual examples  of code especially in python and  payton the programming language that  I had been using during the  last years in intel so this and  review probability and statistics me  they helped a lot to understand and really  understand the concept besides not  we have friends in japan and a lot that  do so most of the time I  I spent studying at the end of the  course one of my goals was to be able to  explain this concept in a way  much simpler not to run into  so many books and so many explanations so  elevated and that required both  advanced knowledge to be able  understand made me want to write my  own book develop a course what  outside in which I could explain  a much simpler way this to  people do not put it at a level where  we could all understand it and not just  certain people with certain  knowledge I never imagined I was going to  manage to speak in so many places and  explain it to so many people a lot  least see a course in plastic  When I arrive in Mexico one day visiting  a startup asked me if I could  explain that it was machine learning in 27  seconds I the truth is working on  a definition for my mom my mom  I constantly wondered is it is  what do you do in your job does not not  I can explain to your aunt why not  I understand then I started working  in an explanation in a presentation  in which I could encapsulate everything and  make it very simple not in two or three  prayers when they ask me this the  start or I use this explanation  to see how they worked or total that  this explanation they liked a lot and  they invited me to give a talk in their  star toc more in depth the theme not a  talk about explaining machine learning to  all the people who were  working with people who already do it but  they did not know what those people were doing  Not the truth, I consider myself very  lucky to see the invitation because to  from there a lot more people invited me  to give platt platt and invited me to do  this course and good today I am  here  with each conference I consider that I have  managed to improve the explanation more and more  Also, I feel like I could make it  much more concrete I have also been able  improve my skills in general and  end of the day I think that even though I  I talk a lot at conferences I think  I learn a lot more  when speaking that I think that what  you learn to me not  Well sure you are wondering  what was that explanation I said he did  that they will invite me to speak not so good  I always said that when you talk about  machine learning speaks of intelligence  artificial because because the intelligence  artificial is the attempt to make a  device or an application are as or  smarter than a human and machine  learning is a series of algorithms that  make your device or application  be artificially intelligent  we revise the intelligence again  device or an application so or more  smart that a human  and machine learning is a series of  algorithms that make your device  or application are artificially  Many years ago Alan Turing said that  when a computer made you believe  that he was a human when a computer  makes you believe that you were talking to  a human or interacting with a human  you could say that this computer was  intelligent artificially intelligent  then artificial intelligence is  an attributive adjective that is given  which is used to describe those  devices or applications that simulate  human intelligence through  machinery this means that  artificial intelligence is like a  car and machine learning is like  motor that makes it move machine  learning makes this device or  pensions are as or more intelligent  that a bad machine learning is the  technical the artificial intelligence is the  qualification or the way in which  describes those objects that stimulate  intelligence but good not the whole match  in learning is perfect and I want  show you one of the serious problems  with the following exercise  I want you to imagine a shoe you have  three seconds to imagine it 1 2  very well now I want you to tell me or  I want you to think how you imagined it  you imagined as the first image that is  a formal shoe the second image that  is a heel or the third image that is  a tennis myself personally when I  they ask that I imagined a shoe  I imagine the first image the shoe  formal but there are people who will imagine  the second or the third image this  it means that we all have concepts  different from similar things and as  developers we broadcast these  concepts to what we create now imagine  that I developed an application that  recognizes shoes and I only train her  recognize as shoes those that  they look like those of the first image  when you see an image of the second or the  third form of the shoes is not going to  recognize as shoes even though yes  they are  obviously this does not sound like a serious  problem at a glance you say good  good recognizes shoes or does not recognize  tennis is not much problem but imagine  a real life case where google  photos I release a file in which  the tool of google photos  automatically tagged the images  and once it is already in production this  feature when uploading a photo of a person  African American the algorithm labeled it  like a monkey here it seems  worrying not now imagine too  the case that they were in a convention  making a demo tool  speech recognition that worked  perfect to try it did not work  incredible everyone passed and they caused and  it worked excellent recognized the voice  no problems but the day when the  they tried with a woman's voice not  It worked because they realized that  he had never been trained with the voice of  women  this problem is called human pathways and  it is a very common problem that can be  face a person when developing a  device or a machine application  learning this means that I eat  human I have certain beliefs and I have  certain concepts that I'm going to  transmit to me to my program or  in certain other types of programs that do not  they involve machine line  it does not cause so much trouble but when  are you creating a device or a  application that will interact with  human beings with in a world  three-dimensional there are many things that  you have to take care to avoid this type  of problems that I just mentioned  I would like to tell you that if ever  you come to think that intelligence  artificial can end the world me  I would like you to think that behind each  artificial intelligence there is also a  human hand that has programmed this  means that from us the  developers depends on using the  artificial intelligence for good  the reason why I have martinez  I try so hard to share these  issues and where more and more people talk and  know of machine learning is so that more  people can develop and the more  people develop faster something will happen  that will cause machine learning to be  regulated because I think what  we need regular machine learning  well there are a lot of things that  are using in machine learning  for good there are no sensors that can  do everything we can see the detection  facial that came out I already had android and  that now came out on the new iphone but  also in several places of  research use sensors that read  waves to hold is using the  electroencephalogram and they have done things  wonderful how to control chairs  of wheels with thought among others  things but like the spectrum of things  good is super broad is equal  big the spectrum of bad things that  they can do  however here is another big dilemma what  that for me is good does not mean that  for you also be good obviously  I think that I and Hitler differ in  our definitions of the good and  someone has to define the concept of  what's good for the use of the machine  I think it's important to raise from  this moment two things  and an artificial intelligence reaches  be more intelligent than a human  then it also has to be more good  that a human and another thing that I believe  very important is that we should never  give endless power to a  artificial intelligence is to say always  we have to have the form of power  turn it off or unplug it or take away  batteries or whatever it is not this is what  I think we should do to avoid  problems in the future do not  and good, most people  think or say it is very difficult to do  due to the mathematical level that  need I think we should take it  that fear practicing algebra  probability and statistics making a  little data science databases  fine-tuning our programming logic  with that I believe that anyone  you can learn it if you remember me  it came from a background in which  I knew not to program, I was not born, there's a lot  people who tell me that I am very  intelligent but I was not born being a  genius or anything like that what I've  I achieved what I have achieved through  kill me hours studying and practicing  etcetera that's what I think has  taken to where I'm trying  too much in these things and I love you  answer some questions you think  machine learning is a lot of work  Yes it is  you think you have to study a lot  also but I think anyone  can achieve machine learning with  the right effort clear yes and  above all I think it will be worth it if  really you  one since you will have the opportunity to be  part of one of the technologies that go  to change or they are already changing  our world  if what you really want is  impact on the development of technologies  nowadays you have where to start  no match in learning can give you this  opportunity you can become  someone in a change agent of the world  of technology and so on ",
            "videoid": "7ClLKBUvmRk",
            "viewCount": "77688"
        },
        "Cr6VqTRO1v0": {
            "caption_exist": "T",
            "channel_id": "UCWN3xxRkmTPmbKwht9FuE5A",
            "channel_title": "Siraj Raval",
            "concepts": [
                [
                    "linear",
                    3
                ],
                [
                    "algorithm",
                    2
                ],
                [
                    "link",
                    2
                ],
                [
                    "head",
                    1
                ],
                [
                    "mode",
                    1
                ],
                [
                    "subset",
                    1
                ]
            ],
            "description": "How is a total beginner supposed to get started learning machine learning? I'm going to describe a 3 month curriculum to help you go from beginner to well-versed in machine learning. Its an accelerated learning plan, something i'd create for myself if I were to get started today, but I'm going to open source it for you guys. This curriculum will cover all the math concepts, the machine learning theory, and the deep learning theory to get you up to speed with the field as fast as possible. If anyone asks how to best get started with machine learning, direct them to this video! \n\nCurriculum from this video:\nhttps://github.com/llSourcell/Learn_Machine_Learning_in_3_Months\n\nPlease Subscribe! And like. And comment. That's what keeps me going. \n\nWant more education? Connect with me here:\nTwitter: https://twitter.com/sirajraval\nFacebook: https://www.facebook.com/sirajology\ninstagram: https://www.instagram.com/sirajraval\n\nMonth 1\n\nWeek 1 Linear Algebra\nhttps://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/\nWeek 2 Calculus\nhttps://www.youtube.com/playlist?list=PLZHQObOWTQDMsr9K-rj53DwVRMYO3t5Yr\nWeek 3 \nhttps://www.edx.org/course/introduction-probability-science-mitx-6-041x-2\nWeek 4 Algorithms\nhttps://www.coursera.org/courses?languages=en&query=Algorithm%20design%20and%20analysis\n\nMonth 2\n\nWeek 1 \nlearn python for data science\nhttps://www.youtube.com/watch?v=T5pRlIbr6gg&list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU\nMath of Intelligence\nhttps://www.youtube.com/watch?v=xRJCOz3AfYY&list=PL2-dafEMk2A7mu0bSksCGMJEmeddU_H4D\nIntro to Tensorflow\nhttps://www.youtube.com/watch?v=2FmcHiLCwTU&list=PL2-dafEMk2A7EEME489DsI468AB0wQsMV\n\nWeek 2 \nIntro to ML (Udacity)\nhttps://eu.udacity.com/course/intro-to-machine-learning--ud120\n\nWeek 3-4\nML Project Ideas\nhttps://github.com/NirantK/awesome-project-ideas\n\nMonth 3 (Deep Learning)\n\nWeek 1 \nIntro to Deep Learning\nhttps://www.youtube.com/watch?v=vOppzHpvTiQ&list=PL2-dafEMk2A7YdKv4XfKpfbTH5z6rEEj3\n\nWeek 2 \nDeep Learning by Fast.AI\nhttp://course.fast.ai/\n\nWeek 3-4 \nRe-implement DL projects from my github\nhttps://github.com/llSourcell?tab=repositories\n\nML people to follow on Twitter:\nhttps://www.quora.com/Who-should-I-follow-on-Twitter-to-get-useful-and-reliable-machine-learning-information\n\n\nJoin us in the Wizards Slack channel:\nhttp://wizards.herokuapp.com/\n\nAnd please support me on Patreon:\nhttps://www.patreon.com/user?u=3191693",
            "dislikeCount": "136",
            "duration": "PT10M5S",
            "likeCount": "11820",
            "published_time": "2018-03-02T11:42:24.000Z",
            "tags": [
                "how to learn machine learning",
                "learn machine learning free",
                "how to learn machine learning in 3 months",
                "machine learning in 3 months",
                "learn machine learning in 3 months",
                "learn machine learning online",
                "learn machine learning",
                "learn machine learning in 6 months",
                "learn machine learning for beginners",
                "learn machine learning from scratch",
                "machine learning tutorial",
                "machine learning course",
                "machine learning tutorial for beginners",
                "machine learning",
                "learn machine learning with python"
            ],
            "thumbnail": "https://i.ytimg.com/vi/Cr6VqTRO1v0/hqdefault.jpg",
            "title": "Learn Machine Learning in 3 Months (with curriculum)",
            "transcript": "  brace yourself you're about to feel to learn so hard hello world it's Suraj and the question I get asked the most by far is how do I get started with machine learning I've created a three-month guide to help you go from an absolute beginner to proficient in the art of machine learning and I'll describe it in this video it's for those who can only dedicate part time to learning since you either a have a job or B have to go to school but your if you're able to go full-time you can complete this in half the time this is something that I create for myself if I were to start learning AI today but I'm open sourcing it for you to help you out let's start by looking at the hiring page for deep mind arguably the world's leading institution when it comes to publishing state-of-the-art AI algorithms if we look under the research engineer position we'll see a description for what it takes to be a part of the team responsible for alphago the deep Q network and wavenet each of which revolutionized the field of AI the minimum qualifications are having a bachelor's in computer science or a related field strong knowledge of Python machine learning and algorithmic design no need to have a PhD or have published a ton of papers even under the preferred qualifications if we were to create a pie chart to try and understand the necessary topics for machine learning it would look something like this thirty five percent of it would consist of linear algebra twenty five percent would include probability theory and statistics fifteen percent would be calculus another fifteen percent would be algorithms and complexity and the last ten percent would be dedicated to data pre-processing knowledge we can build our own curriculum around this chart wait where to begin I've divided this curriculum up into three months the first month consists of math and algorithmic complexity the second month consists of machine learning and the third month consists of the most popular subset of machine learning deep learning but before we begin I want to first say that one of your daily tasks should be to keep up with the field so here are the best resources to do that first is my youtube channel I'm going to be pushing AI content here non-stop every single week so hit the subscribe button to get notified of new content if you haven't yet next is the machine learning subreddit it's a place where people working both in academia and in business on ML share their findings Twitter is also a really underutilized resource Twitter acts like a learning feed if you use it the right way follow really smart people and scrolling down your feed unlike most social platforms won't drain you in fact it will enrich you with knowledge ml researchers love to use Twitter there are some really good academic debates that happen there as well some examples of researchers I follow are Ilya sutskever Trent McConaughey Andrej Carpathia Andrew Trask Petera Biel Chris Ola and Nando de Freitas there are many more I'll link to them in the description hacker news is another must-have the audience is well versed in the technical details of the topics mentioned so you know that the only the best arguments rise to the top all of the resources I suggest are going to be video based I just learned so much better using videos and short form written content on the web and by using a plain text book that just lists equation after equation after equation with no real-life application now on to the first month learning the math we'll start with the portion that makes up the most of machine learning linear algebra one of the most popular courses on MIT OpenCourseWare website is the linear algebra course taught by Gilbert strong he's got a kind of infectious enthusiasm for this stuff and there are 35 video lectures available on YouTube as a playlist watch each one at 2x speed if possible 3x if you can handle it take the time to handwrite your notes as you watch not necessarily for your record but just ingrain what you're learning into your head that much more efficiently studies show that taking notes by hand really does enhance your brain's ability to retain the concepts you're learning then you can move on to calculus 3 blue 1 brown has an incredible playlist called the essence of calculus grants a friend of mine and I can vouch for his work he'll teach you calculus in a way that makes you feel like you could have invented it yourself and when it comes to probability and statistics EDX has a really good course called the science of uncertainty taught by MIT you'll also find an awesome course on algorithmic design and analysis on EDX taught by UPenn dedicate a week to each one of these courses even though they say they take longer we're practicing what's called accelerated learning two to three hours every single day of undistracted absorption you are going to be like a sponge watched a lecture at a faster speed take notes as you go and complete one project at the end of every week preferably one of the harder ones at the end of the course to complete yourself each of these subjects has a one-page cheat sheet you can find on the web anyway don't feel bad if you complete a course faster than what the authors suggest learning is just about downloading data into your brain you can use tools to accelerate that process now we're ready for month two machine learning I've got three playlists for you to watch in order learn Python for data science the math of intelligence and intro to tensorflow then check out Udacity z-- free intro to machine learning course it's pretty well made for the next two weeks you're gonna pick some cool machine learning projects to complete and code them yourself using Python I've got a great compilation of ideas in the form of a github link to help you this is gonna help you develop a sense of when to use a specific machine learning model and how it would work for an application specific use case I also recommend participating in a casual competition it's a great way to learn and earn money at the same time it's this ability to categorize certain types of problem certain types of machine learning models that well-paid machine learning consultants provide for companies if you can build this intuition yourself you'll be much better off I'd suggest picking and choosing two projects a week and building each from scratch this will give you hands-on experience with the pillars of machine learning including optimization data pre-processing types of learning data set splitting and model evaluation this is all about turning sponge mode into code and a lot of the art of data science lies in the dozens of micro decisions you'll make to solve a specific problem this is the perfect time to practice making those micro decisions and evaluating the consequences of each side can't learn is a really easy framework to quickly implement some machine learning models you'll find that over time to complete a problem you'll be asking yourself the same questions how to best split the data what are the best parameters etc at the end of this month you should give yourself a final project and that would be to code up the simple gradient descent algorithm from scratch it's the most used optimization strategy in machine learning if you can code this from scratch literally everything else becomes easier alright on to the third month deep learning the specific algorithm called a neural network when given vast quantities of data and vast amounts of computing power outperforms almost everything else almost every time and that's why it's so popular check out my intro to deep learning course on YouTube then check out fast ais deep learning course 36 hours of high quality lessons for free for the last two weeks just implement deep learning app after deep learning app over this time period you should have at least 5 to 10 projects related to machine learning and deep learning on your github you'll be surprised how fast you can go from learning about simple perceptrons to state-of-the-art models the difference being usually just a few minor tweaks in the architecture the deep learning space as of now is rich with technical literature and some of the best stuff is free at the end of these three months you should feel confident enough to take your knowledge and either a work in the field as a machine-learning engineer B start a consulting firm or C start your own product based AI company just figure things out as you go stop telling yourself that you can't learn it or you're not smart enough remember learning is a life long process no matter how old you are or where you're from you can get to the point where you can make an impact in this field thanks to the internet and look if you don't like my learning plan make your own do what suits you best and better yet get a friend to commit to the same learning path as you that way you can keep each other in check and not drop out as long as you're giving yourself positive feedback along the way you won't give up AI is going to eat every single industry and change what it means to be human it's all happening very very fast either you understand it or you don't which side do you want to be on same so get started on your learning journey I'm rooting for you wizard please subscribe for more AI and blockchain videos and for now I've got a course to launch so thanks for watching",
            "videoid": "Cr6VqTRO1v0",
            "viewCount": "194444"
        },
        "DZ7xuZ1-uh8": {
            "caption_exist": "T",
            "channel_id": "UCTXLMW9262FBpcQTVNXQ8Aw",
            "channel_title": "Art of Engineer",
            "concepts": [
                [
                    "linear",
                    3
                ],
                [
                    "operations",
                    2
                ],
                [
                    "matrix",
                    2
                ],
                [
                    "language",
                    1
                ]
            ],
            "description": "Hello Everyone!!!\n\nLet's check out what are the 5 must-have skills to become a machine learning engineer.\n\nFirst, let's understand what machine learning is. \nIn simple words.,\nMachine learning is all about making the computers to perform intelligent tasks without explicitly coding. This is achieved by training the computer with lots and lots of data.\n\nFor example: Detecting whether a mail is a spam or not, recognizing handwritten \ndigits, Fraud detection in Transactions... and many such applications...\n\nNow let's see what are the top 5 skills to get a machine learning job.\n\n1). At number 1, we have\nMath Skills: Under math skills, we need to know probability and statistics, linear algebra\nand calculus.\n\nProbability and Statistics: Machine learning is very much closely related to statistics.  \nYou need to know the fundamentals of statistics and probability theory,\ndescriptive statistics, Baye's rule and random variables,  \nprobability distributions,\nsampling, hypothesis testing, regression and decision analysis.\n\nLinear Algebra: You need to know how to with matrices and some basic operations on matrices such as matrix addition, \nsubtraction, scalar and vector multiplication,\ninverse, transpose and vector spaces. \n\nCalculus: In calculus, you need to know the basics of differential and integral calculus.\n\n\n2). At number two we have \nProgramming skills: A little bit of coding skills is enough. But it's preferred to have the knowledge of data structures, algorithms and Object Oriented Programming (or OOPs) concepts.\n\nSome of the popular programming languages to learn for machine learning is Python, R, Java, and C++. \n\nIt's your preference to master any one programming language. But its advisable\nto have a little understanding of other languages and what their advantages and disadvantages are over your preferred one.\n\n\n3). At number 3 we have \nData engineer skills: Ability to work with large amounts of data (or big data), Data preprocessing, \nthe knowledge of SQL and NoSQL, ETL (or Extract Transform and Load) operations,\ndata analysis and visualization skills. \n\n4). Next, we have \nKnowledge of Machine Learning Algorithms: you should be familiar with popular machine learning \nalgorithms such as linear regression, logistic\nregression, decision trees, random forest, clustering (like K means, hierarchical), reinforcement learning and neural networks.\n\n5). And Finally,\nThe Knowledge of Machine Learning Frameworks:\nYou Should be Familiar with popular machine learning frameworks such as sci-kit learn, tensorflow, Azure, caffe, theano, spark and torch.\n\nMusic: www.bensound.com",
            "dislikeCount": "4",
            "duration": "PT4M55S",
            "likeCount": "264",
            "published_time": "2018-02-07T01:06:12.000Z",
            "tags": [
                "machine learning",
                "data scientist",
                "deep learning",
                "artificial intelligence",
                "5 must have skills to become machine learning engineer",
                "5 skills needed to get machine learning job",
                "machine learning job skills"
            ],
            "thumbnail": "https://i.ytimg.com/vi/DZ7xuZ1-uh8/hqdefault.jpg",
            "title": "5 Must Have Skills To Become Machine Learning Engineer",
            "transcript": "  hello everyone let's check out what are the fine must-have skills to become a machine learning engineer first let's understand what machine learning is in simple words machine learning is all about making the computers to perform intelligent tasks without explicitly coding this is achieved by training the computer with lots and lots of data for example detecting whether a mail is spam or not recognizing a handwritten digit fraud detection in transactions and many such applications now let's see what are the top five skills to get a machine learning job at number one we have math skills under math skills we need to know the probability and statistics linear algebra and calculus probability and [Music] machine learning is very much closely related to statistics you need to know the fundamentals of statistics and probability theory descriptive Bayes rule and random variables probability distributions sampling hypothesis testing regression and decision analysis linear algebra you need to know how to work with matrices and basic operations on matrices such as matrix addition matrix subtraction scalar and vector multiplication inverse transpose and vector spaces calculus in calculus you need to know the bank the basics of differential and integral calculus at number two we have programming skills a little bit of coding skills is enough but it's preferred to have the knowledge of data structures algorithms and object-oriented programming or Earth's concepts some of the popular programming languages to learn for machine learning is Python or Java and C++ it's your preference to master any one programming language but it's advisable to have a little understanding of other languages and what their advantages or disadvantages are over your preferred at number three we have data engineer skills ability to work with large amounts of data or Big Data data pre-processing the knowledge of sequel and no sequel ETL or extract transform and load operations data analysis and visualization skills next we have the knowledge of machine learning algorithms you should be familiar with popular machine learning algorithms such as linear regression logistic regression decision trees random forests clustering like paintings or hierarchical clustering reinforcement learning and neural networks and finally the knowledge of machine learning frameworks popular machine learning frameworks such as scikit-learn tensorflow asure cafe piano spark and torch",
            "videoid": "DZ7xuZ1-uh8",
            "viewCount": "7961"
        },
        "HcqpanDadyQ": {
            "caption_exist": "T",
            "channel_id": "UCJS9pqu9BzkAMNTmzNMNhvg",
            "channel_title": "Google Cloud Platform",
            "concepts": [
                [
                    "key",
                    3
                ]
            ],
            "description": "Got lots of data? Machine learning can help! In this episode of Cloud AI Adventures, Yufeng Guo explains machine learning from the ground up, using concrete examples.\n\nAssociated article \"What is Machine Learning?\": https://goo.gl/Dbxo6M\n\nWatch more episodes of AI Adventures here: https://goo.gl/UC5usG\n\nTensorFlow: http://tensorflow.org\nCloud ML Engine: http://cloud.google.com/ml-engine/\n\nDon't forget to subscribe to the channel! https://goo.gl/S0AS51",
            "dislikeCount": "23",
            "duration": "PT5M23S",
            "likeCount": "2303",
            "published_time": "2017-08-24T21:51:40.000Z",
            "tags": [
                "Machine Learning",
                "TensorFlow",
                "Big Data",
                "Cloud",
                "Artificial intelligence",
                "AI",
                "what is machine learning",
                "machine learning with gcp",
                "gcp maching learning",
                "cloud and machine learning",
                "ML",
                "ai adventures",
                "product: cloud",
                "Location: MTV",
                "Team: Scalable Advocacy",
                "Type: DevByte",
                "GDS: Full Production",
                "Other: NoGreenScreen",
                "fullname: Yufeng Guo"
            ],
            "thumbnail": "https://i.ytimg.com/vi/HcqpanDadyQ/hqdefault.jpg",
            "title": "What is Machine Learning?",
            "transcript": "  the world is filled with data a lot of data pictures music words spreadsheets videos and it doesn't look like it's going to slow down anytime soon machine learning brings the promise of deriving meaning from all of that data arthur c clarke famously once said any sufficiently advanced technology is indistinguishable from magic I've found machine learning not to be magic but rather tools and technology and you can utilize to answer questions with your data this is cloud AI adventures my name is Yu Feng Guo and each episode we will be exploring the art science and tools of machine learning along the way we'll see just how easy it is to create amazing experiences and yield valuable insights the value of machine learning is only just beginning to show itself there's a lot of data in the world today generated not only by people but also by computers phones and other devices this will only continue to grow in the years to come traditionally humans have analyzed data and adapted systems to the changes in data patterns however as the volume of data surpasses the ability for humans to make sense of it and manually write those rules we will turn increasingly to automated systems that can learn from the data and importantly the changes in data to adapt to a shifting landscape we see machine learning all around us in the products we use today however it isn't always apparent that machine learning is behind it all while things like tagging objects and people inside of photos are clearly machine learning at play it may not be immediately apparent that recommending the next video to watch is also powered by machine learning of course perhaps the biggest example of all is Google search every time you use Google search you're using a system that has many machine learning systems at its core from understanding the text of your query to adjusting the results based on your personal interests such as knowing which results to show you first when searching for Java depending on whether you're a coffee expert or developer perhaps you're both today machine learnings immediate applications are already quite wide-ranging you including image recognition fraud detection and recommendation systems as well as text and speech systems to these powerful capabilities can be applied to a wide range of fields from diabetic retinopathy and skin cancer detection to retail and of course transportation in the form of south parking and self-driving vehicles it wasn't that long ago that when a company or product had machine learning in its offerings it was considered novel now every company is pivoting to use machine learning in their products in some way it's rapidly becoming well an expected feature just as we expect companies to have a website that works on your mobile device or perhaps an app the day will soon come when it will be expected that our technology will be personalized insightful and self-correcting as we use machine learning to make human tasks better faster and easier than before we can also look further into the future when machine learning can help us do tasks that we never could have achieved on our own thankfully it's not hard to take advantage of machine learning today the tooling has gotten quite good all you need is data developers and a willingness to take the plunge for our purposes I've shortened the definition that's just five words using data to answer questions while I wouldn't use such a short answer for an essay prompt on an exam it serves a useful purpose for us here in particular we can split the definition into two parts using data and answer questions these two pieces broadly outline the two sides of machine learning both of them equally important using data is what we were referred to as training well answering questions is referred to as making predictions or inference now let's drill into those two sides briefly for a little bit training refers to using our data to inform the creation and fine-tuning of a predictive model this predictive model can then be used to serve up predictions on previously unseen data and answer those questions as more data is gathered the model can be improved over time and new predictive models deployed as you may have noticed the key component of this entire process is data everything hinges on data data is the key to unlocking machine learning just as much as machine learning is the key to unlocking that hidden insight in data this was just a high-level overview of machine learning why it's useful and some of its applications machine learning is a broad field spanning an entire family of techniques were inferring answers from data so in future episodes William to give you a better sense of what approaches to use for a given data set and question you want to answer as well as provide the tools for how to accomplish it and in our next episode we'll dive right into the concrete process of doing machine learning in more detail going through a step by step formula for how to approach machine learning problems [Music]",
            "videoid": "HcqpanDadyQ",
            "viewCount": "137911"
        },
        "I74ymkoNTnw": {
            "caption_exist": "T",
            "channel_id": "UCQALLeQPoZdZC4JNUboVEUg",
            "channel_title": "Jabrils",
            "concepts": [
                [
                    "matrix",
                    14
                ],
                [
                    "functions",
                    3
                ],
                [
                    "mean",
                    2
                ],
                [
                    "green",
                    1
                ],
                [
                    "string",
                    1
                ],
                [
                    "type",
                    1
                ],
                [
                    "theory",
                    1
                ],
                [
                    "language",
                    1
                ],
                [
                    "shock",
                    1
                ],
                [
                    "shower",
                    1
                ],
                [
                    "control",
                    1
                ],
                [
                    "resource",
                    1
                ],
                [
                    "list",
                    1
                ],
                [
                    "array",
                    1
                ],
                [
                    "flow",
                    1
                ],
                [
                    "light",
                    1
                ]
            ],
            "description": "The #1 question I get is how to get started with Machine Learning, so join me today as we talk about this! :D\n\nSUBSCRIBE FOR MORE SEFD SCIENCE: http://sefdstuff.com/science\n\nPlease follow me on social networks:\ntwitter: http://sefdstuff.com/twitter\ninstagram: http://sefdstuff.com/insta\nreddit: https://www.reddit.com/r/SEFDStuff/\nfacebook: http://sefdstuff.com/faceb\n\nFavorite Resources\n-----\nActivation Functions -  https://en.wikipedia.org/wiki/Activation_function\nLuis Serrano's Neural Network Series (REALLY GOOD) - https://www.youtube.com/watch?v=UNmqTiOnRfg&list=PLs8w1Cdi-zvavXlPXEAsWIh4Cgh83pZPO\nGiant_Neural_Network's Neural Network Series (REALLY GOOD) -  https://www.youtube.com/watch?v=ZzWaow1Rvho&list=PLxt59R_fWVzT9bDxA76AHm3ig0Gg9S3So\nMacheads101's Neural Network series - https://www.youtube.com/watch?v=OypPjvm4kiA&list=PL3XtGMELeTxytyFKrUu87EudAJiO4XK0u\n3Blue1Brown's Neural Network Series - https://www.youtube.com/watch?v=aircAruvnKk&list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi\nHugo's Neural Network Series - https://www.youtube.com/watch?v=SGZ6BttHMPw&list=PL6Xpj9I5qXYEcOhn7TqghAJ6NAPrNmUBH\nJames Mccaffrey Talk (A BIT OUTDATED INFORMATION BUT STILL A FUN ONE)- https://www.youtube.com/watch?v=-zT1Zi_ukSk\n\nImportant Maths\n-----\nVectors (explained with Linear Algebra): https://www.khanacademy.org/math/linear-algebra/vectors-and-spaces\nVectors (explained with PreCal): https://www.khanacademy.org/math/precalculus/vectors-precalc\nMatrices: https://www.khanacademy.org/math/precalculus/precalc-matrices\nSequences: https://www.khanacademy.org/math/precalculus/seq-induction\nDerivative Rules: https://www.khanacademy.org/math/ap-calculus-bc/bc-derivative-rules\n\n\nMaths that will help\n-----\nAlgebra Functions: https://www.khanacademy.org/math/algebra/algebra-functions\nQuadratics: https://www.khanacademy.org/math/algebra/quadratics\nIrrational: https://www.khanacademy.org/math/algebra/rational-and-irrational-numbers\nAnalyzing Categorical Data: https://www.khanacademy.org/math/statistics-probability/analyzing-categorical-data\n\nREMEMBER TO ALWAYS FEED YOUR CURIOSITY",
            "dislikeCount": "102",
            "duration": "PT10M22S",
            "likeCount": "6492",
            "published_time": "2018-02-20T18:00:01.000Z",
            "tags": [
                "SEFD",
                "San Diego",
                "SEFD Sci",
                "Curiosity",
                "Education",
                "documentary",
                "AI",
                "Machine Learning",
                "math",
                "ML",
                "matrix",
                "maths",
                "mathematics",
                "tutorial",
                "computer science",
                "software engineer",
                "gaming",
                "video games",
                "calculus",
                "neural network",
                "tensorflow",
                "artificial intelligence",
                "deep learning",
                "ai",
                "machine learning tutorial",
                "machine learning",
                "f(x)",
                "super f(x)"
            ],
            "thumbnail": "https://i.ytimg.com/vi/I74ymkoNTnw/hqdefault.jpg",
            "title": "\ud83d\udda5\ufe0f HOW TO GET STARTED WITH MACHINE LEARNING!",
            "transcript": "  best advice for someone starting to learn ml how can a 15 year old learn programming in AI so you want to know the best way to get started with machine learning do you hey guys see what I did there I opened the video sing the title of the video that has to be the equivalent of using the title of a movie within a movie what if this is as good as it gets moving on so this is the number one question that I get these days so I thought this week it'd be a good idea to take a step back and address this try and help some of you guys out so what's the best way to unfortunately I don't know how to answer that you're all unique individuals with your own unique learning requirements so on that note remember always feed your curiosity of course I'm not gonna leave y'all high and dry like that but I'm also not gonna answer that question because simply put I'm just not qualified however I can't talk about what worked for me for getting started with machine learning and just hope that it's helpful enough for some of you guys so let's get it's 2017 and I see this machine learning demo from sethbling showcasing the mah rio bot that he made using machine learning algorithms it was able to learn and overtime play Super Mario World on its own I was completely stunned with a crazy mix of emotions following this I've seen some other neural network bots that others made for other games then I came across the Kari Khe Bobby old machine learning project then the Starcraft machine learning project some kid had made some kind and Wes Rapp lsdm project the open AI League of Legend machine learning project index crazy gta5 machine learning projects and yeah enough was enough I had to learn machinery this stuff was just what hey too cool so I installed tensor flow that night download us some code from cindex and had absolutely not a clue what was going on in the script the neural network did successfully turn the model using the amoenus data set but every single modification that I did to the code resulted in errors now this was partly due to me being completely freshly Python syntax but incomparably more so due to knowing absolutely nothing about how to write no networks so I took a step back and did what any season newbie would do I did a quick google search for how to write neural networks and what I found at the time was more humble jumbo math lingo and symbols that literally looked like an alien language to me take your perception with the sigmoid activation thoughts of transpose by the product of the derivatives Delta victimizations propagated backwards through time - resulting in zarg Larr no disrespect but I have absolutely no idea what the hell you're talking about at this point I was feeling incredibly defeated but I refused to take no for an answer I've got a dream to fulfill that's when I came across an dreams machine learning course on Coursera and whoa my great goodness that course was also written in zarg lore I was able to get past the first couple chapters or however it's organized with no problem but shortly after that Andrew started speaking as our guard now guys make no mistake about it if you're starting your machine learning adventure like I did there's going to be a huge vocabulary shock most of your confusion will come from not understanding the vocabulary trust me and after realizing this I needed to change up my learning tech because if I were to make it out alive and so I changed my focus this Biggs art learns dead there are many terms and symbols that will recur over and over again that I will get stuck on terms like vector some matrix activation function propagation different types of learning etc I've been working with vectors for a while and I'll thanks the unity3d but does it mean the same in this context well let me research and find out turns out it doesn't mean the same thing for the most part simply put a vector is simply a 1 by n matrix what the hell is a strange East symbol and how is it calculated well let me also research that and find out it turns out that this string G symbol is actually the capital Greek character Sigma and it's just a mathematical way to indicate the summation of an array or matrix vector or however you wish the index matrix multiplication how do you multiply all of these numbers with all well let me research that as well and find out it turns out there's a particular structure to matrix multiplication you have to multiply the columns of matrix a by the rows of matrix B and due to this matrix B has to have the same number of rows as matrix a has columns your result will be a matrix the same size as matrix B and to calculate this new matrix you just calculate all the products from each row of a times column B a lot easier than you probably thought and this was the process that did for months whenever I felt like I got good enough on understanding some material say how to do matrix multiplication for example I'd revisit some of my favorite machine learning resources links are in the description to see if they made any more sense I was so surprised how all of a sudden I was able to slightly better understand this our glare give me some shower glare yeah and whenever it stopped making sense again I'd isolate what I was having a hard time understanding say for example sigma rhoi and other activation functions type L a bunch of questions that I have regarding that and research that independently speaking of which huge shout out to Khan Academy comm this I can teach you just about all the mathematical tools that you'll need to write your own machine learning algorithms though you'll have to create your own curriculum in the description I'll just list a bunch of important match that you need to learn or something like that anywho I learned just about all the math from practicing on Khan Academy which actually gives me a good point to make if you ever get to the point of writing you're going to be given formulas and pseudocode most of the time sorry Clark Hawaii you are not wanted right now man so with that I'd say the best way to learn how to write machine learning algorithms is to get better at understanding pseudocode how to calculate them and all of its various interchangeable indices for example when you get to derivatives it can be written like this f of X with the apostrophe or prime somewhat the end or like this change in Y with respect to X dy over DX they are both calculated the exact same way but if you're unaware you could get confusing seeing one or the other most of the times in my experiences that will be pretty clear with their pseudocode but if they aren't well they're probably a bit too fluent in czar glory to all devs creating a resource meant for teaching please stay aware of this and please help the computer and that's pretty much the basics you now have the exact recipe for machine learning success that I used of course this is just an overview because you're essentially asking me to squeeze nine months of studying into nine minutes but at least you're now equipped with something besides all that information one of the best pieces of advice that I can give you is to start off with a simple feed-forward neural network example and here's a good one make a textcolor predictor that when you feed it red green and blue values as inputs try to train it to predict if either dark text or light text should be you / this color to make it readable I think this is a great simple project to focus on to learn the basics and trust me when I say this try to write your neural network from the very beginning I'm talking day one right once this video ends in fact boot up your IDE right now because it's cool and all to understand how to write neural networks in theory but writing one practically is a totally different rodeo all together you'll go to write there's no network you'll get stuck and boom there you go you have your first question to research and then just keep up this process until you're successful I super wish I had this advice from the start I could have probably cut the time it took me to learn in understanding how to convert the pseudo code into your favorite languages is honestly the most important thing to learn there isn't a one-size-fits-all neural network in fact when you learn how to write neural networks from a bunch of different teachers please note they're not always going to be using the same number of inputs and hidden layer nodes activation functions might not be the same some might say bias not bias yeah this is why pseudo codes really important at some point you'll need to rely on others research and code if you really want to truly be able to have a great grasp on how to write your own machine and algorithms especially at the fact that this space is still open researching there's something new announced almost every week if it was like so keep that in mind and the last important piece of advice that I want to share is you don't have to take this round they're put into perspective it's like computers if you really wanted to you could build a computer from scratch but you can also just buy a fully made computer and they'll both do the same thing in the end I personally wanted to learn how to make neural networks from scratch because I am an insane control freak but there are things like tensorflow pi torch the a no carrots and other machine learning frameworks that are just like the fully made computer metaphor you can watch the turtles and jump right into how to use these you won't have to worry too much about things like derivatives and matrix multiplication activation functions those frameworks were for the most part take care of the heavy lifting for you but of course the trade-off is that taking this route when something inside breaks or isn't working right you could have a hard time figuring out what's going on really it's all a matter what you're in it for alright guys hope this episode really helps you all out if you have further questions just leave them in the comment section and I might make a follow up button that gonna help support this channel please do one or all the following please subscribe to this channel if you haven't already please hit that Bell icon to be notified when I upload a new video please leave a like on this video and come follow me on the social needs all this stuff helps the channel grow a lot more than you probably feel but whatever the case may be but always eg curiosity [Music]",
            "videoid": "I74ymkoNTnw",
            "viewCount": "96269"
        },
        "KytW151dpqU": {
            "caption_exist": "T",
            "channel_id": "UCy5znSnfMsDwaLlROnZ7Qbg",
            "channel_title": "Dot CSV",
            "concepts": [
                [
                    "mean",
                    3
                ],
                [
                    "language",
                    2
                ],
                [
                    "arm",
                    1
                ],
                [
                    "key",
                    1
                ],
                [
                    "walk",
                    1
                ],
                [
                    "head",
                    1
                ]
            ],
            "description": "Antes de profundizar en el apasionante mundo de la Inteligencia Artificial, hay que conocer bien por donde nos movemos. Hoy traigo un mapa conceptual con algunos de los conceptos m\u00e1s importantes y que con mayor confusi\u00f3n son utilizados.\n\nDisfruta y comparte!\n\n---\nFuentes:\n\n[Pr\u00f3ximamente]\n---\n\nB\u00fascame tambi\u00e9n en:\n\n- Facebook : https://www.facebook.com/AI.dotCSV/\n- Twitter: https://twitter.com/dotCSV\n- Patreon: https://www.patreon.com/dotcsv\n\n-- \u00a1M\u00c1S CIENCIA! ---\n\nEste canal forma parte de la red de divulgaci\u00f3n de SCENIO. Si quieres conocer otros fant\u00e1sticos proyectos de divulgaci\u00f3n entra aqu\u00ed:\n\nhttp://scenio.es/colaboradores\n\n#Scenio\n\n---\n\n[Si no te quieres perder nada, adem\u00e1s de suscribirte te recomiendo que le des a la campana que se encuentra al lado del bot\u00f3n de suscribirte]",
            "dislikeCount": "3",
            "duration": "PT7M47S",
            "likeCount": "550",
            "published_time": "2017-11-01T20:53:19.000Z",
            "tags": [
                "inteligencia",
                "artificial",
                "ai",
                "ia",
                "machine",
                "learning",
                "vs",
                "aprendizaje",
                "profundo",
                "deep",
                "redes",
                "neuronales",
                "neural",
                "network",
                "deeplearning",
                "big",
                "data",
                "datos",
                "masivos",
                "inteligencia artificial",
                "dotcsv",
                "informatica",
                "divulgaci\u00f3n",
                "ciencia",
                "tecnolog\u00eda",
                "mapa",
                "conceptual",
                "aprendizaje autom\u00e1tico",
                "diferencias",
                "comparaci\u00f3n",
                "conceptos",
                "mapa conceptual",
                "computaci\u00f3n",
                "data science",
                "algoritmos",
                "cerebro",
                "csv",
                ".csv",
                "scenio"
            ],
            "thumbnail": "https://i.ytimg.com/vi/KytW151dpqU/hqdefault.jpg",
            "title": "\u00bfQu\u00e9 es el Machine Learning?\u00bfY Deep Learning? Un mapa conceptual | DotCSV",
            "transcript": " [Music]  if we are going to start a trip to the  entrails of the field of intelligence  artificial before we should know well the  terrain that we are moving  and for that we need a map I do not  I mean a physical map but a map  conceptual to have clear in our head  exactly what we mean when  we talk about artificial intelligence  machine learning neural networks big  data or deep learning  many concepts that are usually  overlap or are interpreted in a way  different and in the end they end up being  used with much confusion we are going to  see them  actually try to give a definition  Exactly what intelligence is  artificial is a very complicated task  especially since it is a concept that  depends on the very definition of  intelligence that continues today  having multiple interpretations by  this happens when we want  try to define what is the  artificial intelligence we are  also with many authors that the  define in their own way if we take all  these definitions and we extract an idea  common we have that intelligence  artificial is the his field discipline  of computing that seeks creation  of machines that can mimic  smart behaviors these  behaviors can be very diverse  drive to analyze patterns  recognize voices or win games are  many ways in which a machine  can simulate a behavior  smart and we have more and more  examples of how in certain areas they achieve  achieve a higher performance than the human  but that makes them more capable  that we good not exactly catch  any of these guides that stand out  in a very specific domain and try  to perform another task you will see that the  result that you get is disastrous  this ability to be able to perform  multiple tasks is what allows us  at the same time thinking about seeing and  talk when for example let's  chatting down the street with a friend and it's  a very coveted feature that a  today we continue to investigate  all intelligence departments  artificial this brings us a first  Classification of the types of aunts  weak and strong  we talk with artificial intelligence  It is weak to refer to those  systems that can only meet  with a very limited set of tasks  for example, however much you have taught  to your robot to walk as you try to do  something different like shutter a ball  you may not get the result  expected on the contrary the strong  they refer to those aunts that are  able to be applied to a wide variety  of problems and different domains  you have to know that today all  our guides are still classified in  the first group for much that hollywood  has reached the second already many ago  years  let's go back to the definition of  before it is important to highlight what  imitate smart behaviors  because it is the key to understanding the  rest of concepts that we are going to try  note that imitating does not mean that said  behavior is essentially a  cognitive behavior ie I  I can program in a classic way the  movements of a robotic arm to  always make the same movement  that in principle does not seem very  smart since the logic of  movement of the programmed I but without  However, this fits within the  definition that we have given since in  appearance the machine performs a  intelligent behavior seen like this  within the field of intelligence  artificial we can find  different subcategories that respond to  different intelligent behaviors  for example as we just mentioned  if you look at the capacity of  move and adapt to the environment we try  with the field of robotics or if we  we refer to the ability to understand the  language we have the field of the natural  language production or the ability to  to be able to speak a field in which  study both the voice conversion to  text or text- to- speech conversion  all these capabilities make up fields  of own studies within the world of  artificial intelligence but without  However, if there is a capacity that  truth defines us as agents  smart is the ability to learn  that is, the machine learning  the match in learning or learning  automatic is the branch of intelligence  artificial studying how to equip  learning ability machines  understood this as the generalization  of knowledge from a set  of experiences this learning as already  explains in a previous video you can  be divided into three different groups  unsupervised supervised learning and  reinforced  therefore we are already clear that the margin  learning is a discipline within  field of artificial intelligence but  it is not a discipline anybody is a  nuclear component that actually  relationship connects with the rest of  categories because obviously because  all other capabilities can be  limited either because someone has  programmed or much more interesting  because the system itself has learned  to perform the wolves by getting one thing  is to program a machine so you can  move and other very different  program it to learn to move  It is also not the same to program what  elements make up a face that  automatically learn what is a face  this paradigm shift what does  interesting to the maximum learning and for  it is very common to confuse the part by  the whole and say that intelligence  artificial and machine learning is the  Luckily this same thing you know the  difference  within the match in learning we  we find a new world where  There are different techniques that serve  to cover different types of  applications for example we have  techniques such as decision trees  regression models models of  clustering techniques classification  and many more others however if  one of these techniques has given fame to  field of may in learning during  last decade this has been the networks  neuronal  the interesting thing about neural networks  is that they are able to learn in a way  hierarchized is to say the information is  learn by levels where the first  layers learn very concrete concepts  as for example that is a screw a  mirror a wheel in the layers  later information is used  previously learned to learn  more abstract concepts for example a  car a truck a motorbike this makes a  As we add more layers the  information that is learned is every time  more abstract and interesting and how many  layers we can put as there is no limit and  the tendency is that every time these  algorithms add more and more layers  becoming algorithms every time  more complex this increase in the  number of layers and in complexity is  what makes these algorithms are  known as deep algorithms  sure this from the dealer ning or  deep learning I've already heard  before and that is a concept that has been  very fashionable in recent years  but we really need these  techniques so complex because the reality  is that if you think these techniques are  train and learn from the  data and we are currently  immersed in the information age with  the arrival of digitization the  cheapening of devices  storage and a change of mentality  at the time of appreciating the value of  data we have entered a trend of  accumulate more and more data what has been  called big data for both and for  summarize we have that the big data does  reference to the phenomenon of accumulating  large amounts of data though  It is also commonly used to refer  to the process of analyzing all of these  Data from the moment in which two  catch until you transform them into  knowledge for this are required of  powerful and complex techniques as per  example deep learning techniques these  they are nothing more than a vitamin version of  neural networks a family of  automatic learning algorithms that  have given a new resurgence to the field of  mas\u00edn learning and therefore to the field of  Artificial intelligence is now  Clear ",
            "videoid": "KytW151dpqU",
            "viewCount": "6437"
        },
        "P5wcE4IwKgQ": {
            "caption_exist": "T",
            "channel_id": "UCJS9pqu9BzkAMNTmzNMNhvg",
            "channel_title": "Google Cloud Platform",
            "concepts": [
                [
                    "flow",
                    7
                ],
                [
                    "bucket",
                    4
                ],
                [
                    "control",
                    1
                ],
                [
                    "node",
                    1
                ],
                [
                    "queue",
                    1
                ],
                [
                    "link",
                    1
                ],
                [
                    "cluster",
                    1
                ],
                [
                    "list",
                    1
                ]
            ],
            "description": "Join Fei and Ivan as they talk to us about the benefits of running your TensorFlow models in Kubernetes using Kubeflow. \n\nWorking on a cool project and want to get in contact with us? Fill out this form \u2192 https://goo.gl/7mKxo2\n\nDon't forget to subscribe to the channel! \u2192 https://goo.gl/UzeAiN",
            "dislikeCount": "1",
            "duration": "PT5M33S",
            "likeCount": "41",
            "published_time": "2018-05-18T22:18:04.000Z",
            "tags": [
                "machine learning on kubernetes with kubeflow",
                "machine learning on kubernetes",
                "kubernetes",
                "kubeflow",
                "machine learning",
                "benefits of running TensorFlow models in Kubernetes",
                "TensorFlow",
                "ML",
                "training models",
                "deployment models",
                "machine learning kubernetes",
                "distributed training",
                "CPU training",
                "kubernetes cluster",
                "kubernetes development packages",
                "training jobs",
                "container",
                "IaaS",
                "PaaS",
                "google cloud",
                "google cloud platform",
                "GCP",
                "google",
                "google developers",
                "devtools",
                "dev tips"
            ],
            "thumbnail": "https://i.ytimg.com/vi/P5wcE4IwKgQ/hqdefault.jpg",
            "title": "Machine Learning on Kubernetes with Kubeflow - Take5",
            "transcript": "  hey how's it going hi Evan wow this micro kitchen sure are getting bigger I know so much chocolate anyways machine learning has been all the Crace lately and we're looking for better and faster ways to leverage it but we often run into operational overhead especially considering all the time and effort it takes to develop a specific model and haven't run in different places yeah I actually hear this issue a lot a common scenario is that a data scientist would develop his or her model on a laptop train that model in the cloud then serve it in production maybe on Prem or in a different cloud in these different environments software and hardware configurations to totally be different that makes things break easily we're moving from one environment to the other so what if I told you that there will be a way to easily develop training and deployment learning models in the very scalable and flexible way by leveraging kubernetes wow that would be amazing do you think you could show us all about in five minutes for sure I will be using an open-source framework to do just that it is called queue flow it helps you run machine learning models on kubernetes well I will show you how to use to flow to first train a tensor flow model to recognize handwritten numbers then to serve that model on an application server on top of that we will deploy a web interface to interact with the model over a public Internet so cute flow actually supports distributed training as well as training on GPUs but to keep things simple today I will demo CPU only training on a single node let's jump into it let's do it I have already spun up a crewman a de-stressor cube Flo uses a tool called K sana to help manage kubernetes development packages to get started first I deploy cute flow component to my kubernetes cluster some of these component include a Jupiter hub for model development and TF job for managing training jobs after those are deployed I can run cube control get all and see a list of all the resources provision by cube flow now that cube flow is ready to go let's start training the model it's actually really easy I have already built a container was existing Python cold and pushed it to the container registry this Python code trains the model to recognize handwritten digits then export the model to a storage bucket now I will deploy the training component I set the parameters for the training drop to tell it where to find the container in the registry you can now see in the workflow page I have a container being created to perform the training job when it is done the model will be exported to a bucket it is going to take a little while spinning up the container and doing the actual training while this is happening let's set up a server to serve the model I'm using a TF serving deployment to do it I will point the server to the bucket where our model would be exported to now in the workflow page you can see that I have a serving deployment called minced serve after that let's also deploy a web app UI to interact with the model here I have a simple flask app that will connect with the server that we deployed in an last step again I have packaged it into a container and pushed into the registry I use case on it to deploy it with an external IP back to the workflow page you can see the web UI deployment is also running now let's check on the status of our training job it is still running let's look at the locks okay it is almost done almost 90% there now we can click on the refresh button here you can see the training is now over and the model has been uploaded to the bucket with that we can play with our model let's go to our web app component find the external IP connect to the server here it is we can then use that server to test on some random images so the first one we're seeing a picture of the handwritten 0 and this giving the correct predictions of the row with that let's test on cup of other random images we can see that's giving the correct result so everything we just saw today from training to serving to web app UI is all happening on gke kubernetes was cute though well Faye that was amazing well thanks well now you can't easily develop training and deploy your machine learning models everywhere on kubernetes thanks to keep low I want to give a big shout out to dance NJ who developed the demo material please like comment and subscribe down below and if your company's working on any cool projects and you'd like to reach out to the team go ahead and click on the link down below as well [Music]",
            "videoid": "P5wcE4IwKgQ",
            "viewCount": "825"
        },
        "R9OHn5ZF4Uo": {
            "caption_exist": "T",
            "channel_id": "UC2C_jShtL725hvbm1arSV9w",
            "channel_title": "CGP Grey",
            "concepts": [
                [
                    "algorithm",
                    48
                ],
                [
                    "language",
                    2
                ],
                [
                    "key",
                    1
                ],
                [
                    "linear",
                    1
                ],
                [
                    "shape",
                    1
                ],
                [
                    "list",
                    1
                ]
            ],
            "description": "How do all the algorithms around us learn to do their jobs?\nBot Wallpapers on Patreon: https://www.patreon.com/posts/15959388\nDiscuss this video: https://www.reddit.com/r/CGPGrey/comments/7klmd3/how_do_machines_learn/\n\nFootnote: https://www.youtube.com/watch?v=wvWpdrfoEv0\n\nPodcasts:\n\nhttps://www.youtube.com/user/HelloInternetPodcast\nhttps://www.youtube.com/channel/UCqoy014xOu7ICwgLWHd9BzQ\n\nThank you to my supporters on Patreon:\n\nJames Bissonette, James Gill, Cas Eli\u00ebns, Jeremy Banks, Thomas J Miller Jr MD, Jaclyn Cauley, David F Watson, Jay Edwards, Tianyu Ge, Michael Cao, Caron Hideg, Andrea Di Biagio, Andrey Chursin, Christopher Anthony, Richard Comish, Stephen W. Carson, JoJo Chehebar, Mark Govea, John Buchan, Donal Botkin, Bob Kunz\n\nhttps://www.patreon.com/cgpgrey\n\nHow neural networks really work with the real linear algebra: https://www.youtube.com/watch?v=aircAruvnKk\n\n\nMusic by: http://www.davidreesmusic.com",
            "dislikeCount": "1586",
            "duration": "PT8M55S",
            "likeCount": "226452",
            "published_time": "2017-12-18T14:39:33.000Z",
            "tags": [
                "cgpgrey",
                "education",
                "hello internet"
            ],
            "thumbnail": "https://i.ytimg.com/vi/R9OHn5ZF4Uo/hqdefault.jpg",
            "title": "How Machines Learn",
            "transcript": " On the Internet, algorithms are everywhere.  You are watching this video because the algorithm makes it appear on your page.  When you click on it, the algorithm will record  When you open Twitter or Facebook, the algorithm will determine what you see,  When you search for a picture, the algorithm gives you the result,  You even made a small movie for you.  When you buy something, the algorithm presents the price,  Algorithms also monitor fraud.  The stock market is full of algorithms  Deal with all kinds of other algorithms.  In view of this, you may want to know how these small robots that shape your life work,  Especially when they are abnormal.  In the past,  People use artificial language to create algorithmic robots  \"If the conditions are met, then perform the action.\"  But people cannot use simple programs to create algorithms that can handle huge and complex problems.  For example, a transaction that has a large amount of money per minute, which one is a fraud?  Suppose there is a trillion trillion video on a video website  Which should be placed in the list of proposals and which should not be placed on the site?  For airlines, what is the highest price that current customers are willing to pay?  The algorithm robot can answer the answers to these questions.  Not perfect, but far better than humans can do.  However, no one knows how the algorithm actually works.  Even those who built them,  Even people no longer need to build.  I will elaborate later.  Companies that use algorithms don\u2019t want to talk about how they work,  Because the algorithm is a valuable employee.  Very, very valuable.  How the algorithm is built is an absolute trade secret.  Today's foremost technologies often want you to:  \"I like linear algebra.\"  This technology usually appears on major websites.  How those algorithms work is always somewhat incomprehensible.  So let's talk about a clever and easy way to build algorithms.  Do not understand how their brains work.  Suppose you want an algorithm that can identify what the photo has:  \"Is this a bee or 3?\"  It's easy for humans (even babies)  However, it is impossible to tell the algorithm how to do it in a programming language.  Because we also just know that this is a bee, that is 3,  We can use language to express the difference between the two, but the algorithm does not understand human language.  This is an instinct written in the human brain's neural circuit.  A neuron can understand, but the role of countless neural circuits can only be a little  The whole brain is even more needless to say.  In spite of this, the brain is doing it.  So to get an algorithm that can do this difference,  You don't have to do it directly.  You only need to build an algorithm that can build an algorithm, and an algorithm that uses a training algorithm.  Simple algorithms, clever programmers do it.  Let the algorithm build the algorithm, although their quality is not very good.  In the beginning, the lines and modules were combined in a random manner.  This leads to some very...  \"Special\" student algorithms are taught to teachers.  Of course, the teacher's algorithm cannot distinguish between bees and 3,  If humans can build teacher robots to do this, then the problem is solved.  On the contrary, humans give the teachers a lot of photos of \"bees\" and \"3\".  And the key to distinguishing the two.  Teacher algorithms cannot be taught  But it can be exams.  At first the ridiculous student robots tried very hard.  But they did not do well.  Very, very bad.  This is not their fault. Really, they just built it.  With bad transcripts, these student algorithms set foot on the road of shame to find the builder algorithm.  The best algorithm was put aside  Other recycling.  The builder algorithm is still not good at creating  But now we only need to copy the remaining algorithms, copy them and regroup them.  Then back to their school,  Test the teacher robot, and then the builder's algorithm recovers and reorganizes.  Repeat again and again.  There is an algorithm that is responsible for random building, a teacher who will not teach only exams,  There are students who will not learn. They just look like this and the theory is not going up.  But in practice, this method is really useful,  Part of the reason is that at each iteration, the builder algorithm keeps the best and recycles the rest;  The other part is that the teacher's algorithm does not supervise a dozen student exams in an old classroom.  It is an infinite classroom with thousands of students.  There are not only 10 questions but one million questions.  Test, recycling, reorganization, how many times do you want to repeat?  How much is it?  The student algorithm that survived was only lucky.  But by combining enough lucky algorithms and keeping it functional,  And freely mix new copy versions,  In the end, a student\u2019s algorithm stands out but is not lucky enough.  Maybe still can't distinguish between bees and 3.  Whenever the algorithm is duplicated and reorganized, the average test score will slowly rise.  Therefore, the scores needed for the next generation to survive are getting higher and higher.  Keep this, and eventually from the infinite classroom  (actually slaughterhouse)  A never-before-seen algorithm will appear that perfectly distinguishes the bees and 3 in the photo.  However, the algorithm does this, neither the teacher algorithm nor the builder algorithm knows.  Nor is human understanding.  The algorithm itself does not know.  After maintaining so many useful random changes, its construction becomes very complicated.  One line of code can also be understood, but the effect of countless lines of code can only be understood a bit.  The whole algorithm need not be said.  However, it is useful.  But this is frustrating, especially when the algorithm is very good at  Only the question being taught.  The photo is well processed, but the movie or the reversed photo is nothing,  Or apparently not a bee, it will be classified as a bee.  Because the teacher's algorithm does not teach,  All humans can do is give more questions and make the test longer and more complete.  Including the best algorithm will be wrong.  It is important to understand this.  This is why big companies are obsessed with collecting data.  More data equals a longer test equals a better algorithm.  So when you meet a certification test on the site \"Are you human?\",  You not only prove that you are human, (hopefully)  You are also helping to establish tests so that the algorithm can read or count.  Or distinguish mountains and lakes, horses and humans  Have you seen a lot of problems with the road recently?  Ok...! What may be the test for the production?  Find out what's in the picture or roadmap, or filter the video content,  These require humans to make enough correct tests.  But there is a test that is automatic:  Observe humans.  For example, suppose there is a video site that wants users to watch videos as long as possible.  It is very easy to measure how long users stay on the site.  Therefore, the teacher's algorithm requires each student's algorithm to observe the users of some movie websites individually.  Student algorithms observe their users, look at their data,  And try to select the video so that users stay longer on the site.  The longer the average time, the higher the test score.  Build, test, repeat.  After one million cycles, there may be an algorithm that is very good at picking videos for users to stay for a long time.  At least compared to the algorithm that humans build directly.  But when people ask: \"How does the site's algorithm choose a video?\"  In addition to the algorithm, there is no better answer.  User data it accesses,  And most importantly, how can humans instruct teachers in algorithmic revision?  This is why the algorithm tries to survive.  But it is not known what the algorithm is thinking or how it thinks.  All that can be known is that this student algorithm becomes a real algorithm.  It was only 1% better than the previous algorithm in human design tests.  In general, algorithmic tests for improving the user experience are ubiquitous on the Internet.  Or set the price to achieve the maximum benefit,  Or select the best friends you will be interested in, such as po, popular articles, etc.  If the algorithm is testable and teachable. Yes, \"Teachable,\"  A student's algorithm will graduate from an infinite classroom into its domain algorithm.  At least, do it for a while.  We have become accustomed to using tools without understanding tools, although some people still understand  But as the machines learn more, we are more and more in a kind of what we are using tools.  It is still a dilemma for being used by tools.  No one even knows their creators.  We can only hope to correct them through the tests we have done.  We need to adapt to this,  Because our algorithm partners are everywhere and don't leave.  Yes. They are looking at you.  You know what they are doing.  It's time for me to trouble you...  Press like...  leave a message...  ... and subscriptions.  By the way, press the bell next to the subscription,  Share it on Twitter or Facebook.  They are watching you.  It will not recommend this video to people.  Unless you press like to subscribe.  See what you want me to do, algorithm.  what would you like? Do you want to see the progress bar?  Is this what you want?  Ok...  (Hey...) Hey, buddies, do you know if I have a Podcast?  You may listen to it when you are busy finishing the room, or as you wish,  There are hours of talk shows there, and you have algorithms to watch your every move.  Go and click and entertain yourself.  help me,  It is the help algorithm. ",
            "videoid": "R9OHn5ZF4Uo",
            "viewCount": "2520118"
        },
        "WXHM_i-fgGo": {
            "caption_exist": "T",
            "channel_id": "UCgyqtNWZmIxTx3b6OxTSALw",
            "channel_title": "Android Authority",
            "concepts": [
                [
                    "language",
                    4
                ],
                [
                    "algorithm",
                    3
                ],
                [
                    "mean",
                    2
                ],
                [
                    "dictionary",
                    2
                ],
                [
                    "arm",
                    1
                ],
                [
                    "diameter",
                    1
                ],
                [
                    "matrix",
                    1
                ],
                [
                    "target",
                    1
                ],
                [
                    "sink",
                    1
                ]
            ],
            "description": "The goals of AI is to create a machine which can mimic a human mind and to do that it needs learning capabilities. But how does machine learning work? Read the article on AndroidAuthority.com: http://goo.gl/1tjJZb\n\n\nTalk about Android in our forums: http://www.androidauthority.com/community\n\nSubscribe to our YouTube channel: http://www.youtube.com/subscription_center?add_user=androidauthority\n----------------------------------------------------\nStay connected to Android Authority:\n- http://www.androidauthority.com\n- http://google.com/+androidauthority\n- http://facebook.com/androidauthority/\n- http://twitter.com/androidauth/\n- http://instagram.com/androidauthority/\n\nFollow the Team:\nJosh Vergara: https://plus.google.com/+JoshuaVergara\nJoe Hindy: https://plus.google.com/+JosephHindy\nLanh Nguyen: https://plus.google.com/+LanhNguyenFilms\nJayce Broda: https://plus.google.com/+JayceBroda\nGary Sims: https://plus.google.com/+GarySims\nAsh Tailor: https://plus.google.com/+AshTailor",
            "dislikeCount": "144",
            "duration": "PT11M25S",
            "likeCount": "10604",
            "published_time": "2015-07-07T12:48:35.000Z",
            "tags": [
                "AndroidAuthority",
                "Android",
                "Artificial Intelligence (Industry)",
                "Machine Learning (Software Genre)"
            ],
            "thumbnail": "https://i.ytimg.com/vi/WXHM_i-fgGo/hqdefault.jpg",
            "title": "What is machine learning?",
            "transcript": "  hello there my name is Gary Sims from Andhra Authority now one area of computing that is improving the way we use our smartphones and use the web is machine learning now sometimes machine learning in AI get used interchangeably especially by big brand companies that want to announce their latest innovations however machine learning and AI are quite two distinct areas of computing her of course they are connected and today we're going to ask ourselves the question what is machine learning the goal of AI is to create a machine that can mimic a human mind and do that of course it needs learning capabilities however it's more than just about learning it's also about knowledge representation reasoning and even things that abstract thinking machine learning on the other hand is solely focused on writing software that can learn from past experience one thing you might find quite astounding is that in fact machine learning is more closely related to data mining and statistics than it is to AI well why is that well first of all we need to look at what we mean by machine learning one of the standard definitions of machine learning as given by Tom Mitchell a professor at Carnegie Mellon University is this a computer program is said to learn from experience ie with respect to some class of tasks T and performance measure P if it's performance at tasks in T as measured by P improves with experience e ok well let me try to put that more simply for you if a computer program can improve how it performs a certain task based on past experience then you can say it has learned this is quite different to a program which can perform a task because its programmers have already defined all the parameters and data needed to perform that task for example a computer program can play tic-tac-toe maybe you call it noughts and crosses because a programmer wrote the code with a built-in winning strategy however a program that has no predefined strategy an only a set of rules about the legal moves will need to learn by repeatedly playing the game until it is able to win this doesn't only apply to games is also true of programs performed classification and prediction classification is the process whereby a machine can recognize and categorize things from a data set including from visual data and measurement data prediction known as regression in statistics is where a machine can guess predict the value of something based on previous values for example given a set of characteristics about a house how much is it worth based on previous house sales and this leads us to another definition of machine learning it is the extraction of knowledge from data you have a question you are trying to answer and you think the answer is in the data that is why machine learning is related to statistical analysis and data mining machine learning can be split into three categories supervised learning unsupervised learning and reinforcement learning let's have a look at what they mean supervised learning is where you teach train the machine using data which is well labeled that means that the data is already tagged with the correct answer the correct outcome here is a picture of the letter a this is a flag for the United Kingdom it has three colors one of them is red and so on the greater the data set the more the machine can learn about the subject matter after the machine is trained it's given new previously unseen data and the learning algorithm then uses the past experience to give you an outcome this is the letter A that is the UK flag and so on unsupervised learning is where the machine is trained using a data set that doesn't have any labels the learning algorithm is never told what the data represents here is a letter but no other information about which letter it is here are the characteristics of a particular flag without naming that flag unsupervised learning like listening to a podcast in a foreign language which you don't understand you don't have a dictionary and you don't have a supervisor or teacher to tell you what you are listening to if you listen to just one podcast it won't be much benefit to you but if you listen to hundreds of hours of those podcasts your brain will start to form a model about how the language works you will start to recognize patterns and you will start to expect certain sounds when you do get hold of a dictionary or a tutor then you will learn that language much quicker reinforcement learning is similar to unsupervised learning in that the training data is unlabeled however when asked a question about the data the outcome will be graded a good example of this is playing games if the machine wins a game then the result is trickled back down through the set of moves to reinforce the validity of those moves this isn't much due to the computer play just one or two games but if it pays thousands even millions of games then the cumulative effect of the reinforcement will create a winning strategy there are many different techniques for building machine learning systems and many of these techniques are related to data mining and to statistics for example if I have a data set which describes different types of coins based on their weight and based on their diameter I am able to use a technique known as nearest neighbor to help classify previously unseen coins with nearest neighbor the new coin is compared to the nearest neighbors around it and see what classification they have it's then given the same classification as its nearest neighbors now you can pick how many neighbors you want to compare against and that number is often referred to as K so therefore the full title for this algorithm is K nearest neighbors however there are lots of other algorithms that try to do the same thing but using different methods take a look at this diagram the picture on the top left is the data set the data is classified into two categories red and blue data is hypothetical however it could represent almost anything coin weights and their diameters the number of petals on a plant and their width clearly there are some definite groupings here everything in the upper left belongs to the red category and the bottom right is blue however in the middle there is some crossover if you get a new previously unseen sample which fits somewhere in the middle does it belong to the red category or the blue category the other images show different algorithms and how they attempt to categorize a new sample if the new sample lands in a white area then it means it can't be classified using that method the number on the lower right shows the class occasion accuracy one of the buzz words that we hear from companies like Google and Facebook is neural net a neural net is a machine learning technique modeled on the way neurons work in the human brain the idea is that given a number of inputs the neuron will propagate a signal depending on how it interprets those inputs in machine learning terms it is done by matrix multiplication along with an activation function the use of neural networks has increased significantly in recent years and the current trend is to use deep neural networks with several layers of interconnected neurons during Google i/o 2015 during the keynote it was explained how much machine learning and deep neural networks are helping Google fulfill its core mission to organize the world's information and make it universally accessible and useful to that end you can ask Google now things like how do you say Kermit the Frog in Spanish and because of neural networks Google is able to do voice recognition natural language processing and translation currently Google is using 30 layer neural Nets which is quite impressive as a result of using these neural networks Google's error rate for speech recognition has dropped from 23% in 2013 to just 8% in 2015 so we know that companies like Google and Facebook use machine learning to help improve their services so what can be achieved with machine learning one interesting area is picture annotation here the machine is presented with a photograph and asked to describe it here are some examples of machine generated annotations the first two are quite accurate although I'm not sure there's a sink in that first picture and the third is interesting in that the computer managed to detect the box of donuts but it misinterpreted the other pastries as a cup of coffee what is it it's a banana isn't try again what is it it's a banana no what is it say it's an orange this is an orange of course the algorithms can also get it completely wrong look at this first picture those men in hard hats seem to be doing some work however the computer thinks they're lounging around in a couch and that motor scooter doesn't look like a fire hydrant to me and I don't think that horse will be very happy as being described as a surfboard traffic warden another example is teaching machines how to write Cleveland amore an American author reporter and commentator once wrote in my days a school taught two things love of country and penmanship now they don't teach either I wonder what you think about this the above handwriting sample was produced by a recurrent neural network to train the machine its creators are 221 different writers to use a smart whiteboard and copy out some text during the writing the position of their pens was tracked using infrared this resulted in a set of X&amp;Y coordinates which were used for supervised training as you can see from the results they're quite impressive in fact the machine can actually write in several different styles and at different levels of untie deenis google recently published a paper about using neural networks as a way to model conversations as part of the experiment the researchers trained the machine using 62 million sentences from movie subtitles as you can imagine the results are quite interesting at one point the machine declares that it's not ashamed of being a philosopher while later when asked about discussing morality and ethics it said and how I'm not in the mood for a philosophy will debate so it seems if you feed a machine a steady diet of Hollywood movie scripts you get a moody philosopher unlike many areas of AI research machine learning isn't an intangible target it is a reality that it's already working to improve the services we use in many ways it is the unsung hero the uncelebrated star which works in the background trotting through all our data to try to find the answers we are looking for and like deep thought from douglas adams hit it's guide to the galaxy sometimes it is the question we need to understand first before we can understand the arm sir my name is Gary Simms Mandurah thority and I hope you've enjoyed this video if you did please do give it a thumbs up also please use the comments below to tell me what you think about machine learning also don't forget to subscribe to and Road authorities YouTube channel and as for me I'll see you in my next video [Music]",
            "videoid": "WXHM_i-fgGo",
            "viewCount": "400671"
        },
        "Z1YHbl0lh88": {
            "caption_exist": "T",
            "channel_id": "UCnGtA32fkJdDKFORXSNJsJA",
            "channel_title": "Marcelo Tas",
            "concepts": [],
            "description": "Como as maquinas com inteligencia artificial aprendem? Por que alguns rob\u00f4s e programas s\u00e3o capazes de prever o futuro?\nO Machine Learning ou Aprendizado de M\u00e1quina treinam algoritmos os expondo a v\u00e1rios exemplos at\u00e9 que ele reconhe\u00e7a padr\u00f5es. A partir da\u00ed, o c\u00e9u \u00e9 o limite. \n\nAssista ao v\u00eddeo e entenda melhor essa hist\u00f3ria de m\u00e1quinas nerds :)\n\nInscreva-se no canal e ative as notifica\u00e7\u00f5es https://goo.gl/RulwZj\n\nCr\u00e9ditos\nDire\u00e7\u00e3o geral e apresenta\u00e7\u00e3o: Marcelo Tas\nRealiza\u00e7\u00e3o: Supernormal Comunica\u00e7\u00f5es\nDire\u00e7\u00e3o: Sergio Zeigler\nConte\u00fado: Ludmila Tavares\nProdu\u00e7\u00e3o: Juliana Foresti\nRoteiro: Marco Aur\u00e9lio Gois dos Santos\nEdi\u00e7\u00e3o: Danilo Cesar Francisco\nAssistente de Design: Aline Cavalcante\nTrilhas: Est\u00fadio PlugIn",
            "dislikeCount": "40",
            "duration": "PT5M23S",
            "likeCount": "1630",
            "published_time": "2017-04-16T14:00:03.000Z",
            "tags": [
                "udacity",
                "O que \u00e9 machine learning?",
                "machine learning",
                "udacity intelig\u00eancia artificial",
                "o que \u00e9 aprendizado de m\u00e1quinas?",
                "robos",
                "maquinas inteligentes",
                "watson",
                "marcelo tas",
                "carro sem motorista",
                "vale do silicio",
                "como funciona?",
                "inteligencia artificial",
                "intelig\u00eancia artifial",
                "ia",
                "udacity machine learning",
                "udacity cursos"
            ],
            "thumbnail": "https://i.ytimg.com/vi/Z1YHbl0lh88/hqdefault.jpg",
            "title": "#4 O QUE \u00c9 MACHINE LEARNING (INTELIG\u00caNCIA ARTIFICIAL)? #Descomplicado por Marcelo Tas",
            "transcript": " to the telephone or nervous deputy and  you know it  she does use machines to  helping humans to become better at  life is not new idea  march at home or machine learning  It's the new chapter in this story.  will be the one that will replace  humans are going to stay all the time  unemployed  It's what you'll see in this video at  mach lane but it's a kind of  artificial intelligence  it allows computers to take  decisions with the help of algorithms that  recognize patterns and become capable  to make predictions  did not understand  Calm down, I'll explain this is mine.  computer  he spent a season in the kitchen of  home and found that when I mend  watermelon and this will come juice of  watermelon also learned that milk  with a new saw the delicious vitamin  How Alfredo is trained to learn.  one day saw night and not even have to teach  milk shake recipe  he joined the two in the blender and  still put on a chocolate panties  very well but how did you learn to  make a move you'll only want juice  watermelon banana vitamin  in 1982 an engineer wrote a  program for a computer to play  ladies with humans  the computer analyzed the young man learns  with the mistakes and hits of the opponent  It ended up leaving nothing on the computer.  could better predict the tactics of  game in 1959 samuel engineer created  the term learning or machiline  machine is the skills of the bettor  learning alone is the basis of many  current inventions you would walk in  car without driver in 2016 in mountain  view in california  exists inside the car without a driver  as I saw one of them the brother already as part  museum in Singapore are already  motorways taxi with driver for  call just give the signal and the application  of course also 2016 state of Colorado  a truck without a driver walked 900  kilometers carrying cyclone with  beer cans  the human who was in the truck just for  precaution  nor did he have to respect the warning if he drank  when the stand-alone car leaves the factory  knows to recognize the streets a sign closed  and some things that may arise in the  in front of him like a dog  as well as humans the autonomous car  and some smart machines like  Alfredo learn from the mistakes  we humans are still afraid  having a basic error  the other day my daughter left the funkeira  her on the kitchen sink and  ask why Alfredo tried to do  a juice of this fair and discovered does not give  near recorded absurd error well in  forward learning and more spreads what  immediately learned from all the  other machines realize the danger  of this joke and the mistakes quickly  be that one day the machines will  realize the ancient dream of humanity  that is to get the cars without drivers  just go to pre determined meeting  and are still unable to avoid holes  imagine the poor on the roads  Brazil  artificial intelligence was a  cinema category is probably the  oscar was going to the atom  the ibm supercomputer he has already won  awards on tv designed clothes created  recipes and now works even with  thin in 2016 Japanese doctors asked  aid to pakistan for a case that  they found no diagnosis in  the machine crossed data from the  hundreds of thousands of medical  and diagnosed a leukemia  saved the life of the patient in the Olympics  the washington post newspaper published  news from the games without human help  machines took the place of humans  according to some scientists  of when but in the future we will have a  good presenter and I 'll be employed  I do not know yet, thank you  want to know more about mashiba incredible  that the common point of application does not  want to help the university of the  music following information on the  channel and still very ventilated fla ",
            "videoid": "Z1YHbl0lh88",
            "viewCount": "176637"
        },
        "ZX2Hyu5WoFg": {
            "caption_exist": "T",
            "channel_id": "UCQALLeQPoZdZC4JNUboVEUg",
            "channel_title": "Jabrils",
            "concepts": [
                [
                    "forest",
                    11
                ],
                [
                    "node",
                    4
                ],
                [
                    "control",
                    4
                ],
                [
                    "mean",
                    2
                ],
                [
                    "work",
                    2
                ],
                [
                    "shape",
                    1
                ],
                [
                    "sand",
                    1
                ],
                [
                    "geometric",
                    1
                ],
                [
                    "power",
                    1
                ],
                [
                    "history",
                    1
                ],
                [
                    "solution",
                    1
                ]
            ],
            "description": "Never thought this day would come where I was writing my own Machine Learning Neural Network Projects... prepare to have SOME FUN! \n\nSUBSCRIBE FOR MORE SEFD SCIENCE: http://sefdstuff.com/science\n\nTable Of Contents\n-----\n0:00 - Intro\n0:10 - My AI Story\n1:58 - Starting point\n2:16 - Introducing Forrest\n2:35 - Discovering Forrest's Problem\n3:20 - How the joystick works\n3:59 - Exploring our A.I. options\n4:47 - Monster Boss Battle Course\n4:53 - Recap on whats going on\n5:40 - Setting up our inputs\n6:30 - Our Neural Network structure & how it works\n8:11 - Inputting our Neural Network into Forrest\n8:56 - Conclusion\n\nPlease follow me on social networks:\ntwitter: http://sefdstuff.com/twitter\ninstagram: http://sefdstuff.com/insta\nreddit: https://www.reddit.com/r/SEFDStuff/\nfacebook: http://sefdstuff.com/faceb\n\nMusic\n-----\nComing soon\n\nREMEMBER TO ALWAYS FEED YOUR CURIOSITY",
            "dislikeCount": "385",
            "duration": "PT10M2S",
            "likeCount": "16614",
            "published_time": "2017-12-08T18:30:01.000Z",
            "tags": [
                "SEFD",
                "San Diego",
                "SEFD Sci",
                "Curiosity",
                "Education",
                "Machine Learning",
                "artificial intelligence",
                "ai",
                "deep learning",
                "robots",
                "deepmind",
                "software engineering",
                "computer science",
                "software",
                "computer programming",
                "computers",
                "online",
                "super f(x)",
                "f(x)",
                "function",
                "math",
                "technology",
                "research",
                "data",
                "solution",
                "answer",
                "questions",
                "hard",
                "software development",
                "game",
                "data science",
                "how to",
                "tutorial",
                "demo",
                "project",
                "neural network",
                "unity3D",
                "video game",
                "genetic algorithm",
                "run forrest",
                "forrest gump"
            ],
            "thumbnail": "https://i.ytimg.com/vi/ZX2Hyu5WoFg/hqdefault.jpg",
            "title": "\ud83d\udda5\ufe0f WRITING MY FIRST MACHINE LEARNING GAME! (1/4)",
            "transcript": "  today I have a very exciting episode for you all because as the title suggests it's about machine learning but before we get into that I'd like to quickly share my history with machine learning so far back when I was a kid I've always had an interest with AI I remember seeing the famous Karl Sims they know that procedurally generated genetic creatures using geometric shapes say that ten times fast and then train those creatures using a neural network this was the first time that I ever heard about neural networks and I was instantly hooked but at the time I barely started learning algebra in school so understanding how to write one was way out of my league fast forward to 2015 and Google released tensorflow which is a very very convenient machine learning library made by some very smart people and one year later after that there is a flood of super cool machine learning demos all over the Internet and that is when I found myself incredibly inspired to the point in which I knew I hadn't get my foot in the machine learning door but here's the deal at the point of wanting to get serious with machine learning I didn't know calculus I hardly knew anything beyond basic geometry really but I knew if I really wanted to try and make some cool machine learning projects jumping straight into tensorflow without knowing the material what a just man all of my machine learning projects would have been the result of mastering the craft of copy and pasting code but I want to go out as no copy and paste master I wanted to go out as guy who knows how to write neural networks and apply them in cool ways so on March 17 2007 teen I got serious and set out on a mission to learn how to ride my own neural networks and I can proudly say six months later I successfully trained my first new network completely from scratch it was a super basic neural network I was able to learn the order of the super sand stages but it was a major prideful moment for myself and today it's finally time to start applying what I've learned and start writing some funky fresh machine okay so where do we begin there is so much to cover with this project so buckle up everyone but I promise it is going to be a lot of fun now I think a good place to start will be to tackle why even use machine learning AI to begin with so let's first build a simple game and start there here's how our game works we have a little running bot named forest who just felt like running force automatically runs straight but needs some help to turn left to right you see the only goal in this little robot life of his is to be able to run to complete laps on any course touching the walls means failure for forests so with that said as of right now I have to help forest navigate the course using a joystick controller or else he won't be able to run his desired two laps but wait there's a plot twist I don't want to help forest navigate courses because I'm lazy I really just want to sit on my little tush and eat candy all day why doesn't forest navigate the course his own damn self well this is what happens when forest tries to do it on so we need to teach him how to complete this course on his own using some sort of artificial intelligence but before we add any AI let's first take baby steps and give force the ability to control this controller joystick now the joystick works like this if the joystick is tilted all the way to the right then the joystick will return a value of one if it's tilt all the way to the left that's a value of negative if centered zero and any percentage in between those three values is the percentage of that value so halfway to the right is point five halfway to the left is negative 0.5 simple maths you get it but please do make a mental note that if I say tilt the joystick left to right this is what I mean by it right on so let's give this controller the force tell them to just randomly guess how to tilt the joystick for now and let's see what he does absolute dunce so so one simple AI we can give for us is some sort of path finding AI we place a bunch of markers on the course until forced to tilt the joystick left to right depending on where the next marker is in relation to him and 100% this will work but it also comes with a few problems one with this solution he'll only become the master of this one course and two I'll still have to do a lot of work placing these markers for every new course and let me remind you guys I am lazy so in complete surprise we're actually going to add a neural network based AI surprise no network someone the best solutions for this problem because not only will force be able to run the course on its own but if we train him right he'll also learn a general rule for all courses and be able to run laps around any course even ones that he's never even been on including this monsters boss battle of course here but more on that later oh okay so just to make sure we're all still on the same page here's here's where we're at Forrest wants to be able to run two laps well in any course but currently only knows how to run forward he needs help for me to navigate the courses for him using a joystick controller I don't want to help force because I'm lazy and my candy won't eat itself and so so far we've given force control of the joystick even though he has no understanding of courses in which how you doing over there forest okay let's get started this little Network now this is the part where everything starts to get a little gray area you please keep in mind that neural networks is still an open research field but I'm the best I can to make this all is intuitive as possible without getting all caught up in the maps and logic so ah actually wait I'm sorry before we can write our no network we need to first set up our inputs forest has control the joystick but he has not even the slightest clue what to do with it he has absolutely no understanding of the course at all which is actually not only super interesting but probably the most important thing to think about when it comes to neural networks why well because every single part of your network depends on the quality of your inputs let's look at when I had control over the joystick how did I have an understanding of the course well using my eyes I was able to send live data to my brain which thankfully was smart enough to determine how far away the course walls were and chorus and then send that live data to my finger nerves or whatever so that I can use the joystick correctly with the power of no networks we can give forests a brain and kind of sort of simulate this same exact brain process now this is the no network structure them deciding to start with five inputs four hidden layer nodes and one output instead of giving force to eyes or even one that can see actual images we're instead going to take a more simplistic approach and give him five distances relative to his body as input which are straightforward left right forward right and Ford left horse will then pass this data to the four hidden layer nodes which each have five connections one for each input each connection will have its own strength value and each node will have its own bias that will help shift the to technical just for now know that the bias is very important for each hidden layer and output node now what the hidden layer acting as forest brain his brain will do some calculations on the five inputs using its connection strength values and biases those calculations are then sent to the one output node which again has its own bias and connection strength values connected to each of the hidden layer nodes and finally the output node will be able to calculate a guess for forest the other justic left or right I know it's a lot to follow just bear with me it gets better I promise and this entire new network alkylation will happen over and over and over again in real time because force distance when the course will also change in real time I hope I've explained this simply enough that you're still with me because we are far from out the woods forest with this now new neural network brain doesn't mean that he's instantly artificially intelligent Wow what a tough audience hold on to say ah yes basic underscore laugh track three that way at least you always understand me anywho forest is still far away from showing any signs of intelligence you'll see that if we give him this brain with random values and watch what he does with the joystick it's a little bitter I guess but still far from intelligent you see when writing no networks in most cases is broken down into two main parts designing the artificial structure which is what we just did and training the artificial structure which is when the intelligence part comes into play but whoa this has already been a lot of info to take in and we've barely just got started with this project so I'm gonna be merciful and give you guys an intermission however I do want you all back in their seats next week so that we can continue this adventure and train force they become the any course running master all right guys I seriously hope that you're having as much fun as I am with this project because there's another part coming next week in which we actually start to Train forests and see some intelligence start to shape it's super exciting if you ask me if you have any suggestions or any questions that you need me to clear up you just want to talk about machine learning post in the comments I will be replying to everyone because I just love this subject so much other than that if you want live updates on this project I invite you to follow me on Twitter at stuff stuff's my handle I post live updates on this project but also this random stuff so let's chat just follow me come on let's be friends really speedy curiosity and next week we start to train forests I'll see you then as you know I should have walked away yeah",
            "videoid": "ZX2Hyu5WoFg",
            "viewCount": "363720"
        },
        "aircAruvnKk": {
            "caption_exist": "T",
            "channel_id": "UCYO_jab_esuFRV4b17AJtAw",
            "channel_title": "3Blue1Brown",
            "concepts": [
                [
                    "range",
                    2
                ],
                [
                    "form",
                    2
                ],
                [
                    "variety",
                    1
                ],
                [
                    "nature",
                    1
                ]
            ],
            "description": "Subscribe to stay notified about new videos: http://3b1b.co/subscribe\nSupport more videos like this on Patreon: https://www.patreon.com/3blue1brown\nSpecial thanks to these supporters: http://3b1b.co/nn1-thanks\n\nFor any early-stage ML entrepreneurs, Amplify Partners would love to hear from you: 3blue1brown@amplifypartners.com\n\nFull playlist: http://3b1b.co/neural-networks\n\nTypo correction: At 14:45, the last index on the bias vector is n, when it's supposed to in fact be a k.  Thanks for the sharp eyes that caught that!\n\nFor those who want to learn more, I highly recommend the book by Michael Nielsen introducing neural networks and deep learning: https://goo.gl/Zmczdy\n\nThere are two neat things about this book.  First, it's available for free, so consider joining me in making a donation Nielsen's way if you get something out of it.  And second, it's centered around walking through some code and data which you can download yourself, and which covers the same example that I introduce in this video.  Yay for active learning!\nhttps://github.com/mnielsen/neural-networks-and-deep-learning\n\nI also highly recommend Chris Olah's blog: http://colah.github.io/\n\nFor more videos, Welch Labs also has some great series on machine learning: \nhttps://youtu.be/i8D90DkCLhI\nhttps://youtu.be/bxe2T-V8XRs\n\nFor those of you looking to go *even* deeper, check out the text \"Deep Learning\" by Goodfellow, Bengio, and Courville.  \n\nAlso, the publication Distill is just utterly beautiful: https://distill.pub/\n\nLion photo by Kevin Pluck\n\nMusic by Vincent Rubinetti: https://soundcloud.com/vincerubinetti/\n\n------------------\n\n3blue1brown is a channel about animating math, in all senses of the word animate.  And you know the drill with YouTube, if you want to stay posted on new videos, subscribe, and click the bell to receive notifications (if you're into that).\n\nIf you are new to this channel and want to see more, a good place to start is this playlist: http://3b1b.co/recommended\n\nVarious social media stuffs:\nWebsite: https://www.3blue1brown.com\nTwitter: https://twitter.com/3Blue1Brown\nPatreon: https://patreon.com/3blue1brown\nFacebook: https://www.facebook.com/3blue1brown\nReddit: https://www.reddit.com/r/3Blue1Brown",
            "dislikeCount": "405",
            "duration": "PT19M13S",
            "likeCount": "57638",
            "published_time": "2017-10-05T15:11:25.000Z",
            "tags": [
                "Mathematics",
                "three blue one brown",
                "3 blue 1 brown",
                "3b1b",
                "neural networks",
                "machines learning",
                "deep learning"
            ],
            "thumbnail": "https://i.ytimg.com/vi/aircAruvnKk/hqdefault.jpg",
            "title": "But what *is* a Neural Network? | Chapter 1, deep learning",
            "transcript": " This is a 3  A staggered 28x28 pixel ultra low resolution 3  But your brain recognizes it as 3  I hope that everyone can slightly sigh that the human brain \"actually\" can accomplish this task with such ease.  You see this and this figure we all consider 3  But the value of each pixel in each of their figures is very different.  You see the light-sensitive cells that were excited at 3 o'clock in your eyes.  And see the cells that were stimulated at 3 o'clock  But a small piece of your cerebral cortex handles the visual intelligence  But actually able to process these images into the same information  At the same time, other images can be interpreted as different information  But if I call you now, drop me a program  Enter a 28x28 pixel table to output a single digit between 0 and 9  To figure out which number is written in a picture  Okay, this easy work has become a difficult task  Everyone is not a mountain cave  Presumably I don\u2019t need to give everyone a look again  How closely machine learning and neural networks are related to the present and future  But suppose you have no background knowledge of neural networks  I want to introduce to you exactly what the next neural network is  Visualize how it works  Treat it as a math rather than a simple red hot word  After this series finished, I hope everyone can understand why neural networks are such a structure.  Let everyone hear again when the neural network \"learns\" to understand what this represents  This video will only introduce the structure of the neural network  The next issue will discuss its learning principles  Next we will build a hand  Neural network capable of recognizing hand-written numbers  This is a classic example for getting started  And here's why I don\u2019t think differently.  Because the end of the two periods  I will attach some good supplementary learning materials  You can download their code on your own computer  The variety of neural networks is very, very much  In recent years, research on these variants has become more explosive.  However, in the video introduced in these several issues  We will only talk about the simplest and plainest version (Multilayer Perceptron MLP)  We must first understand the classic original to understand more powerful modern variants  And I believe I understand that the original is enough for us to eat a pot.  But even the simplest version  Already able to identify handwritten numbers  It's great for computers  at the same time  You will also see that neural networks sometimes have unsatisfactory places  As the name implies, the name of the neural network is derived from the human brain structure.  Let's analyze it one layer at a time  What neurons are neurons connected to them?  Speaking of neurons now  I want everyone to understand it temporarily as a container for numbers  With a number between 0 and 1  Only this  Look at the example where the network started with a lot of neurons  Corresponds to each pixel in the 28x28 input image  A total of 784 neurons  The numbers contained in the neurons represent the gray values \u200b\u200bof the corresponding pixels.  0 means pure black pixels  1 represents pure white pixels  We call the number in the neuron \"activation value\"  Everyone can imagine such a picture  The bigger the activation value is, the brighter the neuron is.  So 784 neurons form the first layer of the network  Now we jump to the last layer of the network  The ten neurons in this layer represent the ten numbers from 0 to 9, respectively.  Their activation values \u200b\u200bare the same between 0 and 1  These values \u200b\u200bindicate the probability that the system considers which digit corresponds to the input image  There are several \"hidden layers\" in the middle of the network  For the time being, we will see it as a big black box  Inside it is the specific task of dealing with identifying numbers.  In this network I choose to add two hidden layers with 16 neurons per layer  I must admit that these settings are arbitrary  The reason why the structure chooses two hidden layers will be explained later  And choosing 16 neurons is nothing more than a good look.  In practice, we have a lot of room for adjustment experiments in the structure of the network.  When the neural network is operating  The activation value of the next layer will determine the activation value of the next layer  So the core mechanism of neural network processing information is precisely  The activation value of the layer is the calculation of the activation value of the next layer by what kind of operation  To some extent, it wants to imitate the network of neurons in biology.  Some neuron firings will cause other neurons to fire  The neural network I present to you has been trained to recognize numbers.  Let me explain what this means  This means if you are at the 784 neurons of the network input layer  784 grayscale values \u200b\u200brepresenting each pixel of the input image are entered  Then the pattern of this activation value will cause the underlying activation value to produce some special patterns.  Let the lower layer produce a special pattern  Finally get some result in the output layer  The brightest neuron in the output layer represents the \"selection\" of neural networks.  It thinks that this number is written in the input image  Before I introduce the mathematics of how each level of the network affects the training process  When we first discuss what we think, we think that this kind of layered structure can be intelligently judged.  What are we looking forward to?  What exactly do we expect from these middle layers?  When we humans recognize numbers  We are in the various components of the combination of numbers  9 is a circle on the right and then a vertical  8 It is a circle on the top and a circle on the bottom  4 when it can be split into 3 straight lines and so on  In the ideal case we want each neuron in the penultimate layer  Can correspond to the previous stroke part  So when we enter a 9 or 8 circled number  The activation value in a neuron will be close to 1  And I don't specifically refer to a certain kind of circle  I hope all this circle pattern on the top of the image will light this neuron  This way from the third floor to the last floor  We only need to learn which parts can combine which number  Of course, this leads us to more problems  For example, how do you identify these components?  Which parts are even correct?  And I haven\u2019t mentioned how the upper layer network affects the next layer  But for the time being, please stay with me and discuss the topic  The task of identifying circles can be divided into more subtle issues.  A reasonable method is to first identify smaller edges in the digital image  For example, like this strip in 1 4 7  Is it a long side?  Or you can use it as a combination of several short sides.  So we hope maybe every neuron on the second level of the network  Can correspond to these various short sides  Maybe when such an image is input  It can light all of the eight to ten neurons associated with the short side  Then you can light the neurons that correspond to the top circle and the long bar.  Finally, the corresponding 9-word neuron can be lit  As for whether our network can really do this step  After I explain how the network is trained, let's talk about it again.  But this is our hope  Hope that this layered structure can accomplish the goal  Further, if the neural network can really identify such edges and patterns  It can be well applied to other image recognition tasks  Even more than just image recognition  Various artificial intelligence tasks in the world  All can be transformed into abstract elements layer by layer.  For example, speech recognition  Is to identify special sounds from the original audio  Combine into specific syllables  Combine words  Recombination into phrases and more abstract concepts  Back to the topic of how neural networks work  Imagine that you want to design the activation value in the previous layer  How will you decide on the activation value in the next layer?  We need to design a mechanism to make pixels into short edges  Put the short side into a pattern  Or put patterns into numbers, etc.  In this example we will zoom in on one of the  Let's design this neuron in the second layer  Can correctly identify if there is an edge in this area of \u200b\u200bthe image  Now we need to know the parameters of this network  How should you adjust the rotary switch on the network  To make it enough to show either this pattern  Or other pixel patterns  Either it is a pattern with several sides combined into a circle or the like  We need to wire each neuron between this neuron and the first layer  All assigned a weight value  These weights are just numbers.  Then we pick up all the activation values \u200b\u200bof the first layer  Calculate their weighted sums with their corresponding weight values  I think it's better to understand these weights as a form  I will mark the positive weight value as green  Negative markers become red  The darker the color, it roughly indicates that its weight is closer to 0  Now if we assign the weight of the region of interest to a positive value  And all other weight values \u200b\u200bare assigned to 0  In this way, all pixel values \u200b\u200bare weighted by  It will only accumulate the pixel values \u200b\u200bof our area of \u200b\u200binterest.  At this point if you really want to recognize if there is an edge here  You only need to give negative weight to the pixels around the circle  In this way, the weighted sum can be maximized when the pixels in the middle are dark and the surrounding pixels are dark.  The weighted sum calculated in this way can be any size  But in this network we need to have activation values \u200b\u200bbetween 0 and 1  Then we can naturally put this weighted sum into a function  Extrude this real axis into the 0 to 1 range  One of the functions called sigmoid is very common  It is also called logistic/logistic curve.  In short, it can turn a very large negative value close to 0  A very large positive value becomes close to 1  And near value 0 is a steady increase  So the activation value in this neuron  It\u2019s actually a score of how positive the weights are.  But sometimes you don't want to light neurons even when the weighted sum is greater than 0  It may only be activated when the sum is greater than, for example, 10  At this point you need to add a bias value to ensure that you can't just stimulate  And we just need to add a negative 10 or the like after the weighted sum  Then send it to the sigmoid compression/mapping function  This additional number is called bias  All in all, the weights tell you what kind of pixel patterns this second-level neuron is focused on.  Offset tells you how much weighted and how big  Can make the excitation of neurons meaningful  We have explained one of these neurons  But every neuron in this layer will be connected to all 784 neurons in the first layer.  Each of the 784 connections carries a weight  And each neuron will add its own bias after calculating its own weighted sum.  Then output your own result through sigmoid compression  All of a sudden, we have to think about it.  16 neurons in this hidden layer  It requires a total of 784 x 16 weights and 16 offsets  And this is simply the connection between the first and second levels  The connections between other layers also have their own weight and bias  A total of nearly 13,000 weights plus bias  Equivalent to more than 13,000 knob switches on this network for you to adjust  Resulting in different results  So when we talk about how machines learn  We are actually talking about how the computer should set this big digital parameter  In order for it to solve the problem correctly  Here is a thought experiment  Imagine manually adjusting these weights and bias parameters yourself  Let the second layer identify the short edge third layer recognition pattern  Compared to using the Internet completely as a black box, I personally feel that such considerations are even more satisfying.  After all, when the output and expectations of the network deviate  If you understand the significance of these weights and offsets to some degree  Then you have to start to modify the structure.  Maybe your neural network can output correct results but the process is not the same as you think  So deep digging out the weights and offsets can effectively challenge your hypothesis  Explore all possible solutions  By the way, it's hard to understand if the entire function is written down.  I\u2019m here to show you all the symbols that can express all the connections and look cool.  After you learn neural network you will always see this symbol  We unify all the activation values \u200b\u200bin a layer into a list of vectors  Then replay all the weights between it and the next layer into a matrix  The nth row of the matrix is \u200b\u200ball the neurons in this layer  And the weight of all connections between the next nth neuron  This is the nth item of the weight matrix and vector product  Is the weighted sum of the connection weights between all activation values \u200b\u200bin this layer and the nth neuron in the next layer  Incidentally, machine learning and linear algebra are separated.  If you want to understand the meaning of matrix and matrix multiplication more vividly  Let\u2019s take a look at the nature of the fidelity series that I did before.  Especially the third chapter  Back to the topic of symbolic expression  When expressing the bias value, we don't put a single value out and discuss it separately.  Instead we will put them all in one vector  Then add it to the result of the previous matrix multiplication  In the final step we wrap the entire expression in a sigmoid  The so-called package means  Take a sigmoid for each item in the expression result vector  Now as long as we write down the weight matrix and the symbol of the corresponding vector  Transformation of Activation Values \u200b\u200bin Different Layers of Neural Networks  It can be expressed clearly and concisely  This expression also makes it easier for us to write programs  Because many libraries do a lot of optimizations in matrix multiplication (such as the numpy used in the screen)  Remember when I asked everyone to think of neurons as a digital container?  In fact, the value contained in the neuron depends on your input image  So we think of neurons as a function more accurately  It is the output of all the neurons on the previous layer.  And its output is a value between 0 and 1  In fact, the entire neural network is a function  A function that inputs 784 values \u200b\u200band outputs 10 values  However, this function is extremely complicated  It uses 13000 weight parameter offset parameters  To identify special patterns  Again, the loop uses matrix multiplication and sigmoid mapping operations.  But it is only a function after all  And its complexity can make people feel slightly relieved  If it is not so complicated  We may not be able to expect it to be more accurate in digital recognition.  How does it handle this difficult task?  How neural networks get the right weights and biases through data  This is the content of the next episode.  We will continue to explore how this particular type of neural network works  Although it is time to remind everyone to quickly subscribe to get the next new video push time  But basically the big guy hasn\u2019t got YouTube push messages.  Maybe I should say everyone rushed to subscribe to my channel  This is the neural network used by the YouTube backend recommendation algorithm  Will believe that everyone would like to see the content of this channel appear in the recommendation bar  In short, we are not alone  Thank you very much for all those who funded me on Patreon  This summer I'm slightly off the plan of the Probability Series.  But after finishing this series I will return to the plan  So everyone who is funding can get updates at any time  At the end of the show I went to Lisha Li  During her doctoral studies, she did deep learning theory.  And she is now working for a venture company called Amplify Partners.  They generously provided some funding for this video  So Lisha has something I would like to mention a little bit about is this sigmoid function  In my understanding, early networks use this  Mapping weighted sums into the range 0 to 1  It was exactly the year when it came to mimic the biological neurons  That's right  But now neural networks basically do not use sigmoid anymore  It is out of date  That's right, ReLU should be better trained  ReLU is called \"linear rectification function\" full name  This is a function that returns  The maximum value of 0 and a where a is the input of the function  You explain in the video that the neurons use this function  I think part of it is to imitate when biological neurons will inspire  So when it exceeds a threshold, ReLU is just like a constant function.  If you do not pass this threshold then you will not activate the output 0  Can be used as a simplified version  Sigmoid doesn't make training better  Or to some extent it's hard to train  Someone later tried ReLU.  The results found particularly good results in particularly deep neural networks  Thank you very much Lisha  Amplify Partners is a venture capital investment for early technology startups  Committed to funding the development of next-generation artificial intelligence applications  If you yourself know someone who wants to start a business someday  Or if you are working in a grass-and-shrub company now  Amplify is happy to contact you  They also set up a unique email address for this video.  Welcome everyone to consult ",
            "videoid": "aircAruvnKk",
            "viewCount": "1663118"
        },
        "cKxRvEZd3Mw": {
            "caption_exist": "T",
            "channel_id": "UC_x5XG1OV2P6uZZ5FSM9Ttw",
            "channel_title": "Google Developers",
            "concepts": [
                [
                    "algorithm",
                    3
                ],
                [
                    "tree",
                    1
                ],
                [
                    "string",
                    1
                ],
                [
                    "key",
                    1
                ],
                [
                    "tournament",
                    1
                ],
                [
                    "language",
                    1
                ]
            ],
            "description": "Six lines of Python is all it takes to write your first machine learning program! In this episode, we'll briefly introduce what machine learning is and why it's important. Then, we'll follow a recipe for supervised learning (a technique to create a classifier from examples) and code it up.\n\nFollow https://twitter.com/random_forests for updates on new episodes!\n\nSubscribe to the Google Developers: http://goo.gl/mQyv5L - \nSubscribe to the brand new Firebase Channel: https://goo.gl/9giPHG\nAnd here's our playlist: https://goo.gl/KewA03",
            "dislikeCount": "246",
            "duration": "PT6M53S",
            "likeCount": "29864",
            "published_time": "2016-03-30T16:59:12.000Z",
            "tags": [
                "machine learning",
                "machine learning recipes",
                "scikit learn",
                "sklearn",
                "tensorflow",
                "machine learning algorithms",
                "classifier",
                "training data",
                "decision tree",
                "supervised learning",
                "hello world",
                "Google",
                "developers",
                "machine learning applications",
                "introduction to machine learning",
                "product: web",
                "Fullname: Josh Gordon",
                "Location: NYC",
                "Team: Scalable Advocacy",
                "Type: Other",
                "GDS: Full Production",
                "Other: NoGreenScreen",
                "ai",
                "artificial intelligence",
                "what is machine learning",
                "machine learning example",
                "AI"
            ],
            "thumbnail": "https://i.ytimg.com/vi/cKxRvEZd3Mw/hqdefault.jpg",
            "title": "Hello World - Machine Learning Recipes #1",
            "transcript": " [Music]  Only six lines of code are needed  To write your first program of automated learning.  My name is Josh Gordon and today I will explain to you  How to write \"Hello World\" in automated learning.  In the first episodes of this series,  We will let you know how to start  Automatic learning from scratch.  To do that, we will work with two open-source libraries  Scikit-learn and TensorFlow.  We'll see how scikit works shortly after.  But first, we will talk quickly about the meaning of machine learning  And its importance.  Automated learning can be considered a subfield  Of artificial intelligence.  The first artificial intelligence programs were usually donated in just one order.  For example, Deep Blue was able to play chess  At the tournament level, but that was all he did.  Today we want to write one program  It is possible to solve many issues without having to rewrite it.  AlphaGo is a great example of this.  As we talk, we compete in the World Go Championship.  But similar programs are also able to learn to play Atari games.  Automated learning is what makes it possible.  The study of algorithms  Is that you learn from examples and experiences  Rather than relying on static code.  If this is the latest technology.  But we have a much simpler example  We will begin to write it today.  I will present you with an issue that seems easy  But it is impossible to solve them without mechanical learning.  Can you write a program code?  To distinguish between apple and orange?  Assuming I asked you to write a program that takes an image file as an input,  It does some analysis,  Then fruit types come out.  How do you solve this issue?  You need to start typing a lot of manual rules.  For example, you can write a program code  Calculates the number of orange pixels  And compare them with the number of green units.  The resulting ratio is supposed to give you an idea of \u200b\u200bthe type of fruit.  This works with simple images like this.  But the deeper it gets,  You'll find that the real world is messy,  It begins to penetrate the rules you write.  How to write a program code to handle black and white images,  Or images that do not have apples or orange at all?  In fact, whatever the rule you write,  I can find a picture that will not work with her.  You will need to write a lot of rules,  This is just for the sake of discrimination  Between apples and oranges.  If I gave you a new question, you would have to go back where it started.  Clearly we need better.  To solve this issue, we need an algorithm  You can find the rules for us,  So that we do not have to write them by hand.  For that purpose we will train a workbook.  You can temporarily consider the workbook a function.  It takes some data as input  A title is defined as output.  For example, I may have a picture  I would like to classify it as an apple or an orange.  Or have an email and I want to classify it  As spam or otherwise.  The technique of writing the workbook automatically  Called controlled learning.  Where you begin with examples of the issue you want to solve.  To write code for this we will use scikit-learn.  Here I will download and install the library.  There are a few different ways to do this.  But for me, the easiest way was using Anaconda.  This makes it easy to set up all dependencies  And work across different platforms well.  And with the magic of video techniques, I will move forward quickly  In the download and installation.  Once the installation is done, it can be tested  That everything works as it should  To begin running a script language Python import SK learn.  Assuming success, it becomes the first line in our program has ended,  Five remain.  To use controlled learning,  We will follow a recipe from a few standard steps.  The first step is to collect training data.  They are examples of the issue we want to resolve.  For our question, we will write a function  To classify the fruit of a fruit.  Initially, the workbook will take a description of the fruit as an input  And predicts whether an apple or an orange as an outlet  Building on properties  Such as weight and touch.  To compile training data,  Imagine we went to an orchard.  We will examine the fruits of orange and apple  We record measurements that describe them in a table.  In automated learning,  Those measurements are called properties.  To simplify, we used only two here:  The weight of each fruit of fruit in grams  Its texture can be curly or soft.  The good property makes it easy to differentiate  Among different fruit types.  Each row in the training data is an example.  It describes the fruit of one fruit.  The last column is named Title.  It determines the type of fruit in each row,  There are only two possibilities:  Apple and Orange.  The entire table represents our training data.  As these are all examples  Which we want the classifier to learn from.  The more you have training data, the more possible it becomes  Create a better workbook.  Now let's write our training manuals with code.  We will use two types of variables: properties and addresses.  Features include the first two columns,  The titles include the latter.  Properties can be considered as inputs to the work  Titles are the outputs we want.  I will change the types of variables for all properties  To integers rather than a string of characters.  So I will use 0 for 1 and 1 for soft.  I will do the same with headlines,  So I will use 0 with the apple and 1 with the orange.  These are lines two and three in our program.  The second step in our description is to use those examples  To train the workbook.  The type of workbook we will start with  The resolution tree is called.  We will go into the details of its work  In a subsequent loop.  But now, the work can be considered a box of rules.  This is because there are many types of workbook,  But the type of input and output is always fixed.  I will import the tree.  Then in the fourth line of our script we will create the workbook.  At that point, it is just an empty box of rules.  Nothing is known about apples or oranges yet.  To train it, we need an educational algorithm.  If the workbook is a box of rules,  The learning algorithm can be considered  Is the procedure that he is formulating.  Do this by finding patterns in your training data.  For example, you may notice that the orange tends to be greater weight,  So you'll create a rule that says the fruit is heavier  She is probably an orange.  In the scikit, the training algorithm  Included in the workbook object, called Fit.  Fit can be considered a shortcut  For \"finding patterns in data\".  Let's look at the details  Which explains those labyrinths in a subsequent episode.  At that point, we have a coach classified.  So let's try it and use it to classify new fruit.  The entrance to the workbook is the properties in a new example.  Let's say that the fruit we want to classify  They weigh 150 and are wrinkled.  The output will be 0 if it is an apple and 1 if it is an orange.  Before we press the Enter key and see what the workbook expected,  Let's think for a moment.  If you guess, what is your expectation of the result?  To know the solution, compare that fruit to our training notes.  It looks like an orange  They are heavy and curly.  This is my guess anyway, and if we press Enter,  This is what the workbook will expect.  If everything works with you,  If your first program of automated learning is completed.  You can create a new workbook for a new issue  Once you change the training data.  Thus making it more reusable  Of writing new rules for each issue.  Now, you may wonder why we described the fruit  Using a properties table instead of using fruit images  As our training data.  Well, pictures can be used  We shall address this in a subsequent chapter.  But as you'll see later,  The way we have implemented here is more comprehensive.  The important thing is that programming  Automated learning is not difficult.  But in order to be strictly implemented,  Some important concepts need to be absorbed.  I will begin to explain it to you in the next episodes.  Thank you so much for watching, and I'll see you then. ",
            "videoid": "cKxRvEZd3Mw",
            "viewCount": "1378234"
        },
        "dcZvhP-IqY4": {
            "caption_exist": "T",
            "channel_id": "UCkz7aKpjUB_DBd5CxayGcvg",
            "channel_title": "Future Lab",
            "concepts": [
                [
                    "arm",
                    3
                ]
            ],
            "description": "Cozmo - https://anki.com/en-us/cozmo\nNVIDIA AI Car - http://nvda.ws/2cBewNI\nMoley Robot - http://www.moley.com/\nSawyer Robot - http://www.rethinkrobotics.com/sawyer-intera-3/ \nGoogle DeepMind Alpha GO - https://deepmind.com/research/alphago/\nBerkeley BRETT (PR 2)-  http://rll.berkeley.edu/deeplearningrobotics/\nGoogle Research hand-eye coordination - https://research.googleblog.com/2016/03/deep-learning-for-robots-learning-from.html\nSolo Emotional Radio - http://uniform.net/work/projects/solo/\nGoogle Speech Recognition - https://cloud.google.com/speech/\nKuka Self-Learning robot - http://www.kuka-robotics.com/en/",
            "dislikeCount": "366",
            "duration": "PT18M36S",
            "likeCount": "4356",
            "published_time": "2016-10-25T20:05:24.000Z",
            "tags": [
                "Neural Networks",
                "deep learning",
                "artificial intelligence"
            ],
            "thumbnail": "https://i.ytimg.com/vi/dcZvhP-IqY4/hqdefault.jpg",
            "title": "10 Machine Learning based Products You MUST See",
            "transcript": "  this is Cosmo Cosmo Cosmo Cosmo is a rambunctious little kid a little bit mischievous he's smart a lot of robot in a very small package all the technology inside of Cosmo is really there for one reason to bring the magic of robotic character to life it's a very complex system and has for transmissions inside of it with probably 40 or 50 years each robot is made out of over 300 different parts there's the AI systems D robotics accelerometers the animation gyros the computer vision we're running an extremely complicated artificial intelligence inside the robot which needs to make thousands and thousands of decisions per second he's a mobile manipulator he can drive around the world he can see you he can recognize you he looked up at me and his eyes went whoa and I was like wow he just recognized me gives you goosebumps because you realize that this is a little character who actually understands who you are and what role you play in his world figuring out the path to a unique personalities it's an ongoing question I think we did about 40-50 Studies on just little nuances looking at the interface with the monitor where the eyes I'm going to look at you Cosmo moves the head and problems you every little detail have its special attention paid to it we literally have a rigged up version of Cosmo in Maya where our animators can animate him using the exact same techniques that they would use for digital characters except the output isn't rendered the output is actually Cosmo behaving in the we've been looking for ways to make it either feel more organic more imperfect so that it feels smaller than he made it Oh rethink robotics family of robots operate on the intera software platform this revolutionary software does not require the use of a teach pendant or keyboard to program the robot in fact you don't program the robot at all with our smart collaborative robots all you need to do is move the arms through the motions to train it how to do a task you train by demonstration there are a few simple buttons on the arm and on the robots wrist we call it the cuff which allows you to train a task on the robot's cuff there is a sensor which lets the robot know you are ready to work with it when you grab it the arm goes into a zero gravity mode which allows you to effortlessly move the arm through the work space show it what you want it to do and then it's as easy as hitting run the robot will go to work the simple train by demonstration means you don't need to hire employees with special programming skills your existing staff can train and deploy our robots isn't it time to rethink robot programming games are kind of microcosm of the outside world that's why games were invented that's why humans find it fun to play there's a rich history of computer tackling board games it started with games like backgammon drafts and then finally there was deep blue in 97 that beat Kasparov at chess which was always a huge watershed moment for game AI since then the really big remaining sort of Holy Grail if you like has been go in chess a number of possible moves about 20 for the average position and go it's about 200 another way of viewing the complexity of go is that the number of possible configurations of the board is more than the number of atoms in the universe if you ask a great go player why they play the particular move sometimes they'll just tell you it felt right so you can the one way you can think of it is that go is a much more intuitive game whereas chess is a much more logic based game alphago is our program to actually try and crack go we played the European champion fan way and a five-game match we have an estimate how strong a program is but of course you never know when you play a human player they do all sorts of very interesting creative things that your programs not necessarily do so there's always an unknown when we play the first again I lose I think he was a bit stunned off to the first game and I think he was unsure as to whether he hadn't prepared enough or whether the program was really strong well I think after first again maybe he don't like fight in like play slowly so his YP begin the second game I fight I think maybe I'm right it's why for another game I fight all the time no it's completely done but I lose all my game alphago won five nil which is the first time ever my program has been a professional player the way I see where we are now is that we've beaten the European champion now and the next step for us is to try and challenge the legendary play at least at all you can think of as the Roger Federer of go we always used to talk about well if we could eventually crack go and have a program that could be the world champion then we must have invented some generic general-purpose algorithm so maybe we're on the cusp of all of them and we're very excited about it but it is just one a rung on the ladder towards solving we believe that neural networks should work better than the dumb existing technology that's basically just table lookup and then in 2009 two of my students with a little input from me got it working better and the first time it just worked a little bit better but then it was obvious that this could be developed something that worked much better the brain has these gazillions of neurons or computing in parallel and all of the knowledge in the brain is in the strength of the connection between yours what I mean by a neural net is something that's simulated on a conventional computer but is designed to work in very very roughly the same way as the brain so until quite recently people got features by hand engineering they looked at sound waves and they did free analysis and they tried to figure out what features should we feed to the pattern recognition system and the thing by neural networks is they learn their own features and in particular they can learn features and then they can learn features of features and then they can learn features of features of features and that's like a huge improvement just beef recognition but you can also use them for language understanding tasks and the way you do this is you represent words in very high dimensional spaces we can now deal with analogies where word is represented as a list of numbers so for example if I take the list of 100 numbers that represents Paris and I subtract from it France and I add to it Italy and if I look at the numbers I've got the closest thing is the list of numbers that represents Rome so by first converting words into these numbers using a neural net you can actually do this analogical reasoning I predict that in the next five years it will become clear that these big deep neural networks with the new learning algorithms are going to give us much better language understanding",
            "videoid": "dcZvhP-IqY4",
            "viewCount": "395868"
        },
        "nKW8Ndu7Mjw": {
            "caption_exist": "T",
            "channel_id": "UCJS9pqu9BzkAMNTmzNMNhvg",
            "channel_title": "Google Cloud Platform",
            "concepts": [
                [
                    "alcohol",
                    7
                ],
                [
                    "work",
                    3
                ],
                [
                    "matrix",
                    2
                ],
                [
                    "system",
                    2
                ],
                [
                    "scale",
                    1
                ],
                [
                    "name",
                    1
                ],
                [
                    "walk",
                    1
                ],
                [
                    "yield",
                    1
                ],
                [
                    "driver",
                    1
                ],
                [
                    "iteration",
                    1
                ],
                [
                    "cloud",
                    1
                ],
                [
                    "shape",
                    1
                ],
                [
                    "language",
                    1
                ],
                [
                    "mean",
                    1
                ],
                [
                    "light",
                    1
                ],
                [
                    "cancer",
                    1
                ],
                [
                    "power",
                    1
                ],
                [
                    "scientists",
                    1
                ]
            ],
            "description": "How can we tell if a drink is beer or wine? Machine learning, of course! In this episode of Cloud AI Adventures, Yufeng walks through the 7 steps involved in applied machine learning. \n\nThe 7 Steps of Machine Learning article: https://goo.gl/XEo6i2\n\nWatch more episodes of AI Adventures here: https://goo.gl/UC5usG\n\nTensorFlow Playground: http://playground.tensorflow.org\nMachine Learning Workflow: https://goo.gl/SwLnSz\n\nWant more machine learning? Subscribe to the channel: https://goo.gl/S0AS51",
            "dislikeCount": "322",
            "duration": "PT10M36S",
            "likeCount": "12625",
            "published_time": "2017-08-31T19:19:11.000Z",
            "tags": [
                "Machine Learning",
                "TensorFlow",
                "Big Data",
                "Cloud",
                "Artificial intelligence",
                "AI",
                "ML",
                "Prediction",
                "Data Preprocessing",
                "big data processing",
                "Ai adventures",
                "devops",
                "google cloud platform",
                "google cloud",
                "cloud",
                "cloud platform",
                "cloud data",
                "cloud services",
                "google cloud services",
                "product: cloud",
                "fullname: Yufeng Guo",
                "Location: MTV",
                "Team: Scalable Advocacy",
                "Type: DevByte",
                "GDS: Full Production",
                "Other: NoGreenScreen"
            ],
            "thumbnail": "https://i.ytimg.com/vi/nKW8Ndu7Mjw/hqdefault.jpg",
            "title": "The 7 Steps of Machine Learning",
            "transcript": "  from detecting skin cancer to sorting cucumbers to detecting escalators in need of repair machine learning has granted computer systems entirely new abilities but how does it really work under the hood let's walk through a basic example and use it as an excuse to talk about the process of getting answers from your data using machine learning welcome to cloud AI adventures my name is Yu Feng Guo on this show we'll explore the art science and tools of machine learning let's pretend that we've been asked to create a system that answers the question of whether a drink is wine or beer this question answering system that we build is called a model and this model is created via a process called training machine learning the goal of training is to create an accurate model that answers our questions correctly most of the time but in order to train a model we need to collect data to train on this is where we will begin our data will be collected from glasses of wine and beer there are many aspects of drinks that we could collect data on everything from the amount of foam to the shape of the glass but for our purposes we'll just pick two simple ones the color as a wavelength of light and the alcohol content as a percentage the hope is that we can split our two types of drinks along these two factors alone we'll call these our features from now on color and alcohol the first step to our process will be to run out to the local grocery store buy up a bunch of different drinks and get some equipment to do our measurements a spectrometer for measuring the color and a hydrometer to measure the alcohol content it appears that our grocery store has an electronics hardware section as well once our equipment and and booze we got it all set up it's time for our first real step of machine learning gathering that data this step is very important because the quality and quantity of data that you gather will directly determine how good your predictive model can be in this case the data we collect will be a color and alcohol content of each drink this will yield us a table of color alcohol content and whether it's beer or wine this will be our training data so a few hours of measurements later we've gathered our training data and had a few drinks perhaps and now it's time for our next step of machine learning data preparation where we load our data into a suitable place and prepare it for use in our machine learning training well first put all our data together then randomize the ordering we wouldn't want the order of our data to affect how we learned since that's not part of determining whether a drink is beer or wine in other words we want to make a determination of what a drink is independent of what drink came before or after it in the sequence this is also a good time to do any pertinent visualizations of your data helping you see if there is any relevant relationships between different variables as well as show you if there are any data imbalances for instance if we collected way more data points about beer than wine the model we trained will be heavily biased toward guessing that virtually everything it sees is beer since it would be right most of the time however in the real world the model may see beer and wine an equal amount which would mean that it would be guessing beer wrong half the time we also need to split the data into two parts the first part used in training our model will be the majority of our data set the second part will be used for evaluating our trained models performance we don't want to use the same data that the model was trained on for evaluation since then it would just be able to memorize the questions just as you would want to use the questions from your math homework on the math exam sometimes the data we collect it needs other forms of adjusting and manipulation things like deduplication normalization error correction and others these would all happen at the data preparation step in our case we don't have any further data preparation needs so let's move on forward the next step in our workflow is choosing a model there are many models that researchers and data scientists have created over the years some are very well suited for image data others for sequences such as text or music some for numerical data and others for text-based data in our case we have just two features color and alcohol percentage we can use a small your model which is a fairly simple one that'll get the job done now we move on to what is often considered the bulk of machine learning but training in this step we will use our data to incrementally improve our models ability to predict whether a given drink is wine or beer in some ways this is similar to someone first learning to drive at first they don't know how any of the pedals knobs and switches work or when they should be pressed or used however after lots of practice and cracking for their mistakes a licensed driver emerges moreover after a year of driving they've become quite adept at driving the act of driving and reacting to real-world data has adapted their driving abilities honing their skills we will do this on a much smaller scale with our drinks in particular the formula for a straight line is y equals MX plus B where X is the input M is the slope of the line B is the y-intercept and Y is the value of the line at that position X the values we have available to us to adjust or Train are just N and P where the M is that slope and B is the y-intercept there is no other way to ascetics affect the position of the line since the only other variables are X our input and Y our output in machine there are many amps since there may be many features the collection of these values is usually formed into a matrix that is denoted W for the weights matrix similarly for B we arrange them together and that's called the biases the training process involves initializing some random values for W and B and attempting to predict the outputs with those values as you might imagine it does pretty poorly at first but we can compare our models predictions with the output that it should have produced and adjust the values in W and B it's just that we will have more accurate predictions on the next time around so this process then repeats each iteration or cycle of updating the weights and biases is called one training step so let's look at what that means more concretely for our data set when we first start the training it's like we drew a random line through the data then as each step of the train progresses the line moves step by step closer to the ideal separation of the wine and beer once training is complete it's time to see if the models any good using evaluation this is where that data set that we set aside earlier comes into play evaluation allows us to test our model against data that has never been used for training this metric allows us to see how the model might perform against data that has not yet seen this is meant to be representative of how the model might perform in the real world a good rule of thumb I use for a training evaluation split is somewhere on the order of 8020 or 70/30 much of this depends on the size of the original source data set if you have a lot of data perhaps you don't need as big of a fraction for the evaluation data set once you've done evaluation it's possible that you want to see if you can further improve your training in any way we can do this by joining some of our parameters there were a few that we implicitly assumed when we did our training and now is a good time to go back and test those assumptions try their values one example of a parameter we can tune is how many times we've run through the training set during training we can actually show the data multiple times so by doing that we will potentially lead to higher accuracies another parameter is learning rate this defines how far we shift the line during each step based on the information from the previous training step these values all play a role in how accurate our model can become and how long the training takes for more complex models initial conditions can play a significant role as well in determining the outcome of training differences can be seen depending on whether a model starts off training with values initialized to zeros versus some distribution of the values and what that distribution is as you can see there are many considerations at this phase of training and it's important that you define what makes a model good enough for you otherwise we might find ourselves tweaking parameters for a very long time now these parameters are typically referred to as hyper parameters the adjustment or tuning of these hyper parameters still remains a bit more of an art than a science and it's an experimental process that heavily depends on the specifics of your model and training process once you're happy with your training and hyper parameters guided by the evaluation step it's finally time to use your model to do something useful machine learning is using data to answer questions so prediction or inference is that step where we finally get to answer some questions this is the point of all of this work where the value of machine learning is realized we can finally use our model to predict whether a given drink is wine or beer given its color and alcohol percentage the power of machine learning is that we were able to determine this and how to differentiate between wine and beer using our model rather than using human judgment manual rules you can extrapolate the ideas presented today to other problem domains as well where the same principles apply gathering data preparing that data choosing a model training it and evaluating it doing your hyper parameter tuning and finally prediction if you're looking for more ways to play with training and parameters check out the tensorflow playground it's a completely browser-based machine learning sandbox where you can try different parameters and run training against mock datasets and don't worry you can't break the site of course we will encounter more steps and nuances in future episodes but this serves as a good foundational framework to help us think through the problem giving us a common language to think about each step and go deeper in the future next time on AI adventures we will build our first real machine learning model using code no more drawing lines and going over algebra [Music]",
            "videoid": "nKW8Ndu7Mjw",
            "viewCount": "740195"
        },
        "qv6UVOQ0F44": {
            "caption_exist": "T",
            "channel_id": "UC8aG3LDTDwNR1UQhSn9uVrw",
            "channel_title": "SethBling",
            "concepts": [
                [
                    "species",
                    2
                ]
            ],
            "description": "MarI/O is a program made of neural networks and genetic algorithms that kicks butt at Super Mario World.\nSource Code: http://pastebin.com/ZZmSNaHX\n\"NEAT\" Paper: http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf\nSome relevant Wikipedia links:\nhttps://en.wikipedia.org/wiki/Neuroevolution\nhttps://en.wikipedia.org/wiki/Evolutionary_algorithm\nhttps://en.wikipedia.org/wiki/Artificial_neural_network\nBizHawk Emulator: http://tasvideos.org/BizHawk.html\n\nSethBling Twitter: http://twitter.com/sethbling\nSethBling Twitch: http://twitch.tv/sethbling\nSethBling Facebook: http://facebook.com/sethbling\nSethBling Website: http://sethbling.com\nSethBling Shirts: http://sethbling.spreadshirt.com\nSuggest Ideas: http://reddit.com/r/SethBlingSuggestions\n\nMusic at the end is Cipher by Kevin MacLeod",
            "dislikeCount": "2111",
            "duration": "PT5M58S",
            "likeCount": "119528",
            "published_time": "2015-06-13T19:00:01.000Z",
            "tags": [
                "Super Mario World",
                "Machine Learning",
                "Neural Network",
                "Genetic Algorithm",
                "SethBling",
                "Neuro Evolution",
                "NEAT",
                "MarI/O"
            ],
            "thumbnail": "https://i.ytimg.com/vi/qv6UVOQ0F44/hqdefault.jpg",
            "title": "MarI/O - Machine Learning for Video Games",
            "transcript": "  welcome back settling here you're watching a skilled player play Super Mario World but this player is not human it's a computer program I wrote called Mario this program started out knowing absolutely nothing about Super Mario World or super Nintendos in fact it didn't even know that pressing right on the controller would make the player go towards the end of the level learned all of these things through a process called neuro evolution in this video I wouldn't teach you about how Mario learned to beat this level don't explains one what his brain looks like and how it's all based on actual biological evolution so let's start out by actually looking at Mario's brain let's play it again but this time we'll look at Mario's brain as it's making the decisions of what buttons to press it's going to look a bit complicated at first but don't worry I'll help break it down for you this structure of colored lines and blinking boxes is called a neural network it's a simple mathematical model for how our brain works but it can produce some very complicated behavior with enough computational power a neural network could come close to simulating a real human brain but modern technology isn't there yet on the left side you have the inputs this is what Mario sees it's a simplified view of the level the white square of stand for blocks the player can stand on and the black squares stand for moving objects like enemies or mushrooms on the right side you have the outputs these are the eight buttons that Mario is able to press by using its neural network in between the inputs and the outputs all those lines and boxes those are the neural network each free-floating box is called a neuron and the lines connecting those boxes are like the axons and dendrites in a human brain I did make given time only some of these neurons and connections are to being used and this is what people talk about when they say you only use 10% of your brain the neural network you're seeing is a pretty complicated one and it got so complicated as a result of a 24 hour evolutionary learning session so to explain how neural networks work let's rewind about 24 hours and look at how the whole process started this is what mario looked like at the beginning of its training session all the way back in generation number zero the program is probably even dumber than you thought at this point often it just stands there and doesn't even press any buttons if my i\u00f6 stands still for too long it'll cut off a simulation and try the next neural network so it's mostly just jumping from one simulation to the next but occasionally the neural network says to press the right button and the player starts walking right behavior isn't complicated but it's enough to make at least some progress in the level let's take a look at a sample neural network to understand just how that works this is one of the randomly generated neural networks that appeared in the first generation of the simulation there are some green lines in a red line and one neuron in the middle here's how it works a green line is a positive connection and red line is a negative connection a green line reading from a black or white Square will turn its output the same color a red line reading from a black our white square will turn its output the opposite color in this case the green lines read from the platform that the player is standing on and make the neural network press the right button as long as the player is standing on it however when the red line reads a black square representing one of those capes Koopas it presses the a button and Mesa player jump is that this puts the player in a position where the green lines are no longer reading a white square so the right button turns off and Mario just stands there this is a really basic example that illustrates how a more complicated neural network might operate the more lines and neurons you have the more nuance to the decisions can be so how exactly do we get those more complicated neural networks the answer is evolution when mario gets further right on the screen its Fitness goes up in this case Fitness is a function of how far right it gets and how quickly it gets there only the neural networks that produce the highest Fitness are selected to be bred creating the next generation it took 34 generations of genetic breeding and Fitness evaluation before Mario was able to finish the level without dying and get a fitness score about 4000 you can see there were several places it got stuck for a few generations but it always evolved out of those ruts let's take a look at a few of those ruts you can look at the top-left corner of the screen to see what generation number each rut occurred on this process of picking the fittest individuals from each generation breeding them together and adding random mutations very closely matches the actual process of biological evolution that took single-celled organism and produced intelligent humans that's the power of neuro evolution and though we don't yet have enough computational resources to produce something on the level of the human brain this way it's kind of neat to see what I can do on one of my favorite games I didn't come up with this idea on my own this algorithm is called NEET which stands for neuro evolution of augmenting topologies and it's based on a paper by Kenneth Stanley and Ari stow me cool einen it's a really great paper that describes how to use genetic algorithms to build up neural networks from bare bones without presupposing the best structure for the neurons and their connections also includes some really cool ideas for separating genomes into species which a lot of genetic algorithms don't really try and do I wrote Mario from scratch in Lua as a plugin for an emulator called bizarre as I close out the video let's take a look at the fittest neural network in each generation it's kind of cool how sometimes you can see them make modifications to each other and improve performance but sometimes an entirely new species becomes prominent and dominates the others if you'd like to do more reading about the concepts I talked about in this video I provided some links the video description I had a lot of fun working on this project and I learned a ton hopefully you learned something too it's about it thanks for",
            "videoid": "qv6UVOQ0F44",
            "viewCount": "6693298"
        },
        "y9U10qdDQqk": {
            "caption_exist": "T",
            "channel_id": "UCqoAEDirJPjEUFcF2FklnBA",
            "channel_title": "StarTalk",
            "concepts": [
                [
                    "algorithm",
                    1
                ],
                [
                    "tree",
                    1
                ],
                [
                    "walk",
                    1
                ]
            ],
            "description": "This week Neil deGrasse Tyson and Chuck Nice discuss the differences between AI and machine learning with special guest, MKBHD himself, Marques Brownlee. Keep ahead of the robots at https://brilliant.org/StarTalk where you'll find courses that enrich your problem-solving skills.\n\n**********************************\nAlso, check out this MKBHD video where Neil, Chuck, and Marques talk some serious tech: https://www.youtube.com/watch?v=pqQrL1K0Z5g\n\nGet 20% off Brilliant: https://brilliant.org/StarTalk/\n***********************************\nFor more exclusive content and commercial-free full episodes, subscribe to StarTalkAllAccess.com \n\nIf you love StarTalk Radio, don't miss out on any StarTalk news. Sign up for our free newsletter: http://www.startalkradio.net/newsletter/youtube/\n \nCatch up with StarTalk Radio around the web:\niTunes - http://bit.ly/SOHDg6\nSoundCloud - https://soundcloud.com/startalk\nStitcher - http://www.stitcher.com/podcast/startalk\nTuneIn - http://tunein.com/radio/StarTalk-Radio-p334521/\nGoogle Play Music - https://play.google.com/music/m/I6lczawbvvafjdburzbcc23aacu?t=StarTalk_Radio\nTwitter - https://twitter.com/StarTalkRadio\nFacebook - http://www.facebook.com/StarTalkRadio\nGoogle+ - https://plus.google.com/+startalkradio\nSnapchat - https://www.snapchat.com/add/startalk-radio\nPinterest - http://pinterest.com/startalk/\nTumblr - http://startalkradio.tumblr.com/\nInstagram - http://instagram.com/startalkradio\nThe List App - https://li.st/startalkradio\n\n------\nHosts\nNeil deGrasse Tyson, Chuck Nice\n\nDirector\nDave Wiskus\n\nWriters\nPJ Scott-Blankenship, Josh Silverman\n\nAnimation Director  \nB\u00e5rd Edlund\n\nAnimator\nDavid Powell\n\nEditor \nEric Schneider\n\nSound Designer\nJay Pellizzi\n\nMusic\nAirplane Mode\n\nProducers\nAmanda McLoughlin, Ben Ratner\n\nStarTalk Radio Executive Producers\nNeil deGrasse Tyson, Helen Matsos\n\nStarTalk Radio Producers\nLaura Berland, Jeffrey Lee Simons, Lindsey N. Walker, Johnny Bontemps\n\nBrilliant.org Producers \nCalvin Lin, Josh Silverman",
            "dislikeCount": "151",
            "duration": "PT7M27S",
            "likeCount": "8174",
            "published_time": "2018-04-03T15:02:37.000Z",
            "tags": [
                "neil degrasse tyson",
                "mkbhd",
                "chuck nice",
                "ai",
                "ml",
                "artificial intelligence",
                "machine learning",
                "podcast",
                "startalk",
                "startalk radio"
            ],
            "thumbnail": "https://i.ytimg.com/vi/y9U10qdDQqk/hqdefault.jpg",
            "title": "MKBHD & Neil Tyson \u2014 Artificial Intelligence vs. Machine Learning",
            "transcript": "  so Elon Musk and I keep having this argument I say I say the self-driving cars are AI he says that they aren't okay what do you know Elon and you really wants to believe you're chillin with Elon listen Elon and I go back a long way don't you go back just because he doesn't know what is AI how can you define if you were to put machine learning and AI into these two Venn diagrams I think machine learning would fall inside the AI bubble but it wouldn't fill it so I guess that's a nice way of saying AI is very broad and machine learning is this applicable more directional application of AI right so where were you teach teaching a computer to be really good at chess or a teaching a computer to be really good at navigating on a road in a 3,000 pound steel box self-driving right things like that are applications of machine learning they can learn the situation they're in over and over and over and get better at it which is something you can do with AI as well as many other things so now what happens when the machine is able to teach itself because that is what human beings do that would still be machine learning in fact that's essentially what it does after a while you feed it an algorithm enough data over and over again that is able to teach itself based on its previous self that'll happen with a chess robot playing against a chess robot that's how it gets better plus it can play an entire game of chess very fast right oh yeah with computer power race a little more instant day one yeah put on there three one more abstract less direct topics like having a conversation I don't know if you've ever tried Siri or Google assistant or bixby for that matter not that good they learn everyday they get better at things like hey what's the weather in Akron Ohio and it'll tell you and you'll say what's the population there it knows you're talking about Akron without you saying it again and it answers that question kind of like a human would because of the proximity and time we're having to manage and eccrine yes so it identifies what was the noun in the previous question and clicks it the next one so things like that are are getting better but still it's not as direct as truck has a problem single remembers the nouns that I have in the sentence live a sentence is actually happening I am having difficulty you need more RAM or AI which is a sort of a bigger more broad fear would be like what if it goes beyond doing what it's programmed to you what if it learns about itself its own existence I've heard you mention earlier I'll just unplug it if it ever gets out of hand but what if it decides it you know what I don't want to be unplugged and it starts to figure out ways and it's a weird physical analogy but it starts to figure things out that it's not directly programmed to do and whether or not those things get out of hand or get scary or get weird is a totally open-ended question you just you just described sky meant that's just what you just described is Skynet it's a network of computers that become self-aware because of one central computer and then decides oh you know what I think I want to run this whole thing I need to protect myself from risk and separate myself from that human variable right and just go rogue I don't think we're gonna build the robot that can do everything because what good is that we have very specific needs that will create computers to do that we've been doing it and we'll continue to do so I don't need the clock the machine that makes my coffee to be the one that drives my car I don't need that that will be kind of cool though yeah it would be a really weird machine would be a weird people to think that up and to make that happen and people keep thinking robots as being humanoid and they walk and talk like in the Jetsons the maid Rosie yeah that's creepy I'm not even gonna I'm not even gonna ask beyond that okay that's just creepy and she had a apron a maid's apron and so there was a day out of which I grew up where no one imagined a machine as a robot a robot had to be humanoid so this self-driving car would be a robot that got in a car and drove you somewhere not that the car was the robot right that an automatic coffee maker was a robotic maid that made your coffee for you not the coffee maker that made so so I see distributed AI making our lives easier but let me ask you something because there's a whole other side of this equation if it replaces 80 percent of the jobs in society then how does anyone pay rent and for the groceries or is there or is there gonna be sort of a government minimum income enabled by all the money earned by the robots that took your job people's jobs will become making those robots optimizing those robots there will be a lot more scientists a lot more people coding and and figuring out ways to make those robots better and more efficient as opposed to those physical manual things that the robots their own damn problem with that is we are now we now have robots that actually code yeah so we have robots we have robots that's six robots we have robots that manufacturer so going back to Neil's point at some point I think you're gonna have to have a universal basic income that you just give people here for being so that robots so that basically they can have time to do bigger and better things with a philosophical question who fixes the robot that fixes the Roofus I was gonna say is it robots all the way down there's a robot I'm telling you started a little tree down to one unit robot and the one at the bottom has got to be human yeah and his name is Elon Musk just sitting around what does a to drop wait like waiting for that robot that can't fix itself so just might everything we just said robots could take your job but machines have trouble when it comes to crucial open-ended endeavors like problem-solving and communicating ideas thank God or more importantly telling jokes so for now but if you're still unsure then you can go get comfortable at brilliant doc org which guides you in problem-solving understanding concepts and to get started go to brilliant work slash start off to get 20% off your premium subscription so that you can be an effective problem solver and secure our future okay if you want to see more videos from start off hit the subscribe par and click the little Bell button to get notifications every single time that we upload a video and give us a like or a comment to express your passion and we want to say thanks to mph D for being with us and we're gonna be your channel as well exactly right cool so make sure you check him out and as always I bid you to keep looking up [Music]",
            "videoid": "y9U10qdDQqk",
            "viewCount": "197801"
        },
        "z-EtmaFJieY": {
            "caption_exist": "T",
            "channel_id": "UCX6b17PVsYBQ0ip5gyeme-Q",
            "channel_title": "CrashCourse",
            "concepts": [
                [
                    "algorithm",
                    4
                ],
                [
                    "mean",
                    2
                ],
                [
                    "matrix",
                    2
                ],
                [
                    "block",
                    1
                ],
                [
                    "forest",
                    1
                ],
                [
                    "walk",
                    1
                ],
                [
                    "linear",
                    1
                ],
                [
                    "polynomial",
                    1
                ]
            ],
            "description": "So we've talked a lot in this series about how computers fetch and display data, but how do they make decisions on this data? From spam filters and self-driving cars, to cutting edge medical diagnosis and real-time language translation, there has been an increasing need for our computers to learn from data and apply that knowledge to make predictions and decisions. This is the heart of machine learning which sits inside the more ambitious goal of artificial intelligence. We may be a long way from self-aware computers that think just like us, but with advancements in deep learning and artificial neural networks our computers are becoming more powerful than ever. \n\nProduced in collaboration with PBS Digital Studios: http://youtube.com/pbsdigitalstudios \n\nWant to know more about Carrie Anne?\nhttps://about.me/carrieannephilbin\n\nThe Latest from PBS Digital Studios: https://www.youtube.com/playlist?list=PL1mtdjDVOoOqJzeaJAV15Tq0tZ1vKj7ZV\n\nWant to find Crash Course elsewhere on the internet?\nFacebook - https://www.facebook.com/YouTubeCrash...\nTwitter - http://www.twitter.com/TheCrashCourse\nTumblr - http://thecrashcourse.tumblr.com \nSupport Crash Course on Patreon: http://patreon.com/crashcourse\nCC Kids: http://www.youtube.com/crashcoursekids",
            "dislikeCount": "96",
            "duration": "PT11M51S",
            "likeCount": "6448",
            "published_time": "2017-11-01T21:50:13.000Z",
            "tags": [
                "John Green",
                "Hank Green",
                "vlogbrothers",
                "Crash Course",
                "crashcourse",
                "education",
                "computers",
                "computing",
                "computer science",
                "compsci",
                "machine learning",
                "artificial intelligence",
                "ai",
                "deep learning",
                "neural networks",
                "ibm",
                "watson",
                "google",
                "alpha go",
                "siri",
                "alexa",
                "google assistant",
                "self-driving cars",
                "autonomous cars"
            ],
            "thumbnail": "https://i.ytimg.com/vi/z-EtmaFJieY/hqdefault.jpg",
            "title": "Machine Learning & Artificial Intelligence: Crash Course Computer Science #34",
            "transcript": " Hi, I'm Carrie Ann, and welcome to the Computer Science course!  As we have touched several times in this series, computers are supernatural in store, organize and  Retrieve and process huge amounts of data.  This is ideal for things like e-commerce sites with millions of goods for sale,  And to store billions of health records for quick access by doctors.  But what if we want to use computers not only to fetch data and display it, but actually to  Making data decisions?  This is the core of algorithms - automatic learning that gives computers the ability to learn from  Data, and then make predictions and decisions.  Computer programs with this ability are very useful in answering questions like e-mail  spam?  Does a person have irregular heartbeat?  What video should YouTube recommend after this?  While they are useful, perhaps half of these programs will not be \"smart\"  In the same way that we think of human intelligence.  So, although standards often vary, most computer scientists say that  Automated learning is a set of techniques that belong to a more ambitious goal than artificial intelligence  Or AI short.  INTRO  Automated learning and AI algorithms tend to be very sophisticated.  So instead of going into how mechanisms work, we'll focus on what  The algorithms do in theory.  Let's start with a simple example: make a decision if a butterfly is a luna butterfly or an emperor butterfly.  This decision process is called a classification, and is called an algorithm that it does  The work.  Although there are techniques that can use raw data for training - such as images and  Voices - Many algorithms reduce the complexity of things in the real world and what phenomena to  The features are named.  Features are values \u200b\u200bthat make a meaningful distinction to the things we want to classify.  In our example of the butterfly, we are going to use two features: \"wings\" and \"cluster.\"  In order to train our machine learning workbook to make good expectations, we will need  To training data.  To get them, we will send an expert in the field of insects to the forest to collect data for each of the Luna butterflies  And the emperor.  These experts can identify different butterflies. They not only record feature values,  But they also label this data with butterfly specifications  This is called named data.  Because it only has two features, it is easy to visualize this data in a dispersion scheme.  Here, I drew data for 100 emperor butterfly in red and 100 butterfly blue.  We can see that species form two groups, but ....  There is some overlap in the middle ... so it is not quite clear how to separate  The two are in the best shape.  This is what machine learning algorithms do - find the perfect chapter!  I will dismiss it theoretically and consider that anything less than 45 mm in the wings is likely  To be the emperor's butterfly.  We can add another section that in addition is considered to be a mass less than 0.75 for  We believed that the butterfly is the emperor.  These lines that intersect the resolution space are called resolution boundaries.  If we look at the data we have, we can see that 86 emperor butterfly belong properly  Into the emperor's decision area, but 14 incorrectly belong to the place of the Luna butterfly.  On the other hand, the 82 butterfly luna will be correct, with 18 falling on the wrong side.  A table, like this, shows where the work gets things right and the wrong is called  Matrix confusion ... which probably should also be the title of two of the last films in  Matrix Trilogy!  Note that there is no way for us to draw lines that give us 100% accuracy.  If we reduce our frontier limits, we will misrepresent more emperor butterflies such as Lunas.  If we raise it, we will misrepresent more Luna butterflies.  The function of automated learning algorithms, at a high level, is to maximize the correct classifications  While minimizing errors  On our training data, we got 168 true butterfly, 32 butterfly error, for average  Accuracy rating 84%.  Now, using these limits of resolution, if we intend to go out into the woods and encounter a butterfly  Unknown, we can measure its features and draw them and place them on the space of our decision.  These are unnamed data.  The limits of our decision provide a guess for what types of butterflies.  In this case, expect it as a luna butterfly.  This approach is simple, dividing the decision space into boxes, can represent  The so-called resolution tree, which looks like these images or can be written  In code using If-Statements, such as this.  Algorithm learning machine that produces decision trees must choose what features  Which you divide ... Then for each of these features, what values \u200b\u200bto use to divide.  Decision trees are just one basic example of automated learning technology.  There are hundreds of algorithms in computer science today.  And more is being published all the time.  Even a few algorithms use many decision trees that work together to give prediction.  Computer scientists have haunted it with forests ... because it contains a lot of trees.  There are also approaches based on \"non-tree\", such as Support Vector Machines, which in essence  Cut the resolution space using arbitrary lines.  These lines do not have to be straight lines. Can be either polynomial or  Another mathematical function.  As before, it's a machine learning function algorithm to know the best lines to provide  The limits of the most accurate resolution.  So far, the examples I mentioned have only had two features, so easy enough for humans  To know it.  If we add a third feature, let's say, the length of the antennas, then 2D lines becomes 3D levels,  It creates the limits of the decision in three dimensions.  These levels do not have to be just straight.  In addition, the useful workbook really deals with many different types of butterflies.  Now I think you agree with me that it becomes very complicated to know by hand ...  But even this is a very simple example - only three features  And five kinds of butterflies.  We can still show it in this 3D scatter chart.  Unfortunately, there is no good way to visualize four features simultaneously, or twenty features,  Suppose hundreds or even thousands of features.  But this is what many real-world machines face.  Can you imagine trying to figure out an equation of space spanning thousands of dimensions?  Of decision space?  Probably not, but computers, with intelligent machine learning algorithms can do it ... and they all do  Long day, on computers in places like Google, Facebook, Microsoft and Amazon.  Technologies such as Decision Trees and Support Vector Machines are firmly rooted in  The field of statistics, which dealt with making confident decisions, using data,  Before computers actually existed.  There is a very large category of statistical automation techniques used widely, however  There are also some approaches with no assets in statistics.  The most prominent are artificial neural networks, which were inspired by nerve cells in our brains!  To understand biological neurons, check out our general review of three parts here, but basically  Neurons are cells that transmit and transmit messages using electrical and chemical signals.  They take one or more inputs from other cells, process those signals, and then issue  Special reference.  They belong to large interconnected networks that are capable of handling complex information.  Just like your mind watching this video.  Artificial neurons are very similar.  Each takes a series of inputs, combines them, and emits a signal.  Instead of electrical or chemical signals, the artificial nerve cells take the numbers to their inside, and release  Numbers out.  They are arranged in layers connected by connections, a network problem of neurons, which brings us to  The name.  Let's go back to the butterfly example to see how neural networks can be used for classification.  Our first layer - the input layer - provides data from a single butterfly that needs to be categorized.  Again, we will use a block and two wings.  At the other end, we have an output layer, with two neurons: one for the butterfly of the emperor  And another for a luna butterfly.  The most exciting neurons are the classification decision.  In the middle, we have a hidden layer, which converts inputs into outputs, and does the work  Difficult of classification.  To see how this is done, let's approach the neuron in a hidden layer.  The first thing Neuron does is hit both inputs with a certain weight, let's  We say 2.8 for the first entries, and 0.1 for the second entry.  Then, it combines these balanced inputs together, which in this case, the grand total of  9.74.  Neurons then apply bias to this result - in other words, it adds or subtracts  Fixed value, for example, minus six, for a new value of 3.74.  This bias and weighted input are initially random values \u200b\u200bwhen creating the grid  Neurosis.  Then, the algorithm works, and begin to change and replace all those values \u200b\u200bto train the neural network,  Using data labeled for training and testing.  This happens several times, gradually improving accuracy - a process that resembles  Much human learning.  Finally, neurons have an activation function, also called a transport function, that is  Applied to the output, leading a final mathematical adjustment down to the result.  For example, specify a domain value of one negative, positive, or make  Any negative value to 0.  We will use a linear conversion function that passes the value through which unchanged, so 3.74  It stays as 3.74.  So for our example, given inputs 55 and 82, output is 3.74.  This is just one neuron, but the process of weight, combination, displacement and application  The activation function is applied to all the neurons in the layer, and the values \u200b\u200bare spread  Forward in the grid, one layer at a time.  In this example, the highest rated output neuron is our resolution: Luna Butterfly.  More importantly, the hidden layer does not have to be just one layer ... it can have many layers  Deep.  From here comes the deep learning.  Training these more complex networks takes account and data much more.  Although neural networks were invented more than fifty years ago, Neural Networks  Deep has recently become operational, thanks to powerful processors, and more,  Fast GPUs.  So, thank you guys for your prompt response with smoother tires!  A few years ago, Google and Facebook showed deep neural networks that they could find  Faces in images as well as humans - and humans are really good at this!  It was a great landmark.  Currently deep neural networks are driving cars, translating human speech, diagnosing medical conditions  And much more.  These algorithms are very sophisticated, but it's less clear whether they should be described  As \"smart\".  They can really only do one thing like classifying butterflies, finding faces, or translating languages.  This type of AI is called Weak AI or Narrow AI.  It's only smart in specific tasks.  But that does not mean it's not useful; I mean medical devices that can diagnose,  The cars that can drive themselves are amazing!  But do we need those computers to compose music and look for delicious recipes at  Their free time?  Most likely not.  Although it would be rather nice.  Artificial intelligence is general purpose, intelligent and similar to a human being, called  Strong AI.  No one has proved that there is anything close to the human level in artificial intelligence so far.  Some believe it is impossible, but many people have pointed out the explosion of digital knowledge  - such as Wikipedia simulations, web pages, and YouTube videos - that is a good perfection  For strong AI.  While you can only watch a maximum of 24 hours of YouTube per day, a computer can watch  Millions of hours.  For example, IBM's Watson consults and collects information from 200 million pages of content,  Including the full text of Wikipedia.  Although not a strong AI, Watson is very clever, crushing human competition in Jeopardy  In 2011.  Artificial intelligence is not limited to storing large amounts of information, but it can also learn  During the time, often much faster than humans.  In 2016, Google first demonstrated AlphaGo, a narrow AI game that plays very complex  Game Go.  One of the ways that made him very good and able to overcome the best human players was through  Clone playing with the same for millions and millions of times.  He learned what he did and what did not work, and along the way, he discovered successful strategies  All by himself.  This is called enhanced learning, and is a very strong approach.  In fact, it's very similar to how humans learn.  People do not have the ability to walk magically ... It takes thousands of hours  From trial and error to find out.  Computers are now on the cusp of learning by trial and error, and for many narrow problems,  Enhanced learning has been used on a large scale.  What will be interesting to see is whether these types of learning techniques can be applied  More widely, for man-made, powerful artificial intelligence that learns much like the way children learn, however  At very rapid rates.  If this happens, there are some very large changes in the human-subject store  We will reconsider it later.  thanks for watching.  I see you next week. ",
            "videoid": "z-EtmaFJieY",
            "viewCount": "249706"
        }
    }
}